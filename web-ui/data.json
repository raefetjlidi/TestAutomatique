{
    "Sheet1": [
        {
            "Sc\u00e9nario": "j'ouvre le panel de cl\u00f4ture",
            "StepDef": "@Then(\"j'ouvre le panel de cl\u00f4ture\")\n    public void j_ouvre_le_panel_de_cl\u00f4ture() {\n        actionClosedPage.openPanelCloseAction();\n    }",
            "RealPage": "public void openPanelCloseAction() {\n        WebUI.clickElement(panelCloseAction);\n    }"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie que la fiche action est cl\u00f4tur\u00e9",
            "StepDef": "@Then(\"je v\u00e9rifie que la fiche action est cl\u00f4tur\u00e9\")\n    public void je_v\u00e9rifie_que_la_fiche_action_est_cl\u00f4tur\u00e9() {\n        actionClosedPage.retourAction();\n        ficheActionSimplifierPage.searchActionDetails(excelHelpers);\n        actionClosedPage.checkActionIsClosed();\n\n    }",
            "RealPage": "public void retourAction() {\n        WebUI.scrollToElementAtBottom(buttonretour);\n        WebUI.clickElement(buttonretour);\n    }"
        },
        {
            "Sc\u00e9nario": "je coche non cl\u00f4ture du fiche action",
            "StepDef": "@Then(\"je coche non cl\u00f4ture du fiche action\")\n    public void je_coche_non_cl\u00f4ture_du_fiche_action() {\n        actionClosedPage.openActionSheet();\n        actionClosedPage.openPanelCloseAction();\n        actionClosedPage.cocherActionNOClose();\n    }",
            "RealPage": "public void openActionSheet() {\n        WebUI.clickElement(numActionGrid);\n    }"
        },
        {
            "Sc\u00e9nario": "je clique sur valider et v\u00e9rfier que la fiche action est non cl\u00f4tur\u00e9e",
            "StepDef": "@Then(\"je clique sur valider et v\u00e9rfier que la fiche action est non cl\u00f4tur\u00e9e\")\n    public void je_clique_sur_valider_et_v\u00e9rfier_que_la_fiche_action_est_non_cl\u00f4tur\u00e9e() {\n        actionClosedPage.retourAction();\n        ficheActionSimplifierPage.searchActionDetails(excelHelpers);\n        actionClosedPage.checkActionIsNoClosed();\n    }",
            "RealPage": "public void retourAction() {\n        WebUI.scrollToElementAtBottom(buttonretour);\n        WebUI.clickElement(buttonretour);\n    }"
        },
        {
            "Sc\u00e9nario": "j'ouvre le panel plan d'action",
            "StepDef": "@Then(\"j'ouvre le panel plan d'action\")\n    public void j_ouvre_le_panel_plan_d_action() {// Write code here that turns the phrase above into concrete actions\n        actionClosedPage.openPanelCloseAction();\n    }",
            "RealPage": "public void openPanelCloseAction() {\n        WebUI.clickElement(panelCloseAction);\n    }"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie que le champ Rapport de cl\u00f4ture  suit le param\u00e9trage effectu\u00e9",
            "StepDef": "@Then(\"je v\u00e9rifie que le champ Rapport de cl\u00f4ture  suit le param\u00e9trage effectu\u00e9\")\n    public void je_v\u00e9rifie_que_le_champ_rapport_de_cl\u00f4ture_suit_le_param\u00e9trage_effectu\u00e9() {\n        actionClosedPage.checkRapportActionClose();\n    }",
            "RealPage": "public void checkRapportActionClose() {\n        if (isRequiredCommentClose.equals(\"OUI\")) {\n            Utils.chekMessageControle(\"ctl00_ContentPlaceHolder1_ValidatorCalloutExtender26_popupTable\");\n        }"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie que lorsqu'on coche la case 'Cl\u00f4tur\u00e9e', la date du jour est saisie syst\u00e9matiquement au niveau du champ Date Cl\u00f4ture et le champ reste modifiable",
            "StepDef": "@When(\"je v\u00e9rifie que lorsqu'on coche la case 'Cl\u00f4tur\u00e9e', la date du jour est saisie syst\u00e9matiquement au niveau du champ Date Cl\u00f4ture et le champ reste modifiable\")\n    public void je_v\u00e9rifie_que_lorsqu_on_coche_la_case_cl\u00f4tur\u00e9e_la_date_du_jour_est_saisie_syst\u00e9matiquement_au_niveau_du_champ_date_cl\u00f4ture_et_le_champ_reste_modifiable() {\n        actionClosedPage.checkDateIsAutomaticCreate();\n    }",
            "RealPage": "public void checkDateIsAutomaticCreate() {\n        // R\u00e9cup\u00e9rer la date du jour\n        LocalDate today = LocalDate.now();\n        System.out.println(\"Date d'aujourd'hui : \" + today);\n        WebUI.clickElement(radioButtonClose);\n        String dateClot = WebUI.getAttributeElement(dateClosed, \"value\");\n        if (WebUI.getLang().equals(\"fr-FR\")) {\n            DateTimeFormatter formatterFrench = DateTimeFormatter.ofPattern(\"dd/MM/yyyy\", Locale.FRENCH);\n            LocalDate dateFrench = LocalDate.parse(dateClot, formatterFrench);\n            Assert.assertEquals(today, dateFrench, \"the date  is  not  same \");\n        }"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie que le panel cl\u00f4ture s'ouvre",
            "StepDef": "@Then(\"je v\u00e9rifie que le panel cl\u00f4ture s'ouvre\")\n    public void je_v\u00e9rifie_que_le_panel_cl\u00f4ture_s_ouvre() {\n        actionClosedPage.checkElmentCloseActionIsVisible();\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "j'acc\u00e8de \u00e0 l'agenda d'action",
            "StepDef": "@When(\"j'acc\u00e8de \u00e0 l'agenda d'action\")\n    public void j_acc\u00e8de_\u00e0_l_agenda_d_action() {\n        agendaAction.consultAgendaAction();\n    }",
            "RealPage": "public void consultAgendaAction() {\n        WebUI.clickElement(bottonAgendaAction);\n    }"
        },
        {
            "Sc\u00e9nario": "je clique sur la demande de modification",
            "StepDef": "@When(\"je clique sur la demande de modification\")\n    public void je_clique_sur_la_demande_de_modification() {\n        agendaAction.clickButtonModification();\n    }",
            "RealPage": "public void clickButtonModification() {\n        List<WebElement> tab = WebUI.getWebElement(gridActionReal).findElement(By.xpath(\"//*[@id=\\\"ctl00_ContentPlaceHolder1_GridView1\\\"]/tbody/tr[1]\")).findElements(By.tagName(\"td\"));\n        int indexbtnDemande = 0;\n        int indexDedlaine = 0;\n        if (!FrameworkConstants.filialeConnecte.equals(\"Mono\")) {\n            indexbtnDemande = tab.size() - 2;\n            indexDedlaine = tab.size() - 9;\n\n        }"
        },
        {
            "Sc\u00e9nario": "Je v\u00e9rifie si la cr\u00e9ation de la demande de modification est possible ou non selon le param\u00e9trage",
            "StepDef": "@Then(\"Je v\u00e9rifie si la cr\u00e9ation de la demande de modification est possible ou non selon le param\u00e9trage\")\n    public void je_v\u00e9rifie_si_la_cr\u00e9ation_de_la_demande_de_modification_est_possible_ou_non_selon_le_param\u00e9trage() {\n        agendaAction.chechKModifIsPossible();\n    }",
            "RealPage": "public void chechKModifIsPossible() {\n        WebUI.isElementVisible(popUpDelaiModif, FrameworkConstants.WAIT_Element_Check_Visible_Or_Not);\n        WebUI.clickElement(bottonClosepopUpDelaiModif);\n\n\n    }"
        },
        {
            "Sc\u00e9nario": "je saisis les d\u00e9tails de la demande",
            "StepDef": "@When(\"je saisis les d\u00e9tails de la demande\")\n    public void je_saisis_les_d\u00e9tails_de_la_demande() {\n        agendaAction.enterDesgnaitionEx();\n\n    }",
            "RealPage": "public void enterDesgnaitionEx() {\n\n        WebUI.setText(textDetailDemande, \" d\u00e9tails de la  demande  \" + DataGenerateUtils.randomParaghe());\n\n    }"
        },
        {
            "Sc\u00e9nario": "je clique sur Valider la demande de modification",
            "StepDef": "@When(\"je clique sur Valider la demande de modification\")\n    public void je_clique_sur_Valider_la_demande_de_modification() {\n        agendaAction.clickToValidRequestModification();\n\n    }",
            "RealPage": "public void clickToValidRequestModification() {\n        WebUI.clickElement(btnValiderModification);\n\n    }"
        },
        {
            "Sc\u00e9nario": "je recherche la demande de modification",
            "StepDef": "@When(\"je recherche la demande de modification\")\n    public void je_recherche_la_demande_de_modification() {\n        if (typeAction.equals(\"simplifier\")) {\n            excelHelpers.setExcelFile(FrameworkConstants.EXCEL_DATA_FILE_PATH, \"ActSimpl\");\n            numberOfAction = excelHelpers.getCellData(FrameworkConstants.row, 5);\n        }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "je recherche la demande de modification d'action simplifier",
            "StepDef": "@When(\"je recherche la demande de modification d'action simplifier\")\n    public void je_recherche_la_demande_de_modification_simplifier() {\n        excelHelpers.setExcelFile(FrameworkConstants.EXCEL_DATA_FILE_PATH, \"ActSimpl\");\n        numberOfAction = excelHelpers.getCellData(FrameworkConstants.row, 5);\n        agendaAction.searchDemandeAction(numberOfAction);\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "je clique sur editer la demande de  modification",
            "StepDef": "@Then(\"je clique sur editer la demande de  modification\")\n    public void je_clique_sur_editer_la_demande_de_modification() {\n        agendaAction.clickToEditerRequest();\n    }",
            "RealPage": "public void clickToEditerRequest() {\n        WebUI.getWebElement(gridDemandeExt).findElement(By.xpath(\"//*[@id=\\\"ctl00_ContentPlaceHolder1_GridViewDemandExtension\\\"]/tbody/tr[2]/td[1]\")).findElement(By.tagName(\"a\")).click();\n        WebUI.clickElement(bottonEditerRequest);\n\n    }"
        },
        {
            "Sc\u00e9nario": "Je modifie la d\u00e9signation de la sous-action",
            "StepDef": "@Then(\"Je modifie la d\u00e9signation de la sous-action\")\n    public void je_modifie_la_d\u00e9signation_de_la_sous_action() {\n        agendaAction.modifuDesagnationActionPlan(excelHelpers);\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "Je v\u00e9rifie que la modification de la sous action est possible",
            "StepDef": "@Then(\"Je v\u00e9rifie que la modification de la sous action est possible\")\n    public void je_v\u00e9rifie_que_la_modification_de_la_sous_action_est_possible() {\n        agendaAction.checkModifcationIsPossible();\n\n    }",
            "RealPage": "public void checkModifcationIsPossible() {\n        planActionPage.openPanelActionPlan();\n        String desagnationModifiy = \"\";\n        if (WebUI.isElementVisible(planActionPage.getGridActionPlanWithManyRespo(), WAIT_Element_Check_Visible_Or_Not)) {\n            desagnationModifiy = WebUI.getWebElement(planActionPage.getGridActionPlanWithManyRespo()).findElement(By.xpath(\"//*[@id=\\\"ctl00_ContentPlaceHolder1_GridView1\\\"]/tbody/tr/td[4]\")).findElement(By.tagName(\"span\")).getText();\n        }"
        },
        {
            "Sc\u00e9nario": "Je v\u00e9rifier que lorsqu'on cliquer sur le bouton Editer, le pop up modification de la sous action s'affiche",
            "StepDef": "@Then(\"Je v\u00e9rifier que lorsqu'on cliquer sur le bouton Editer, le pop up modification de la sous action s'affiche\")\n    public void je_v\u00e9rifier_que_lorsqu_on_cliquer_sur_le_bouton_editer_le_pop_up_modification_de_la_sous_action_s_affiche() {\n        agendaAction.checkPopUpPlanActionForModifcationIsDisplayed();\n    }",
            "RealPage": "public void checkPopUpPlanActionForModifcationIsDisplayed() {\n        WebUI.verifyElementVisible(planActionPage.getPopupActionPlan(), WAIT_Element_Check_Visible_Or_Not);\n\n    }"
        },
        {
            "Sc\u00e9nario": "Je refuse la demande de modification",
            "StepDef": "@Then(\"Je refuse la demande de modification\")\n    public void je_refuse_la_demande_de_modification() {\n        agendaAction.clickToRefuseExt();\n\n    }",
            "RealPage": "public void clickToRefuseExt() {\n        WebUI.getWebElement(gridDemandeExt).findElement(By.xpath(\"//*[@id=\\\"ctl00_ContentPlaceHolder1_GridViewDemandExtension\\\"]/tbody/tr[2]/td[1]\")).findElement(By.tagName(\"a\")).click();\n        WebUI.clickElement(bottonRefusRequest);\n    }"
        },
        {
            "Sc\u00e9nario": "Je v\u00e9rifie que un pop up motif de refus s'affiche",
            "StepDef": "@Then(\"Je v\u00e9rifie que un pop up motif de refus s'affiche\")\n    public void je_v\u00e9rifie_que_un_pop_up_motif_de_refus_s_affiche() {\n        agendaAction.checkPopUpMotifRefuseExtIsDisplayed();\n    }",
            "RealPage": "public void checkPopUpMotifRefuseExtIsDisplayed() {\n\n        WebUI.verifyElementVisible(textFieldMotifRefusRequest, WAIT_Element_Check_Visible_Or_Not);\n        WebUI.verifyElementVisible(bottonValidMotifRefusRequest, WAIT_Element_Check_Visible_Or_Not);\n        WebUI.verifyElementVisible(popUpMotifRefusRequest, WAIT_Element_Check_Visible_Or_Not);\n    }"
        },
        {
            "Sc\u00e9nario": "Je v\u00e9rifie la demande est approuv\u00e9 et la sous action est mise \u00e0 jour",
            "StepDef": "@Then(\"Je v\u00e9rifie la demande est approuv\u00e9 et la sous action est mise \u00e0 jour\")\n    public void Je_v\u00e9rifie_la_demande_est_approuv\u00e9_et_la_sous_action_est_mise_\u00e0_jour() {\n        agendaAction.checkModificationIsDone();\n    }",
            "RealPage": "public void checkModificationIsDone() {\n        String dateReal = \"\";\n        if (WebUI.isElementVisible(planActionPage.getGridActionPlanWithManyRespo(), WAIT_Element_Check_Visible_Or_Not)) {\n            dateReal = WebUI.getWebElement(planActionPage.getGridActionPlanWithManyRespo()).findElement(By.xpath(\"//*[@id=\\\"ctl00_ContentPlaceHolder1_GridView1\\\"]/tbody/tr/td[7]\")).findElement(By.tagName(\"span\")).getText();\n        }"
        },
        {
            "Sc\u00e9nario": "je Verifier que le pop up de prise de d\u00e9cision s'affiche",
            "StepDef": "@Then(\"je Verifier que le pop up de prise de d\u00e9cision s'affiche\")\n    public void je_verifier_que_le_pop_up_de_prise_de_d\u00e9cision_s_affiche() {\n        agendaAction.checkPopupExtRequestIsDisplyed();\n\n    }",
            "RealPage": "public void checkPopupExtRequestIsDisplyed() {\n        WebUI.getWebElement(gridDemandeExt).findElement(By.xpath(\"//*[@id=\\\"ctl00_ContentPlaceHolder1_GridViewDemandExtension\\\"]/tbody/tr[2]/td[1]\")).findElement(By.tagName(\"a\")).click();\n        WebUI.verifyElementVisible(popUpDelaiModif, WAIT_Element_Check_Visible_Or_Not);\n        WebUI.verifyElementVisible(bottonEditerRequest, WAIT_Element_Check_Visible_Or_Not);\n        WebUI.verifyElementVisible(bottonApprove, WAIT_Element_Check_Visible_Or_Not);\n        WebUI.verifyElementVisible(bottonEditerRequest, WAIT_Element_Check_Visible_Or_Not);\n\n    }"
        },
        {
            "Sc\u00e9nario": "je saisis  le  motif de  refus",
            "StepDef": "@When(\"je saisis  le  motif de  refus\")\n    public void je_saisis_le_motif_de_refus() {\n        agendaAction.textFieldMotifRefusRequest();\n    }",
            "RealPage": "public void textFieldMotifRefusRequest() {\n        WebUI.setText(textFieldMotifRefusRequest, DataGenerateUtils.randomParaghe());\n        WebUI.clickElement(bottonValidMotifRefusRequest);\n\n    }"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie la demande est refus\u00e9 et la sous action n'est pas mise \u00e0 jour",
            "StepDef": "@Then(\"je v\u00e9rifie la demande est refus\u00e9 et la sous action n'est pas mise \u00e0 jour\")\n    public void je_v\u00e9rifie_la_demande_est_refus\u00e9_et_la_sous_action_n_est_pas_mise_\u00e0_jour() {\n        agendaAction.checkDeadlineISNotChange();\n    }",
            "RealPage": "public void checkDeadlineISNotChange() {\n        String date = WebUI.getTextElement(spanDelaiReal);\n        WebUI.verifyElementTextEquals(date, deliaR\u00e9alisation);\n\n    }"
        },
        {
            "Sc\u00e9nario": "Je v\u00e9rifie que le pop up de prise de d\u00e9cision s'affiche",
            "StepDef": "@Then(\"Je v\u00e9rifie que le pop up de prise de d\u00e9cision s'affiche\")\n    public void Je_v\u00e9rifie_que_le_pop_up_de_prise_de_d\u00e9cision_affiche() {\n        agendaAction.checkPopuDecisoonIsDispalyed();\n    }",
            "RealPage": "public void checkPopuDecisoonIsDispalyed() {\n\n        WebUI.clickElement(openRequest);\n        WebUI.verifyElementVisible(modalExtensionDecision);\n\n    }"
        },
        {
            "Sc\u00e9nario": "Je v\u00e9rifie que les champs Taux r\u00e9al Commentaires Date r\u00e9alisation et Co\u00fbt deviennent modifiables",
            "StepDef": "@Then(\"Je v\u00e9rifie que les champs Taux r\u00e9al Commentaires Date r\u00e9alisation et Co\u00fbt deviennent modifiables\")\n    public void je_v\u00e9rifie_que_les_champs_taux_r\u00e9al_commentaires_date_r\u00e9alisation_et_co\u00fbt_deviennent_modifiables() {\n        agendaAction.checkElementIsModifaible();\n    }",
            "RealPage": "public void checkElementIsModifaible() {\n        WebUI.waitForElementVisible(gridActionReal);\n        WebUI.verifyElementVisible(textFieldRate, WAIT_Element_Check_Visible_Or_Not);\n        Assert.assertNotEquals(WebUI.getAttributeElement(textFieldComment, \"disabled\"), \"true\", \"field Comment is not capable of being modified\");\n        Assert.assertNotEquals(WebUI.getAttributeElement(textFieldDateReal, \"disabled\"), \"true\", \"Field Date is not capable of being modified\");\n    }"
        },
        {
            "Sc\u00e9nario": "Je v\u00e9rifie que le champ date de r\u00e9alisation est obligatoire",
            "StepDef": "@Then(\"Je v\u00e9rifie que le champ date de r\u00e9alisation est obligatoire\")\n    public void je_v\u00e9rifie_que_le_champ_date_de_r\u00e9alisation_est_obligatoire() {\n        agendaAction.checkDateRealIsRequired();\n    }",
            "RealPage": "public void checkDateRealIsRequired() {\n        WebUI.waitForElementVisible(gridActionReal);\n        rate = String.valueOf(DataGenerateUtils.randomNumberIntFromTo(0, 99));\n        WebUI.setText(textFieldRate, rate);\n        WebUI.clickElement(buttonValideRate);\n        WebUI.scrollToElementAtTop(spanMassageControlDate);\n        if (WebUI.getLang().equals(\"fr-FR\")) {\n            WebUI.verifyElementText(spanMassageControlDate, \"La date de suivi est un champ obligatoire\");\n        }"
        },
        {
            "Sc\u00e9nario": "je clique sur bouton Enregistrer taux de r\u00e9alisation",
            "StepDef": "@When(\"je clique sur bouton Enregistrer taux de r\u00e9alisation\")\n    public void je_clique_sur_bouton_enregistrer_taux_de_r\u00e9alisation() {\n        agendaAction.clickSaveRateAgenda();\n    }",
            "RealPage": "public void clickSaveRateAgenda() {\n        WebUI.clickElement(bottonSaveRateReal);\n    }"
        },
        {
            "Sc\u00e9nario": "Je v\u00e9rifie que un pop up de la sous action s'affiche",
            "StepDef": "@Then(\"Je v\u00e9rifie que un pop up de la sous action s'affiche\")\n    public void je_v\u00e9rifie_que_un_pop_up_de_la_sous_action_s_affiche() {\n        agendaAction.checkPopUpActionCompletedIsDisplayed();\n    }",
            "RealPage": "public void checkPopUpActionCompletedIsDisplayed() {\n        WebUI.verifyElementVisible(popupActionCompleted, WAIT_Element_Check_Visible_Or_Not);\n    }"
        },
        {
            "Sc\u00e9nario": "Je v\u00e9rifie que les champs d\u00e9signation de la sous action et la date de saisie de la r\u00e9alisation sont fig\u00e9s",
            "StepDef": "@Then(\"Je v\u00e9rifie que les champs d\u00e9signation de la sous action et la date de saisie de la r\u00e9alisation sont fig\u00e9s\")\n    public void je_v\u00e9rifie_que_les_champs_d\u00e9signation_de_la_sous_action_et_la_date_de_saisie_de_la_r\u00e9alisation_sont_fig\u00e9s() {\n        agendaAction.checkDesagnationAndDateIsNotModifiable();\n    }",
            "RealPage": "public void checkDesagnationAndDateIsNotModifiable() {\n        Assert.assertEquals(WebUI.getAttributeElement(textFiledActionPlan, \"disabled\"), \"true\", \"Desagnation can be modified \");\n        Assert.assertEquals(WebUI.getAttributeElement(textFieldEntryDateReal, \"disabled\"), \"true\", \"date entry can be modified \");\n    }"
        },
        {
            "Sc\u00e9nario": "je clique sur num\u00e9ro d'action \u00e0 r\u00e9alise",
            "StepDef": "@When(\"je clique sur num\u00e9ro d'action \u00e0 r\u00e9alise\")\n    public void je_clique_sur_num\u00e9ro_d_action_\u00e0_r\u00e9alise() {\n        agendaAction.openButtonOpenActionCompleted();\n    }",
            "RealPage": "public void openButtonOpenActionCompleted() {\n        WebUI.clickElement(buttonOpenActionAchievement);\n    }"
        },
        {
            "Sc\u00e9nario": "Je v\u00e9rifie que l'ajout d'un groupe de travail \u00e0 la liste des intervenants",
            "StepDef": "@Then(\"Je v\u00e9rifie que l'ajout d'un groupe de travail \u00e0 la liste des intervenants\")\n    public void je_v\u00e9rifie_que_l_ajout_d_un_groupe_de_travail_\u00e0_la_liste_des_intervenants() {\n        agendaAction.addGroupAndChekGroupAdded();\n    }",
            "RealPage": "public void addGroupAndChekGroupAdded() {\n        String namGroup = WebUI.getTextElement(nameOfGroupInGrid);\n        WebUI.setText(searchInput, namGroup);\n        WebUI.clickElement(chekBoxGroupInGrid);\n        WebUI.clickElement(buttonValideInterv);\n        WebElement table = WebUI.getWebElement(tableIntervent);\n        Assert.assertTrue(table.findElements(By.tagName(\"tr\")).size() > 1, \"group is not display\");\n\n\n    }"
        },
        {
            "Sc\u00e9nario": "je clique sur supprimer un intervenants",
            "StepDef": "@When(\"je clique sur supprimer un intervenants\")\n    public void je_clique_sur_supprimer_un_intervenants() {\n        // Write code here that turns the phrase above into concrete actions\n        agendaAction.deleteInterven();\n    }",
            "RealPage": "public void deleteInterven() {\n        WebUI.clickElement(panelListIntervent);\n        matricule = WebUI.getTextElement(matriculeEmploipInGrid);\n        sizeBeforDele = WebUI.getWebElement(tableIntervent).findElements(By.tagName(\"tr\")).size();\n        WebUI.clickElement(chekBoxEmploiInGridIntervent);\n        WebUI.clickElement(buttonDeleteInterv);\n        WebUI.acceptAlert();\n\n\n    }"
        },
        {
            "Sc\u00e9nario": "Je v\u00e9rifie que la suppression d'un employ\u00e9 de la liste des intervenants",
            "StepDef": "@Then(\"Je v\u00e9rifie que la suppression d'un employ\u00e9 de la liste des intervenants\")\n    public void je_v\u00e9rifie_que_la_suppression_d_un_employ\u00e9_de_la_liste_des_intervenants() {\n        // Write code here that turns the phrase above into concrete actions\n        agendaAction.checkdeleteInterven();\n    }",
            "RealPage": "public void checkdeleteInterven() {\n\n        int dellsizeafterDele = WebUI.getWebElement(tableIntervent).findElements(By.tagName(\"tr\")).size();\n        Assert.assertEquals(dellsizeafterDele, sizeBeforDele - 1, \"intervenet is not deleted \");\n        WebUI.setText(searchInputInterventEmpl, matricule);\n        try {\n            matricule = DriverManager.getDriver().findElement(matriculeEmploipInGrid).getText();\n            Assert.assertEquals(matricule, \"\", \"is not  deleted\");\n\n        }"
        },
        {
            "Sc\u00e9nario": "je clique sur Ajouter Liste des pi\u00e8ces jointes",
            "StepDef": "@When(\"je clique sur Ajouter Liste des pi\u00e8ces jointes\")\n    public void je_clique_sur_ajouter_liste_des_pi\u00e8ces_jointes() {\n        agendaAction.openPanelAttechement();\n    }",
            "RealPage": "public void openPanelAttechement() {\n        WebUI.clickElement(pnelAttechement);\n        WebUI.clickElementWithJs(buttonAddAttechement);\n\n    }"
        },
        {
            "Sc\u00e9nario": "Je v\u00e9rifie que le pop up Pi\u00e8ce\\\\(s) jointe\\\\(s) s'affiche de sous action",
            "StepDef": "@Then(\"Je v\u00e9rifie que le pop up Pi\u00e8ce\\\\(s) jointe\\\\(s) s'affiche de sous action\")\n    public void je_v\u00e9rifie_que_le_pop_up_pi\u00e8ce_s_jointe_s_s_affiche_de_sous_action() {\n        agendaAction.checkPopupAttechemntIsDisplay();\n    }",
            "RealPage": "public void checkPopupAttechemntIsDisplay() {\n        WebUI.verifyElementVisible(moadalAttechement);\n    }"
        },
        {
            "Sc\u00e9nario": "je saisis object de pi\u00e8ce jointe de sous action",
            "StepDef": "@When(\"je saisis object de pi\u00e8ce jointe de sous action\")\n    public void je_saisis_object_de_pi\u00e8ce_jointe_de_sous_action() {\n        agendaAction.entreObjectAttachement();\n    }",
            "RealPage": "public void entreObjectAttachement() {\n        objectAttachement = DataGenerateUtils.randomParaghe();\n        WebUI.setText(textFiledObjectAttachement, objectAttachement);\n    }"
        },
        {
            "Sc\u00e9nario": "Je v\u00e9rifie l'ajout d'une pi\u00e8ce jointe de sous action",
            "StepDef": "@Then(\"Je v\u00e9rifie l'ajout d'une pi\u00e8ce jointe de sous action\")\n    public void je_v\u00e9rifie_l_ajout_d_une_pi\u00e8ce_jointe_de_sous_action() {\n        agendaAction.checkAttachement();\n    }",
            "RealPage": "public void checkAttachement() {\n        WebUI.clickElement(buttonValidAttachment);\n        int sizeTab = WebUI.getWebElement(tableAttachement).findElements(By.tagName(\"tr\")).size();\n        Assert.assertTrue(sizeTab > 1, \"Attachement  is  not insert \");\n        String fileAttechement = WebUI.getTextElement(fileAttechementInGrid);\n        String contentAttechement = WebUI.getTextElement(objectAttachementInGrid);\n        String mat = WebUI.getMatConnecte();\n        Assert.assertTrue(fileAttechement.contains(\"DOCX_File_01(\" + mat + \").docx\"), \"file is not  upload\");\n\n        Assert.assertEquals(objectAttachement, contentAttechement, \"object  Attachement  is not  insert\");\n    }"
        },
        {
            "Sc\u00e9nario": "Je v\u00e9rifie que la Liste des actions auxquelles cette sous action est rattach\u00e9e affiche les num\u00e9ros d'action auxquelles cette sous action est rattach\u00e9e",
            "StepDef": "@Then(\"Je v\u00e9rifie que la Liste des actions auxquelles cette sous action est rattach\u00e9e affiche les num\u00e9ros d'action auxquelles cette sous action est rattach\u00e9e\")\n    public void je_v\u00e9rifie_que_la_liste_des_actions_auxquelles_cette_sous_action_est_rattach\u00e9e_affiche_les_num\u00e9ros_d_action_auxquelles_cette_sous_action_est_rattach\u00e9e() {\n        agendaAction.openPanel();\n        agendaAction.chekcAttachAction();\n    }",
            "RealPage": "public void openPanel() {\n        WebUI.clickElement(panelAttacheAction);\n    }"
        },
        {
            "Sc\u00e9nario": "je clique sur Acc\u00e9der \u00e0 l'action",
            "StepDef": "@When(\"je clique sur Acc\u00e9der \u00e0 l'action\")\n    public void je_clique_sur_acc\u00e9der_\u00e0_l_action() {\n        agendaAction.accessTheAction();\n    }",
            "RealPage": "public void accessTheAction() {\n        WebUI.clickElement(buttonAccessTheAction);\n    }"
        },
        {
            "Sc\u00e9nario": "je recherche l'action \u00e0 suivre",
            "StepDef": "@When(\"je recherche l'action \u00e0 suivre\")\n    public void je_recherche_l_action_\u00e0_suivre() {\n        excelHelpers.setExcelFile(FrameworkConstants.EXCEL_DATA_FILE_PATH, \"Action\");\n        numberOfAction = excelHelpers.getCellData(FrameworkConstants.row, 7);\n        agendaActionFollowUp.searcheActionToFollowUp(numberOfAction);\n\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "je recherche l'action \u00e0 suivire",
            "StepDef": "@When(\"je recherche l'action \u00e0 suivire\")\n    public void je_recherche_l_action_\u00e0_suivire() {\n        excelHelpers.setExcelFile(FrameworkConstants.EXCEL_DATA_FILE_PATH, \"Action\");\n        numberOfAction = excelHelpers.getCellData(FrameworkConstants.row, 7);\n        agendaActionFollowUp.searcheActionToFollowUp(numberOfAction);\n\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifier que la rubrique de modification du taux s'affiche sous le tableau et le taux et la date de r\u00e9alisation sont pr\u00e9saisis avec le taux et la date renseign\u00e9s par le responsable de r\u00e9alisation.",
            "StepDef": "@Then(\"je v\u00e9rifier que la rubrique de modification du taux s'affiche sous le tableau et le taux et la date de r\u00e9alisation sont pr\u00e9saisis avec le taux et la date renseign\u00e9s par le responsable de r\u00e9alisation.\")\n    public void je_v\u00e9rifier_que_la_rubrique_de_modification_du_taux_s_affiche_sous_le_tableau_et_le_taux_et_la_date_de_r\u00e9alisation_sont_pr\u00e9saisis_avec_le_taux_et_la_date_renseign\u00e9s_par_le_responsable_de_r\u00e9alisation() {\n        agendaActionFollowUp.checkPopupListActionPlanOneResspoChnageRate();\n    }",
            "RealPage": "public void checkPopupListActionPlanOneResspoChnageRate() {\n        WebUI.verifyElementVisible(modaleOneRespo, WAIT_Element_Check_Visible_Or_Not);\n\n    }"
        },
        {
            "Sc\u00e9nario": "je clique sur valider sans remplir le commentaire",
            "StepDef": "@Then(\"je clique sur valider sans remplir le commentaire\")\n    public void je_clique_sur_valider_sans_remplir_le_commentaire() {\n        agendaActionFollowUp.clickChangeRateReal();\n\n\n    }",
            "RealPage": "public void clickChangeRateReal() {\n        WebUI.clickElement(buttonValideChangeRate);\n    }"
        },
        {
            "Sc\u00e9nario": "Je verifi\u00e9 qu'un message de contr\u00f4le s'affiche le commentaire de responsable de suivi est obligatoire",
            "StepDef": "@Then(\"Je verifi\u00e9 qu'un message de contr\u00f4le s'affiche le commentaire de responsable de suivi est obligatoire\")\n    public void je_verifi\u00e9_qu_un_message_de_contr\u00f4le_s_affiche_le_commentaire_de_responsable_de_suivi_est_obligatoire() {\n        agendaActionFollowUp.checkMessageCommentRealIsDisplayed();\n    }",
            "RealPage": "public void checkMessageCommentRealIsDisplayed() {\n        Utils.chekMessageControle(\"ctl00_ContentPlaceHolder1_ajaxToolKit_1_popupTable\");\n    }"
        },
        {
            "Sc\u00e9nario": "j'acc\u00e8de \u00e0 l'action \u00e0 suivire",
            "StepDef": "@Then(\"j'acc\u00e8de \u00e0 l'action \u00e0 suivire\")\n    public void j_acc\u00e8de_\u00e0_l_action_\u00e0_suivire() {\n        agendaActionFollowUp.openActionFollowUp();\n    }",
            "RealPage": "public void openActionFollowUp() {\n        WebUI.clickElement(buttonOpenActionFlowup);\n\n    }"
        },
        {
            "Sc\u00e9nario": "je modifie le taux de r\u00e9alisation d'action \u00e0 suivre",
            "StepDef": "@When(\"je modifie le taux de r\u00e9alisation d'action \u00e0 suivre\")\n    public void je_modifie_le_taux_de_r\u00e9alisation_d_action_\u00e0_suivre() {\n        agendaActionFollowUp.changeRateAndCommentReal();\n    }",
            "RealPage": "public void changeRateAndCommentReal() {\n        rateReal = String.valueOf(DataGenerateUtils.randomNumberIntFromTo(30, 90));\n        WebUI.setText(textFieldChangeRate, rateReal);\n        WebUI.setText(textFieldCommentChangeRate, DataGenerateUtils.randomParaghe());\n        WebUI.clickElement(buttonValideChangeRate);\n    }"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifier que le responsable de suivi peut modifier le taux de r\u00e9alisation",
            "StepDef": "@Then(\"je v\u00e9rifier que le responsable de suivi peut modifier le taux de r\u00e9alisation\")\n    public void je_v\u00e9rifier_que_le_responsable_de_suivi_peut_modifier_le_taux_de_r\u00e9alisation() {\n        agendaActionFollowUp.checkRateIsChange();\n    }",
            "RealPage": "public void checkRateIsChange() {\n        String rateChange = WebUI.getAttributeElement(textFieldRateChange, \"value\");\n        WebUI.verifyElementTextEquals(rateChange, rateReal);\n    }"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifier que le pop up Modifier taux de r\u00e9alisation s'affiche",
            "StepDef": "@Then(\"je v\u00e9rifier que le pop up Modifier taux de r\u00e9alisation s'affiche\")\n    public void je_v\u00e9rifier_que_le_pop_up_s_affiche() {// Write code here that turns the phrase above into concrete actions\n        agendaActionFollowUp.checkPopupListActionPlanMultiResspoChnageRate();\n    }",
            "RealPage": "public void checkPopupListActionPlanMultiResspoChnageRate() {\n        WebUI.verifyElementVisible(modaleMultiRespo, WAIT_Element_Check_Visible_Or_Not);\n\n    }"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifier que Les informations saisies sont enregistr\u00e9es",
            "StepDef": "@Then(\"je v\u00e9rifier que Les informations saisies sont enregistr\u00e9es\")\n    public void je_v\u00e9rifier_que_les_informations_saisies_sont_enregistr\u00e9es() {\n        agendaActionFollowUp.checkDataIsChanged();\n    }",
            "RealPage": "public void checkDataIsChanged() {\n        String rateChange = WebUI.getTextElement(rateRealGridActionFollowUp);\n        WebUI.verifyElementTextEquals(rateChange, rateReal);\n\n//        String commentChange = WebUI.getAttributeElement(textareaCommentReal,\"value\");\n        // WebUI.verifyElementTextEquals(commentChange, comment);\n    }"
        },
        {
            "Sc\u00e9nario": "Je v\u00e9rifie que la modification du panel plan d'action n'est pas possible: les boutons rattacher, ajouter, dupliquer et supprimer sont d\u00e9sactiv\u00e9s",
            "StepDef": "@Then(\"Je v\u00e9rifie que la modification du panel plan d'action n'est pas possible: les boutons rattacher, ajouter, dupliquer et supprimer sont d\u00e9sactiv\u00e9s\")\n    public void je_v\u00e9rifie_que_la_modification_du_panel_plan_d_action_n_est_pas_possible_les_boutons_rattacher_ajouter_dupliquer_et_supprimer_sont_d\u00e9sactiv\u00e9s() {\n        // Write code here that turns the phrase above into concrete actions\n        agendaActionFollowUp.checkButtonsNotModifiable();\n    }",
            "RealPage": "public void checkButtonsNotModifiable() {\n        Utils.checkButtonIsDisabled(buttonDupActionPlan);\n        Utils.checkButtonIsDisabled(buttonDeleteActionPlan);\n        Utils.checkButtonIsDisabled(buttonRatSousAct);\n        Utils.checkButtonIsDisabled(buttonAddActionPLan);\n\n\n    }"
        },
        {
            "Sc\u00e9nario": "Je v\u00e9rifie que le panel objet de la fiche action est fig\u00e9e",
            "StepDef": "@Then(\"Je v\u00e9rifie que le panel objet de la fiche action est fig\u00e9e\")\n    public void je_v\u00e9rifie_que_le_panel_objet_de_la_fiche_action_est_fig\u00e9e() {\n        agendaActionFollowUp.checkAllContientInObjectIsDisabled();\n    }",
            "RealPage": "public void checkAllContientInObjectIsDisabled() {\n        WebUI.clickElement(By.id(\"ctl00_ContentPlaceHolder1_Liste_sous_actions\"));\n        WebUI.clickElement(By.id(\"ctl00_ContentPlaceHolder1_Label6\"));\n        Utils.checkElemIsDisabled(\"ctl00_ContentPlaceHolder1_panelEnreg\", \"input\");\n        Utils.checkElemIsDisabled(\"ctl00_ContentPlaceHolder1_panelEnreg\", \"textarea\");\n        Utils.checkElemIsDisabled(\"ctl00_ContentPlaceHolder1_panelEnreg\", \"select\");\n        Utils.checkElemIsDisabled(\"ctl00_ContentPlaceHolder1_panelEnreg\", \"a\");\n\n    }"
        },
        {
            "Sc\u00e9nario": "Je v\u00e9rifie que la fiche action s'affiche",
            "StepDef": "@Then(\"Je v\u00e9rifie que la fiche action s'affiche\")\n    public void je_v\u00e9rifie_que_la_fiche_action_s_affiche() {\n        excelHelpers.setExcelFile(FrameworkConstants.EXCEL_DATA_FILE_PATH, \"Action\");\n        numberOfAction = excelHelpers.getCellData(FrameworkConstants.row, 7);\n        agendaActionFollowUp.checkActionIsDisplayed(numberOfAction);\n\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "je saisir l'objet de la pi\u00e8ce jointe",
            "StepDef": "@When(\"je saisir l'objet de la pi\u00e8ce jointe\")\n    public void je_saisir_l_objet_de_la_pi\u00e8ce_jointe() {\n        agendaActionFollowUp.addTextAttachement();\n\n    }",
            "RealPage": "public void addTextAttachement() {\n        WebUI.setText(textFiledAttachment, DataGenerateUtils.randomParaghe());\n    }"
        },
        {
            "Sc\u00e9nario": "je clique sur valider",
            "StepDef": "@When(\"je clique sur valider\")\n    public void je_clique_sur_valider() {\n        agendaActionFollowUp.valideAttachement();\n\n    }",
            "RealPage": "public void valideAttachement() {\n        WebUI.clickElement(buttonValidefileAttachment);\n    }"
        },
        {
            "Sc\u00e9nario": "Je v\u00e9rifie que la pi\u00e8ce jointe s\u00e9lectionn\u00e9e est ajout\u00e9e \u00e0 la liste des pi\u00e8ces jointes",
            "StepDef": "@Then(\"Je v\u00e9rifie que la pi\u00e8ce jointe s\u00e9lectionn\u00e9e est ajout\u00e9e \u00e0 la liste des pi\u00e8ces jointes\")\n    public void je_v\u00e9rifie_que_la_pi\u00e8ce_jointe_s\u00e9lectionn\u00e9e_est_ajout\u00e9e_\u00e0_la_liste_des_pi\u00e8ces_jointes() {\n        agendaActionFollowUp.chekAttachement();\n    }",
            "RealPage": "public void chekAttachement() {\n        Assert.assertTrue(WebUI.getWebElement(gridFileAttachment).findElements(By.tagName(\"tr\")).size() > 0, \"attchement is not exsiste\");\n    }"
        },
        {
            "Sc\u00e9nario": "Je v\u00e9rifie que le pop up Pi\u00e8ce\\\\(s) jointe\\\\(s) s'affiche",
            "StepDef": "@Then(\"Je v\u00e9rifie que le pop up Pi\u00e8ce\\\\(s) jointe\\\\(s) s'affiche\")\n    public void je_v\u00e9rifie_que_le_pop_up_pi\u00e8ce_s_jointe_s_s_affiche() {\n        agendaActionFollowUp.chekPopUpAttachementIsDisplyed();\n    }",
            "RealPage": "public void chekPopUpAttachementIsDisplyed() {\n        WebUI.verifyElementVisible(By.id(\"myModalPJJ_1\"), WAIT_Element_Check_Visible_Or_Not);\n    }"
        },
        {
            "Sc\u00e9nario": "Je v\u00e9rifie que les champs Taux eff. Et Rapport effi. sont gris\u00e9s",
            "StepDef": "@Then(\"Je v\u00e9rifie que les champs Taux eff. Et Rapport effi. sont gris\u00e9s\")\n    public void Je_v\u00e9rifie_que_les_champs_Taux_eff_Et_Rapport_effi_sont_gris\u00e9s() {\n        agendaActionFollowUp.chekRateAndReportIsNotModifaible();\n    }",
            "RealPage": "public void chekRateAndReportIsNotModifaible() {\n        WebUI.verifyElementHasAttribute(textFieldRateFollowUp, \"disabled\", WAIT_Element_Check_Visible_Or_Not);\n        WebUI.verifyElementHasAttribute(textFieldReportEff, \"disabled\", WAIT_Element_Check_Visible_Or_Not);\n    }"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie que les champs d\u00e9signation de la sous action, Date Saisie R\u00e9al., Date saisie suivi, Commentaire resp. r\u00e9alisation, Taux r\u00e9al., sont fig\u00e9s",
            "StepDef": "@Then(\"je v\u00e9rifie que les champs d\u00e9signation de la sous action, Date Saisie R\u00e9al., Date saisie suivi, Commentaire resp. r\u00e9alisation, Taux r\u00e9al., sont fig\u00e9s\")\n    public void je_v\u00e9rifie_que_les_champs_d\u00e9signation_de_la_sous_action_date_saisie_r\u00e9al_date_saisie_suivi_commentaire_resp_r\u00e9alisation_taux_r\u00e9al_sont_fig\u00e9s() {\n        agendaActionFollowUp.chekFieldFollowUpIsNotModifaible();\n    }",
            "RealPage": "public void chekFieldFollowUpIsNotModifaible() {\n\n        List<WebElement> elements = WebUI.getWebElement(By.id(\"collapseSuiv1\")).findElements(By.tagName(\"input\"));\n        for (WebElement element : elements) {\n            System.out.println(element.getAttribute(\"name\"));\n            if (!(element.getAttribute(\"name\").equals(\"ctl00$ContentPlaceHolder1$datre2\"))) {\n                if (element.isDisplayed()) {\n                    Assert.assertFalse(element.isEnabled(), \"element is not disabled\");\n                }"
        },
        {
            "Sc\u00e9nario": "je verifie qu'un pop up s'affiche",
            "StepDef": "@Then(\"je verifie qu'un pop up s'affiche\")\n    public void je_verifie_qu_un_pop_up_s_affiche() {\n        agendaActionFollowUp.checkPopupIsActionFollowUpIsDisplayed();\n    }",
            "RealPage": "public void checkPopupIsActionFollowUpIsDisplayed() {\n        WebUI.verifyElementVisible(By.id(\"myModalSuivi\"), WAIT_Element_Check_Visible_Or_Not);\n\n    }"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifier que Si la valeur est invalide alors la valeur saisie n'est pas enregistr\u00e9e",
            "StepDef": "@Then(\"je v\u00e9rifier que Si la valeur est invalide alors la valeur saisie n'est pas enregistr\u00e9e\")\n    public void je_v\u00e9rifier_que_si_la_valeur_est_invalide_alors_la_valeur_saisie_n_est_pas_enregistr\u00e9e() {\n        agendaActionFollowUp.checkRateEffIsBettwenZeroAndOneHundred(rateEff);\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "je saisie le taux d'efficacit\u00e9 sans saisir la date de suivi et valider",
            "StepDef": "@When(\"je saisie le taux d'efficacit\u00e9 sans saisir la date de suivi et valider\")\n    public void je_saisie_le_taux_d_efficacit\u00e9_sans_saisir_la_date_de_suivi_et_valider() {\n        agendaActionFollowUp.rateWithoutEff();\n    }",
            "RealPage": "public void rateWithoutEff() {\n        WebUI.setText(textFieldFollowUpDate, \"\");\n    }"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifier qu'un message de contr\u00f4le s'affiche: La date de suivi est un champ obligatoire.",
            "StepDef": "@Then(\"je v\u00e9rifier qu'un message de contr\u00f4le s'affiche: La date de suivi est un champ obligatoire.\")\n    public void je_v\u00e9rifier_qu_un_message_de_contr\u00f4le_s_affiche_la_date_de_suivi_est_un_champ_obligatoire() {\n        agendaActionFollowUp.checkMessageControlIsVisible();\n    }",
            "RealPage": "public void checkMessageControlIsVisible() {\n        String message = WebUI.getTextElement(By.id(\"ctl00_ContentPlaceHolder1_LabelDateSuivOblig\"));\n        if (WebUI.getLang().equals(\"fr-FR\")) {\n            WebUI.verifyElementTextEquals(message, \"La date de suivi est un champ obligatoire.\");\n        }"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifier que l'enregistrement de la valeur n'est pas effectu\u00e9 et Un message de contr\u00f4le s'affiche: Vous ne pouvez pas renseigner le taux de suivi tant que le taux de r\u00e9alisation est \u00e9gal \u00e0 0%",
            "StepDef": "@Then(\"je v\u00e9rifier que l'enregistrement de la valeur n'est pas effectu\u00e9 et Un message de contr\u00f4le s'affiche: Vous ne pouvez pas renseigner le taux de suivi tant que le taux de r\u00e9alisation est \u00e9gal \u00e0 0%\")\n    public void je_v\u00e9rifier_que_si_la_valeur_est_taux_r\u00e9alisation_alors_la_valeur_saisie_n_est_pas_enregistr\u00e9e() {\n        agendaActionFollowUp.checkRateEffIsBettwenZeroAndOneHundred(rateEff);\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie que Le champ Rapport d'efficacit\u00e9 suit le param\u00e9trage effectu\u00e9.  Si champ obligatoire alors un message de contr\u00f4le s'affiche: Le champ rapport efficacit\u00e9 est obligatoire",
            "StepDef": "@Then(\"je v\u00e9rifie que Le champ Rapport d'efficacit\u00e9 suit le param\u00e9trage effectu\u00e9.  Si champ obligatoire alors un message de contr\u00f4le s'affiche: Le champ rapport efficacit\u00e9 est obligatoire\")\n    public void je_v\u00e9rifie_que_le_champ_rapport_d_efficacit\u00e9_suit_le_param\u00e9trage_effectu\u00e9_si_champ_obligatoire_alors_un_message_de_contr\u00f4le_s_affiche_le_champ_rapport_efficacit\u00e9_est_obligatoire() {\n        agendaActionFollowUp.checkMessageControlRapportCommentIsRequired();\n\n    }",
            "RealPage": "public void checkMessageControlRapportCommentIsRequired() {\n        String message = WebUI.getTextElement(By.id(\"ctl00_ContentPlaceHolder1_LabelRappEffOblig\"));\n        if (WebUI.getLang().equals(\"fr-FR\")) {\n            WebUI.verifyElementTextEquals(message, \"Le champ rapport efficacit\u00e9 est obligatoire\\n\");\n        }"
        },
        {
            "Sc\u00e9nario": "je clique sur case \u00e0 cocher actions \u00e0 suivire",
            "StepDef": "@When(\"je clique sur case \u00e0 cocher actions \u00e0 suivire\")\n    public void je_clique_sur_case_\u00e0_cocher_actions_\u00e0_suivire() {\n        agendaActionFollowUp.clickToActionFollowUp();\n    }",
            "RealPage": "public void clickToActionFollowUp() {\n        WebUI.clickElement(checkBoxActionFollowUp);\n    }"
        },
        {
            "Sc\u00e9nario": "je V\u00e9rifie la coh\u00e9rence des informations au niveau du Gridview et les sous action",
            "StepDef": "@Then(\"je V\u00e9rifie la coh\u00e9rence des informations au niveau du Gridview et les sous action\")\n    public void je_v\u00e9rifie_la_coh\u00e9rence_des_informations_au_niveau_du_gridview_et_les_sous_action() {\n        agendaActionFollowUp.checkGridInActionPlan();\n\n    }",
            "RealPage": "public void checkGridInActionPlan(){\n        ////////////////////////////////////////////////////////////////////////////////////////////\n        String designations = WebUI.getTextElement(designation);\n        String numAction = WebUI.getTextElement(numeroAction);\n        String priorite = WebUI.getTextElement(prioriteAction);\n        String gravity = WebUI.getTextElement(gravityAction);\n        String dateReals = WebUI.getTextElement(dateReal);\n        String commRespreals = WebUI.getAttributeElement(commRespreal,\"value\");\n        String respReals = WebUI.getTextElement(respReal);\n\n\n        WebUI.clickElement(numeroAction);\n        WebUI.clickElement(accederAction);\n\n\n        WebUI.verifyElementTextEquals(numAction2,numAction);\n        String designations2 = WebUI.getTextElement(designation2);\n        String priorite2 = WebUI.getTextElement(prioriteAction2);\n        String gravity2 = WebUI.getTextElement(gravityAction2);\n        String dateReals2 = WebUI.getTextElement(dateReal2);\n        String commRespreals2 = WebUI.getAttributeElement(commRespreal2,\"value\");\n        String delaiactions2 = WebUI.getTextElement(delaiAction2);\n        String respreals2 = WebUI.getTextElement(respReal2);\n        String delais = WebUI.getTextElement(delai);\n\n        WebUI.verifyElementTextEquals(designations,designations2);\n        WebUI.verifyElementTextEquals(priorite,priorite2);\n        WebUI.verifyElementTextEquals(gravity,gravity2);\n        WebUI.verifyElementTextEquals(delais,delaiactions2);\n        WebUI.verifyElementTextEquals(respReals,respreals2);\n        WebUI.verifyElementTextEquals(dateReals,dateReals2);\n        WebUI.verifyElementTextEquals(commRespreals,commRespreals2);\n        WebUI.verifyElementTextEquals(dateReals,dateReals2);\n\n\n\n\n    }"
        },
        {
            "Sc\u00e9nario": "Je s\u00e9lectionne la source d'action d\u00e9tails",
            "StepDef": "@When(\"Je s\u00e9lectionne la source d'action d\u00e9tails\")\n    public void j_ajoute_une_source_d\u00e9tails() {\n        ficheActionSimplifierPage.selectSourceAction(excelHelpers);\n\n\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "je clique sur ajouter des produit",
            "StepDef": "@Then(\"je clique sur ajouter des produit\")\n    public void je_clique_sur_ajouter_des_produit() {\n        ficheActionDetailsPage.openPoupupProduct();\n\n    }",
            "RealPage": "public void openPoupupProduct() {\n        WebUI.clickElement(bottonAddProduct);\n\n    }"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie le pop up Liste des produits s'affiche",
            "StepDef": "@Then(\"je v\u00e9rifie le pop up Liste des produits s'affiche\")\n    public void je_v\u00e9rifie_le_pop_up_liste_des_produits_s_affiche() {\n        ficheActionDetailsPage.checkPoupupProduct();\n\n    }",
            "RealPage": "public void checkPoupupProduct() {\n        // WebUI.clickElement(bottonAddProduct);\n        WebUI.verifyElementVisible(poupupListProduct);\n\n    }"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie le produit coch\u00e9 est ajout\u00e9s",
            "StepDef": "@Then(\"je v\u00e9rifie le produit coch\u00e9 est ajout\u00e9s\")\n    public void je_v\u00e9rifie_le_produit_coch\u00e9_est_ajout\u00e9s() {\n        ficheActionDetailsPage.checkProductAttached(excelHelpers);\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "je clique sur ajouter les Types de causes",
            "StepDef": "@When(\"je clique sur ajouter les Types de causes\")\n    public void je_clique_sur_ajouter_les_types_de_causes() {\n        ficheActionDetailsPage.clckToAddTypeCause(excelHelpers);\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie un pop up Liste des types de causes s'affiche",
            "StepDef": "@Then(\"je v\u00e9rifie un pop up Liste des types de causes s'affiche\")\n    public void je_v\u00e9rifie_un_pop_up_liste_des_types_de_causes_s_affiche() {\n        ficheActionDetailsPage.checkPoupupTypeCause();\n    }",
            "RealPage": "public void checkPoupupTypeCause() {\n        WebUI.verifyElementVisible(poupuptypeCause);\n\n    }"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie que la liste affiche les types de causes rattach\u00e9s \u00e0 la source d'action s\u00e9lectionn\u00e9e",
            "StepDef": "@Then(\"je v\u00e9rifie que la liste affiche les types de causes rattach\u00e9s \u00e0 la source d'action s\u00e9lectionn\u00e9e\")\n    public void je_v\u00e9rifie_que_la_liste_affiche_les_types_de_causes_rattach\u00e9s_\u00e0_la_source_d_action_s\u00e9lectionn\u00e9e() {\n        ficheActionSimplifierPage.selectSourceAction(excelHelpers);\n        ficheActionDetailsPage.checktypeCauseAttachedInSourceSelected(excelHelpers);\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "je choisis les Types de causes",
            "StepDef": "@When(\"je choisis les Types de causes\")\n    public void je_choisis_les_types_de_causes() {\n        ficheActionDetailsPage.attchedTypeCause(excelHelpers);\n\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "Je v\u00e9rifie que le type de causes coch\u00e9 est ajout\u00e9",
            "StepDef": "@Then(\"Je v\u00e9rifie que le type de causes coch\u00e9 est ajout\u00e9\")\n    public void je_v\u00e9rifie_que_le_type_de_causes_coch\u00e9_est_ajout\u00e9() {\n        ficheActionDetailsPage.checkTypeCauseAttached();\n\n    }",
            "RealPage": "public void checkTypeCauseAttached() {\n        Assert.assertTrue(WebUI.getOptionTotal(dropDownListTypeCauseAttached) > 0, \"type cause is not attached\");\n        List<WebElement> options = WebUI.getOptions(dropDownListTypeCauseAttached);\n        Boolean resulttypeCauseAttched = false;\n        for (WebElement option : options) {\n            if (option.getText().contains(typeCause)) {\n                resulttypeCauseAttched = true; // String found\n            }"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie que la liste affiche les cat\u00e9gories de causes rattach\u00e9s au type de cause s\u00e9lectionn\u00e9",
            "StepDef": "@Then(\"je v\u00e9rifie que la liste affiche les cat\u00e9gories de causes rattach\u00e9s au type de cause s\u00e9lectionn\u00e9\")\n    public void je_v\u00e9rifie_la_liste_affiche_les_cat\u00e9gories_de_causes_rattach\u00e9s_au_type_de_cause_s\u00e9lectionn\u00e9() {\n        ficheActionDetailsPage.checkCategorieCategorieCausseAttached(excelHelpers);\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie que les cat\u00e9gories de causes coch\u00e9 sont ajout\u00e9",
            "StepDef": "@Then(\"je v\u00e9rifie que les cat\u00e9gories de causes coch\u00e9 sont ajout\u00e9\")\n    public void je_v\u00e9rifie_le_cat\u00e9gorie_de_causes_coch\u00e9_sont_ajout\u00e9() {\n        ficheActionDetailsPage.checkaddCategorieCategorieCausseAttached();\n    }",
            "RealPage": "public void checkaddCategorieCategorieCausseAttached() {\n        Assert.assertTrue(WebUI.getOptionTotal(dropDownCategorieCause) > 0, \"categorie cause is not attached\");\n        List<WebElement> options = WebUI.getOptions(dropDownCategorieCause);\n        Boolean resultCategorieCauseAttched = false;\n        for (WebElement option : options) {\n            if (option.getText().contains(categorieCause)) {\n                resultCategorieCauseAttched = true; // String found\n            }"
        },
        {
            "Sc\u00e9nario": "je choisis un responsable de cl\u00f4ture",
            "StepDef": "@When(\"je choisis un responsable de cl\u00f4ture\")\n    public void je_choisis_un_responsable_de_cl\u00f4ture() {\n        ficheActionSimplifierPage.selectResponsbaleCoture(excelHelpers);\n\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "je clique sur Valider Action",
            "StepDef": "@When(\"je clique sur Valider Action\")\n    public void je_clique_sur_valider_action() {\n        ficheActionSimplifierPage.valideSheetAction();\n        ficheActionSimplifierPage.getNumeroFiche(excelHelpers);\n    }",
            "RealPage": "public void valideSheetAction() {\n        //But to create a random action for clicking a button to validate the sheet,\n        // it should randomly choose between clicking the top button or the bottom button on\n        // the first clic\n        Random random = new Random();\n        int randomNumber = random.nextInt(2);\n        if (randomNumber == 0) {\n            WebUI.scrollToElementAtTop(bottonValiderAction);\n            WebUI.clickElementWithJs(bottonValiderAction);\n        }"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie que les champs A l'origine de l'action Cat\u00e9gorie de cause Date saisie Impact action Objectif Produit R\u00e9f audit R\u00e9f Interne et Types de causes peuvent \u00eatre masqu\u00e9s \u00e0 partir de param\u00e9trage des champs \u00e0 masquer",
            "StepDef": "@Then(\"je v\u00e9rifie que les champs A l'origine de l'action Cat\u00e9gorie de cause Date saisie Impact action Objectif Produit R\u00e9f audit R\u00e9f Interne et Types de causes peuvent \u00eatre masqu\u00e9s \u00e0 partir de param\u00e9trage des champs \u00e0 masquer\")\n    public void je_v\u00e9rifie_que_les_champs_a_l_origine_de_l_action_cat\u00e9gorie_de_cause_date_saisie_impact_action_objectif_produit_r\u00e9f_audit_r\u00e9f_interne_et_types_de_causes_peuvent_\u00eatre_masqu\u00e9s_\u00e0_partir_de_param\u00e9trage_des_champs_\u00e0_masquer() {\n        ficheActionDetailsPage.checkOrigineCat\u00e9gorieDateSaisieImpactActionObjectifProduitRefAuditRefInterneTypesCausesNotVisible();\n\n    }",
            "RealPage": "public void checkOrigineCat\u00e9gorieDateSaisieImpactActionObjectifProduitRefAuditRefInterneTypesCausesNotVisible() {\n        WebUI.verifyElementNotVisible(bottonSelectOrigine, WAIT_Element_Check_Visible_Or_Not);\n        WebUI.verifyElementNotVisible(dropDownCategorieCause, WAIT_Element_Check_Visible_Or_Not);\n        FicheActionSimplifierPage ficheActionSimplifierPage = new FicheActionSimplifierPage(driver);\n        WebUI.verifyElementNotVisible(ficheActionSimplifierPage.getTextFieldDateSaisie(), WAIT_Element_Check_Visible_Or_Not);\n        WebUI.verifyElementNotVisible(textFieldImpactAction, WAIT_Element_Check_Visible_Or_Not);\n        WebUI.verifyElementNotVisible(textFieldObjectif, WAIT_Element_Check_Visible_Or_Not);\n        WebUI.verifyElementNotVisible(dropDownAttchedProduct, WAIT_Element_Check_Visible_Or_Not);\n        WebUI.verifyElementNotVisible(dropDownRefAudit, WAIT_Element_Check_Visible_Or_Not);\n        WebUI.verifyElementNotVisible(textFieldRefInterne, WAIT_Element_Check_Visible_Or_Not);\n        WebUI.verifyElementNotVisible(dropDownListTypeCauseAttached, WAIT_Element_Check_Visible_Or_Not);\n\n    }"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie que les champs A l'origine de l'action Cat\u00e9gorie de cause Date saisie Impact action Objectif Produit R\u00e9f audit R\u00e9f Interne et Types de causes peuvent \u00eatre visible \u00e0 partir de param\u00e9trage des champs \u00e0 masquer",
            "StepDef": "@Then(\"je v\u00e9rifie que les champs A l'origine de l'action Cat\u00e9gorie de cause Date saisie Impact action Objectif Produit R\u00e9f audit R\u00e9f Interne et Types de causes peuvent \u00eatre visible \u00e0 partir de param\u00e9trage des champs \u00e0 masquer\")\n    public void je_v\u00e9rifie_que_les_champs_a_l_origine_de_l_action_cat\u00e9gorie_de_cause_date_saisie_impact_action_objectif_produit_r\u00e9f_audit_r\u00e9f_interne_et_types_de_causes_peuvent_\u00eatre_d\u00e9masque_\u00e0_partir_de_param\u00e9trage_des_champs_\u00e0_masquer() {\n\n        ficheActionDetailsPage.checkOrigineCat\u00e9gorieDateSaisieImpactActionObjectifProduitRefAuditRefInterneTypesCausesVisible();\n    }",
            "RealPage": "public void checkOrigineCat\u00e9gorieDateSaisieImpactActionObjectifProduitRefAuditRefInterneTypesCausesVisible() {\n        WebUI.verifyElementVisible(bottonSelectOrigine, WAIT_Element_Check_Visible_Or_Not);\n        WebUI.verifyElementVisible(dropDownCategorieCause, WAIT_Element_Check_Visible_Or_Not);\n        FicheActionSimplifierPage ficheActionSimplifierPage = new FicheActionSimplifierPage(driver);\n        WebUI.verifyElementVisible(ficheActionSimplifierPage.getTextFieldDateSaisie(), WAIT_Element_Check_Visible_Or_Not);\n        WebUI.verifyElementVisible(textFieldImpactAction, WAIT_Element_Check_Visible_Or_Not);\n        WebUI.verifyElementVisible(textFieldObjectif, WAIT_Element_Check_Visible_Or_Not);\n        WebUI.verifyElementVisible(dropDownAttchedProduct, WAIT_Element_Check_Visible_Or_Not);\n        WebUI.verifyElementVisible(dropDownRefAudit, WAIT_Element_Check_Visible_Or_Not);\n        WebUI.verifyElementVisible(textFieldRefInterne, WAIT_Element_Check_Visible_Or_Not);\n        WebUI.verifyElementVisible(dropDownListTypeCauseAttached, WAIT_Element_Check_Visible_Or_Not);\n\n    }"
        },
        {
            "Sc\u00e9nario": "je recherche le num\u00e9ro d'action d\u00e9taill\u00e9e",
            "StepDef": "@When(\"je recherche le num\u00e9ro d'action d\u00e9taill\u00e9e\")\n    public void je_saisis_le_num\u00e9ro_d_action_d\u00e9taill\u00e9e() {\n        ficheActionSimplifierPage.searchActionDetails(excelHelpers);\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "je consulte la fiche action d\u00e9taill\u00e9e",
            "StepDef": "@When(\"je consulte la fiche action d\u00e9taill\u00e9e\")\n    public void je_consulter_la_fiche_d_action_d\u00e9taill\u00e9e() {\n        ficheActionSimplifierPage.consultSheetAction();\n    }",
            "RealPage": "public void consultSheetAction() {\n        WebUI.getWebElement(gridListAction).findElement(By.xpath(\"//*[@id=\\\"ctl00_ContentPlaceHolder1_GridView1P\\\"]/tbody/tr[2]/td[2]\")).findElement(By.tagName(\"a\")).click();\n        dateCreateAction = WebUI.getAttributeElement(dateCreationAction, \"value\");\n\n    }"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie que le num\u00e9ro de la fiche action d\u00e9taill\u00e9es est affich\u00e9 en bleu",
            "StepDef": "@Then(\"je v\u00e9rifie que le num\u00e9ro de la fiche action d\u00e9taill\u00e9es est affich\u00e9 en bleu\")\n    public void je_v\u00e9rifie_que_le_num\u00e9ro_de_la_fiche_action_d\u00e9taill\u00e9es_est_affich\u00e9_en_bleu() {\n        ficheActionSimplifierPage.checkNumActionBleu();\n    }",
            "RealPage": "public void checkNumActionBleu() {\n\n        String actualColor = WebUI.getWebElement(gridListAction).findElement(By.xpath(\"//*[@id=\\\"ctl00_ContentPlaceHolder1_GridView1P\\\"]/tbody/tr[2]/td[2]\")).findElement(By.tagName(\"a\")).getCssValue(\"color\");\n\n        String expectedColor = \"rgba(51, 122, 183, 1)\";\n        // Supprime les espaces des deux cha\u00eenes pour la comparaison\n        String actualColorNormalized = actualColor.replaceAll(\"\\\\s\", \"\");\n        String expectedColorNormalized = expectedColor.replaceAll(\"\\\\s\", \"\");\n        // Comparaison des couleurs sans espaces\n        Assert.assertTrue(actualColorNormalized.contains(expectedColorNormalized),\n                \"Expected color: \" + expectedColor + \" but found: \" + actualColor);\n\n    }"
        },
        {
            "Sc\u00e9nario": "je clique sur button aper\u00e7u d'action",
            "StepDef": "@When(\"je clique sur button aper\u00e7u d'action\")\n    public void je_clique_sur_button_aper\u00e7u_action() {\n        ficheActionDetailsPage.clickTobuttonView();\n    }",
            "RealPage": "public void clickTobuttonView() {\n        WebUI.clickElement(buttonView);\n    }"
        },
        {
            "Sc\u00e9nario": "Je v\u00e9rifie que un pop up s'affiche",
            "StepDef": "@Then(\"Je v\u00e9rifie que un pop up s'affiche\")\n    public void Je_v\u00e9rifie_que_un_pop_up_affiche() {\n        ficheActionDetailsPage.checkPupupViweisVisible();\n    }",
            "RealPage": "public void checkPupupViweisVisible() {\n        WebUI.verifyElementVisible(modalView, WAIT_Element_Check_Visible_Or_Not);\n\n    }"
        },
        {
            "Sc\u00e9nario": "je recherche le num\u00e9ro d'action d\u00e9taill\u00e9",
            "StepDef": "@When(\"je recherche le num\u00e9ro d'action d\u00e9taill\u00e9\")\n    public void je_recherche_le_num\u00e9ro_d_action_d\u00e9taill\u00e9() {\n        // Write code here that turns the phrase above into concrete actions\n        throw new io.cucumber.java.PendingException();\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "Je s\u00e9lectionne la source d'action simplifi\u00e9e",
            "StepDef": "@When(\"Je s\u00e9lectionne la source d'action simplifi\u00e9e\")\n    public void j_ajoute_une_source() {\n        ficheActionSimplifierPage.selectSourceAction(excelHelpers);\n\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "je choisis un Site",
            "StepDef": "@When(\"je choisis un Site\")\n    public void je_choisis_un_site() {\n        ficheActionSimplifierPage.selectSite(excelHelpers);\n\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "je choisis un Processus",
            "StepDef": "@When(\"je choisis un Processus\")\n    public void je_choisis_un_processus() {\n        ficheActionSimplifierPage.selectProcessus(excelHelpers);\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "je choisis une Activit\u00e9",
            "StepDef": "@When(\"je choisis une Activit\u00e9\")\n    public void je_choisis_une_activit\u00e9() {\n        ficheActionSimplifierPage.selectActivite(excelHelpers);\n\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "je choisis une Direction",
            "StepDef": "@When(\"je choisis une Direction\")\n    public void je_choisis_une_direction() {\n        ficheActionSimplifierPage.selectDirection(excelHelpers);\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "je choisis un Service",
            "StepDef": "@When(\"je choisis un Service\")\n    public void je_choisis_un_service() {\n        ficheActionSimplifierPage.selectService(excelHelpers);\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "je choisis un responsable de cl\u00f4ture simplifie",
            "StepDef": "@When(\"je choisis un responsable de cl\u00f4ture simplifie\")\n    public void choisir_un_responsable_de_cl\u00f4ture_simplifie() {\n        ficheActionSimplifierPage.selectResponsbaleCoture(excelHelpers);\n\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "je clique sur valider Action simplifi\u00e9e",
            "StepDef": "@Then(\"je clique sur valider Action simplifi\u00e9e\")\n    public void cliquer_sur_valider_action_simplifi\u00e9e() {\n        ficheActionSimplifierPage.valideSheetAction();\n    }",
            "RealPage": "public void valideSheetAction() {\n        //But to create a random action for clicking a button to validate the sheet,\n        // it should randomly choose between clicking the top button or the bottom button on\n        // the first clic\n        Random random = new Random();\n        int randomNumber = random.nextInt(2);\n        if (randomNumber == 0) {\n            WebUI.scrollToElementAtTop(bottonValiderAction);\n            WebUI.clickElementWithJs(bottonValiderAction);\n        }"
        },
        {
            "Sc\u00e9nario": "Je v\u00e9rifie que la Fiche Action est ajout\u00e9e",
            "StepDef": "@Then(\"Je v\u00e9rifie que la Fiche Action est ajout\u00e9e\")\n    public void la_fiche_action_est_ajout\u00e9e() {\n        ficheActionSimplifierPage.getNumeroFiche(excelHelpers);\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "Je clique sur le bouton Rechercher",
            "StepDef": "@When(\"Je clique sur le bouton Rechercher\")\n    public void je_clique_sur_le_bouton_rechercher() {\n        ficheActionSimplifierPage.searchActionSimplifier(excelHelpers);\n\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "j'acc\u00e8de \u00e0 une fiche action",
            "StepDef": "@When(\"j'acc\u00e8de \u00e0 une fiche action\")\n    public void j_acc\u00e8de_\u00e0_une_fiche_action() {\n        ficheActionSimplifierPage.consultSheetAction();\n\n    }",
            "RealPage": "public void consultSheetAction() {\n        WebUI.getWebElement(gridListAction).findElement(By.xpath(\"//*[@id=\\\"ctl00_ContentPlaceHolder1_GridView1P\\\"]/tbody/tr[2]/td[2]\")).findElement(By.tagName(\"a\")).click();\n        dateCreateAction = WebUI.getAttributeElement(dateCreationAction, \"value\");\n\n    }"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie que les modifications sont enregistr\u00e9e",
            "StepDef": "@Then(\"je v\u00e9rifie que les modifications sont enregistr\u00e9e\")\n    public void je_v\u00e9rifie_que_les_modifications_sont_enregistr\u00e9e() {\n        ficheActionSimplifierPage.checkmodifySheetAction(excelHelpers);\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "je filtre par des actions cl\u00f4tur\u00e9es",
            "StepDef": "@When(\"je filtre par des actions cl\u00f4tur\u00e9es\")\n    public void je_filtre_par_des_actions_cl\u00f4tur\u00e9es() {\n        ficheActionSimplifierPage.serachActionClosed();\n\n    }",
            "RealPage": "public void serachActionClosed() {\n        WebUI.clickElementWithJs(radioBottonActionClosed);\n        WebUI.clickElement(bottonSearchAction);\n\n    }"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie que la modification d'une fiche action cl\u00f4tur\u00e9e n'est pas possible",
            "StepDef": "@Then(\"je v\u00e9rifie que la modification d'une fiche action cl\u00f4tur\u00e9e n'est pas possible\")\n    public void je_v\u00e9rifie_que_la_modification_d_une_fiche_action_cl\u00f4tur\u00e9e_n_est_pas_possible() {\n        ficheActionSimplifierPage.sheetActionIsnotModifiable();\n\n    }",
            "RealPage": "public void sheetActionIsnotModifiable() {\n        WebUI.checkWebElmentDisabledWithJS(bottonValiderAction);\n        WebUI.scrollToElementAtTop(bottonBottomValiderAction);\n        String disabled = WebUI.getWebElement(bottonBottomValiderAction).getAttribute(\"disabled\");\n        WebUI.verifyContains(disabled, \"true\");\n\n    }"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie que le num\u00e9ro de la fiche action simplifi\u00e9e est affich\u00e9 en rouge",
            "StepDef": "@Then(\"je v\u00e9rifie que le num\u00e9ro de la fiche action simplifi\u00e9e est affich\u00e9 en rouge\")\n    public void je_v\u00e9rifie_que_le_num\u00e9ro_de_la_fiche_action_simplifi\u00e9e_est_affich\u00e9_en_rouge() {\n        ficheActionSimplifierPage.checkNumActionRed();\n\n    }",
            "RealPage": "public void checkNumActionRed() {\n\n        String actualColor = WebUI.getWebElement(gridListAction).findElement(By.xpath(\"//*[@id=\\\"ctl00_ContentPlaceHolder1_GridView1P\\\"]/tbody/tr[2]/td[2]\")).findElement(By.tagName(\"a\")).getCssValue(\"color\"); // R\u00e9cup\u00e8re la valeur RGBA\n        String expectedColor = \"rgba(255, 0, 0, 1)\";\n// Supprime les espaces des deux cha\u00eenes pour la comparaison\n        String actualColorNormalized = actualColor.replaceAll(\"\\\\s\", \"\");\n        String expectedColorNormalized = expectedColor.replaceAll(\"\\\\s\", \"\");\n// Comparaison des couleurs sans espaces\n        Assert.assertTrue(actualColorNormalized.contains(expectedColorNormalized),\n                \"Expected color: \" + expectedColor + \" but found: \" + actualColor);\n\n\n    }"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie que l'ajout du responsable de suivi",
            "StepDef": "@Then(\"je v\u00e9rifie que l'ajout du responsable de suivi\")\n    public void je_v\u00e9rifie_que_l_ajout_du_responsable_de_suivi() {\n        planActionPage.checkSelectRespoSuivi();\n\n    }",
            "RealPage": "public void checkSelectRespoSuivi() {\n        WebUI.verifyElementValueEquals(textFieldNameRespo, respoSuivi);\n\n\n    }"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie que l'ajout du responsable de suivi de la sous action",
            "StepDef": "@Then(\"je v\u00e9rifie que l'ajout du responsable de suivi de la sous action\")\n    public void je_v\u00e9rifie_que_l_ajout_du_responsable_de_suivi_de_la_sous_action() {\n        planActionPage.checkSelectMultiRespoSuivi();\n\n    }",
            "RealPage": "public void checkSelectMultiRespoSuivi() {\n        WebUI.verifyElementValueEquals(textFieldNameMultiRespoSuivi, respoSuivi);\n\n\n    }"
        },
        {
            "Sc\u00e9nario": "je clique sur boutton s\u00e9lectionner responsable de r\u00e9alisation",
            "StepDef": "@When(\"je clique sur boutton s\u00e9lectionner responsable de r\u00e9alisation\")\n    public void je_clique_sur_botton_s\u00e9lectionner_resposnable_de_r\u00e9alisation() {\n        planActionPage.openPopUpEmployeReal();\n    }",
            "RealPage": "public void openPopUpEmployeReal() {\n        WebUI.clickElement(bottonSelectRespoReal, WAIT_Element_Check_Visible_Or_Not);\n    }"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie que le pop up Liste des employ\u00e9s s'affiche",
            "StepDef": "@Then(\"je v\u00e9rifie que le pop up Liste des employ\u00e9s s'affiche\")\n    public void je_v\u00e9rifie_que_un_pop_up_liste_des_employ\u00e9s_s_affiche() {\n        planActionPage.checkEmployeRealIsDisplayed();\n\n    }",
            "RealPage": "public void checkEmployeRealIsDisplayed() {\n        WebUI.verifyElementVisible(gridEmployeReal, WAIT_Element_Check_Visible_Or_Not);\n    }"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie que l'ajout du responsable de r\u00e9alisation",
            "StepDef": "@Then(\"je v\u00e9rifie que l'ajout du responsable de r\u00e9alisation\")\n    public void je_v\u00e9rifie_que_l_ajout_du_responsable_de_r\u00e9alisation() {\n\n        planActionPage.checkRespoRealSelect();\n    }",
            "RealPage": "public void checkRespoRealSelect() {\n        WebUI.verifyElementValueEquals(textFieldSelectedRespoReal, respoReal);\n\n    }"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie que la Cat\u00e9gorie de cause est masque",
            "StepDef": "@Then(\"je v\u00e9rifie que la Cat\u00e9gorie de cause est masque\")\n    public void je_v\u00e9rifie_la_cat\u00e9gorie_de_cause_est_masque() {\n        ficheActionDetailsPage.checkCategorieCauseIsNotVisible();\n    }",
            "RealPage": "public void checkCategorieCauseIsNotVisible() {\n        WebUI.verifyElementNotVisible(dropDownCategorieCause, WAIT_Element_Check_Visible_Or_Not);\n\n    }"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie que la Cat\u00e9gorie de cause est affich\u00e9e",
            "StepDef": "@Then(\"je v\u00e9rifie que la Cat\u00e9gorie de cause est affich\u00e9e\")\n    public void je_v\u00e9rifie_la_cat\u00e9gorie_de_cause_est_affich\u00e9e() {\n        ficheActionDetailsPage.checkCategorieCauseIsVisible();\n    }",
            "RealPage": "public void checkCategorieCauseIsVisible() {\n        WebUI.verifyElementVisible(dropDownCategorieCause, WAIT_Element_Check_Visible_Or_Not);\n\n    }"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie que le champ Responsable de suivi affiche par d\u00e9faut le responsable hi\u00e9rarchique param\u00e9tr\u00e9 au niveau de la fiche de l'employ\u00e9",
            "StepDef": "@Then(\"je v\u00e9rifie que le champ Responsable de suivi affiche par d\u00e9faut le responsable hi\u00e9rarchique param\u00e9tr\u00e9 au niveau de la fiche de l'employ\u00e9\")\n    public void je_v\u00e9rifie_que_le_champ_responsable_de_suivi_affiche_par_d\u00e9faut_le_responsable_hi\u00e9rarchique_param\u00e9tr\u00e9_au_niveau_de_la_fiche_de_l_employ\u00e9() {\n        planActionPage.checkRespoRespoHerach(excelHelpers);\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "Je clique sur valider de sous action",
            "StepDef": "@Then(\"Je clique sur valider de sous action\")\n    public void je_clique_sur_valider_de_sous_action() {\n        planActionPage.clickToValidetActionPLan();\n    }",
            "RealPage": "public void clickToValidetActionPLan() {\n        WebUI.clickElement(bottonValidePlanAction);\n\n    }"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie que la sous-action est ajout\u00e9e avec succ\u00e8s",
            "StepDef": "@Then(\"je v\u00e9rifie que la sous-action est ajout\u00e9e avec succ\u00e8s\")\n    public void je_v\u00e9rifie_que_la_sous_action_est_ajout\u00e9e_avec_succ\u00e8s() {\n        planActionPage.checkPlanAction();\n    }",
            "RealPage": "public void checkPlanAction() {\n        String numSousAct = \"0\";\n        if (WebUI.isElementVisible(gridActionPlanWithOneRespo, WAIT_Element_Check_Visible_Or_Not)) {\n            numSousAct = WebUI.getWebElement(gridActionPlanWithOneRespo).findElement(By.xpath(\"//*[@id=\\\"ctl00_ContentPlaceHolder1_GridView5\\\"]/tbody/tr/td[3]\")).findElement(By.tagName(\"a\")).getText();\n        }"
        },
        {
            "Sc\u00e9nario": "je clique sur rattacher Sous-Action",
            "StepDef": "@Then(\"je clique sur rattacher Sous-Action\")\n    public void je_clique_sur_rattacher_sous_action() {\n        planActionPage.clickToAttachedActionPlan();\n    }",
            "RealPage": "public void clickToAttachedActionPlan() {\n        if (ONE_ESPO) {\n            WebUI.clickElementWithJs(bottonAttachedActionPlanWithOneRespo);\n        }"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie que la liste affiche seulements les sous actions m\u00e8res",
            "StepDef": "@Then(\"je v\u00e9rifie que la liste affiche seulements les sous actions m\u00e8res\")\n    public void je_v\u00e9rifie_que_la_liste_affiche_seulements_les_sous_actions_m\u00e8res() {\n        planActionPage.checkAttachedActionPlan(excelHelpers);\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie que les sous actions r\u00e9alis\u00e9es et suivies sont affich\u00e9es gris\u00e9es",
            "StepDef": "@Then(\"je v\u00e9rifie que les sous actions r\u00e9alis\u00e9es et suivies sont affich\u00e9es gris\u00e9es\")\n    public void je_v\u00e9rifie_que_les_sous_actions_r\u00e9alis\u00e9es_et_suivies_sont_affich\u00e9es_gris\u00e9es() {\n        planActionPage.checkDateRealAndDateFollowUpIsDisabled(excelHelpers);\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie que les d\u00e9lais de r\u00e9alisation et de suivi sont modifiables",
            "StepDef": "@Then(\"je v\u00e9rifie que les d\u00e9lais de r\u00e9alisation et de suivi sont modifiables\")\n    public void je_v\u00e9rifie_que_les_d\u00e9lais_de_r\u00e9alisation_et_de_suivi_sont_modifiables() {\n        planActionPage.checkDateRealAndDateFollowUpIsNotDisabled(excelHelpers);\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie le rattachement de la sous action",
            "StepDef": "@Then(\"je v\u00e9rifie le rattachement de la sous action\")\n    public void je_v\u00e9rifie_le_rattachement_de_la_sous_action() {\n        planActionPage.checkPanelAttachedIsAdd(excelHelpers);\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie que la de r\u00e9alisation doit \u00eatre inf\u00e9rieur \u00e0 la date de suivi",
            "StepDef": "@Then(\"je v\u00e9rifie que la de r\u00e9alisation doit \u00eatre inf\u00e9rieur \u00e0 la date de suivi\")\n    public void je_v\u00e9rifie_que_la_de_r\u00e9alisation_doit_\u00eatre_inf\u00e9rieur_\u00e0_la_date_de_suivi() {\n        planActionPage.checkDateRealSubActionAttached();\n    }",
            "RealPage": "public void checkDateRealSubActionAttached() {\n        WebUI.clickElement(checkActionPaln);\n        WebUI.clickElement(bottonValidAttachedActionPlan);\n        WebUI.verifyElementTextEquals(WebUI.getTextElement(labelMessageCheckDateRealAttached), \"Le d\u00e9lai de suivi doit \u00eatre sup\u00e9rieur au d\u00e9lai de r\u00e9alisation.\");\n    }"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie que la modification des responsables de r\u00e9alisation et de suivi n'est pas possible Un message s'affiche: Cette sous action est rattach\u00e9e de la sous action n\u00b0 x de l'action N\u00b0x",
            "StepDef": "@Then(\"je v\u00e9rifie que la modification des responsables de r\u00e9alisation et de suivi n'est pas possible Un message s'affiche: Cette sous action est rattach\u00e9e de la sous action n\u00b0 x de l'action N\u00b0x\")\n    public void je_v\u00e9rifie_que_la_modification_des_responsables_de_r\u00e9alisation_et_de_suivi_n_est_pas_possible_un_message_s_affiche_cette_sous_action_est_rattach\u00e9e_de_la_sous_action_n_x_de_l_action_n_x() {\n        planActionPage.checkDateRealAndDateFollowUpIsChangedAndMessageIsDisplyed(excelHelpers);\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie que la modification des responsables de r\u00e9alisation et de suivi n'est pas possible",
            "StepDef": "@Then(\"je v\u00e9rifie que la modification des responsables de r\u00e9alisation et de suivi n'est pas possible\")\n    public void je_v\u00e9rifie_que_la_modification_des_responsables_de_r\u00e9alisation_et_de_suivi_n_est_pas_possible() {\n        planActionPage.checkRespoRealAndRespoFollowUpIsNotChange();\n    }",
            "RealPage": "public void checkRespoRealAndRespoFollowUpIsNotChange() {\n        WebUI.verifyElementNotVisible(bottonSelectRespoReal, WAIT_Element_Check_Visible_Or_Not);\n        WebUI.verifyElementNotVisible(bottonSelectMultiRespo, WAIT_Element_Check_Visible_Or_Not);\n\n    }"
        },
        {
            "Sc\u00e9nario": "je clique sur Dupliquer du sous action",
            "StepDef": "@Then(\"je clique sur Dupliquer du sous action\")\n    public void je_clique_sur_dupliquer_du_sous_action() {\n        planActionPage.duplicationActionPlan();\n\n    }",
            "RealPage": "public void duplicationActionPlan() {\n        if (ONE_ESPO) {\n            WebUI.scrollToElementAtTop(gridActionPlanWithOneRespo);\n\n            WebUI.getWebElement(gridActionPlanWithOneRespo).findElement(By.xpath(\"//*[@id=\\\"ctl00_ContentPlaceHolder1_GridView5\\\"]/tbody/tr[1]/td[1]\")).findElement(By.tagName(\"input\")).click();\n            WebUI.scrollToElementAtTop(bottonDuplicationActionAttachedOneRespo);\n            WebUI.clickElementWithJs(bottonDuplicationActionAttachedOneRespo);\n\n        }"
        },
        {
            "Sc\u00e9nario": "je modifie la d\u00e9signation du sous action",
            "StepDef": "@Then(\"je modifie la d\u00e9signation du sous action\")\n    public void je_modifie_la_d\u00e9signation_du_sous_action() {\n        planActionPage.modifiyDesagntionActionPlan(excelHelpers);\n\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie que cr\u00e9ation de la sous action dupliqu\u00e9e",
            "StepDef": "@Then(\"je v\u00e9rifie que cr\u00e9ation de la sous action dupliqu\u00e9e\")\n    public void je_v\u00e9rifie_que_cr\u00e9ation_de_la_sous_action_dupliqu\u00e9e() {\n        planActionPage.checkAddActionDuplique();\n    }",
            "RealPage": "public void checkAddActionDuplique() {\n        WebUI.clickElement(bottonValidePlanAction);\n        String numActionPlan = \"\";\n        if (ONE_ESPO) {\n            numActionPlan = WebUI.getWebElement(gridActionPlanWithOneRespo).findElement(By.xpath(\"//*[@id=\\\"ctl00_ContentPlaceHolder1_GridView5\\\"]/tbody/tr[2]/td[3]\")).findElement(By.tagName(\"a\")).getText();\n\n\n        }"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie que le pop up Liste des actions s'affiche",
            "StepDef": "@Then(\"je v\u00e9rifie que le pop up Liste des actions s'affiche\")\n    public void je_v\u00e9rifie_que_le_pop_up_Liste_des_actions_s_affiche() {\n        planActionPage.checkPopupActionPlanIsDisplayed();\n    }",
            "RealPage": "public void checkPopupActionPlanIsDisplayed() {\n        WebUI.verifyElementVisible(gridAttachedActionPlan, WAIT_Element_Check_Visible_Or_Not);\n\n    }"
        },
        {
            "Sc\u00e9nario": "je clique sur Sous-Action",
            "StepDef": "@Then(\"je clique sur Sous-Action\")\n    public void je_clique_sur_Sous_Action() {\n        planActionPage.opensheetActionPlan();\n    }",
            "RealPage": "public void opensheetActionPlan() {\n        if (WebUI.isElementVisible(gridActionPlanWithOneRespo, WAIT_Element_Check_Visible_Or_Not)) {\n            WebUI.getWebElement(gridActionPlanWithOneRespo).findElement(By.xpath(\"//*[@id=\\\"ctl00_ContentPlaceHolder1_GridView5\\\"]/tbody/tr/td[3]\")).findElement(By.tagName(\"a\")).click();\n        }"
        },
        {
            "Sc\u00e9nario": "je modifie la d\u00e9signation de sous action",
            "StepDef": "@Then(\"je modifie la d\u00e9signation de sous action\")\n    public void je_modifie_la_d\u00e9signation_de_sous_action() {\n        planActionPage.enterDesaigntionActionPlan(excelHelpers);\n\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie que un champ motif de modification s'affiche dans sous action",
            "StepDef": "@Then(\"je v\u00e9rifie que un champ motif de modification s'affiche dans sous action\")\n    public void je_v\u00e9rifie_que_un_champ_motif_de_modification_s_affiche_dans_sous_action() {\n        planActionPage.checkMotifOfmodifySheetActionPlanIsDisplayed();\n    }",
            "RealPage": "public void checkMotifOfmodifySheetActionPlanIsDisplayed() {\n        WebUI.clickElement(bottonValidePlanAction);\n        WebUI.verifyElementVisible(textFieldModifyActionPlan, WAIT_Element_Check_Visible_Or_Not);\n    }"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie que le champ motif de modification est obligatoire",
            "StepDef": "@Then(\"je v\u00e9rifie que le champ motif de modification est obligatoire\")\n    public void je_v\u00e9rifie_que_le_champ_motif_de_modification_est_obligatoire() {\n        planActionPage.checkMotifOfmodifySheetActionPlanIsRequired();\n    }",
            "RealPage": "public void checkMotifOfmodifySheetActionPlanIsRequired() {\n        WebUI.clickElement(bottonValidePlanAction);\n        WebUI.verifyContains(WebUI.getTextElement(labelModifySheetActionPlan), \"*\");\n        WebUI.clickElement(bottonValidePlanAction);\n        String message = \"Champ obligatoire\";\n        WebUI.verifyElementTextEquals(WebUI.getWebElement(messageRequiredGravite).findElement(By.xpath(\"//*[@id=\\\"ctl00_ContentPlaceHolder1_ValidatorCalloutExtender53_popupTable\\\"]/tbody/tr[2]/td[3]\")).getText(), message);\n    }"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie que le champ motif de modification est non obligatoire",
            "StepDef": "@Then(\"je v\u00e9rifie que le champ motif de modification est non obligatoire\")\n    public void je_v\u00e9rifie_que_le_champ_motif_de_modification_est_non_obligatoire() {\n        planActionPage.checkMotifOfmodifySheetActionPlanIsNotRequired();\n    }",
            "RealPage": "public void checkMotifOfmodifySheetActionPlanIsNotRequired() {\n        WebUI.clickElement(bottonValidePlanAction);\n        WebUI.verifyContains(WebUI.getTextElement(labelModifySheetActionPlan), \"*\");\n        WebUI.clickElement(bottonValidePlanAction);\n        String message = \"Champ obligatoire\";\n        WebUI.verifyElementTextEquals(WebUI.getWebElement(messageRequiredGravite).findElement(By.xpath(\"//*[@id=\\\"ctl00_ContentPlaceHolder1_ValidatorCalloutExtender53_popupTable\\\"]/tbody/tr[2]/td[3]\")).getText(), message);\n    }"
        },
        {
            "Sc\u00e9nario": "je coche Sous-Action au niveau du panel'plan d'action'",
            "StepDef": "@When(\"je coche Sous-Action au niveau du panel'plan d'action'\")\n    public void je_coche_sous_action_au_niveau_du_panel_plan_d_action() {\n        planActionPage.checkedActionPlan();\n    }",
            "RealPage": "public void checkedActionPlan() {\n        if (WebUI.isElementVisible(gridActionPlanWithOneRespo, WAIT_Element_Check_Visible_Or_Not)) {\n            WebUI.getWebElement(gridActionPlanWithOneRespo).findElement(By.xpath(\"//*[@id=\\\"ctl00_ContentPlaceHolder1_GridView5\\\"]/tbody/tr/td[1]\")).findElement(By.tagName(\"input\")).click();\n        }"
        },
        {
            "Sc\u00e9nario": "je clique sur le bouton supprimer",
            "StepDef": "@When(\"je clique sur le bouton supprimer\")\n    public void je_clique_sur_le_bouton_supprimer() {\n        planActionPage.deleteActionPlan();\n    }",
            "RealPage": "public void deleteActionPlan() {\n        WebUI.clickElement(buttonDeleteActionPlan);\n        WebUI.acceptAlert();\n    }"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie que la sous action coch\u00e9e est supprim\u00e9e",
            "StepDef": "@Then(\"je v\u00e9rifie que la sous action coch\u00e9e est supprim\u00e9e\")\n    public void je_v\u00e9rifie_que_la_sous_action_coch\u00e9e_est_supprim\u00e9e() {\n        planActionPage.checkActionPlanIsDeleted();\n    }",
            "RealPage": "public void checkActionPlanIsDeleted() {\n        WebUI.verifyElementNotVisible(gridActionPlanWithOneRespo, WAIT_Element_Check_Visible_Or_Not);\n\n        WebUI.verifyElementNotVisible(gridActionPlanWithManyRespo, WAIT_Element_Check_Visible_Or_Not);\n\n    }"
        },
        {
            "Sc\u00e9nario": "J'ajoute une source d'action",
            "StepDef": "@Given(\"J'ajoute une source d'action\")\n    public void ajouter_source_d_action() {\n        sourcePage.addSource();\n    }",
            "RealPage": "public void addSource() {\n        WebUI.clickElement(bottonAddSource);\n    }"
        },
        {
            "Sc\u00e9nario": "je clique sur la source d'action",
            "StepDef": "@Given(\"je clique sur la source d'action\")\n    public void clique_source_d_action() {\n        sourcePage.validSource();\n\n    }",
            "RealPage": "public void validSource() {\n        WebUI.clickElement(bottonValiderSource);\n    }"
        },
        {
            "Sc\u00e9nario": "J'ajoute des types d'action",
            "StepDef": "@Given(\"J'ajoute des types d'action\")\n    public void ajouter_types_d_action() {\n        typeActionPage.clicAddTypeAction();\n    }",
            "RealPage": "public void clicAddTypeAction() {\n        WebUI.clickElement(bottonAddTypeAction);\n    }"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie le type d'action simplifi\u00e9e",
            "StepDef": "@Then(\"je v\u00e9rifie le type d'action simplifi\u00e9e\")\n    public void je_v\u00e9rifie_le_type_d_action_simplifi\u00e9e() {\n        typeActionPage.checkAddTypeActionSimplifie(excelHelpers);\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "je clique sur le bouton Envoyer au r\u00e9dacteur",
            "StepDef": "@When(\"je clique sur le bouton Envoyer au r\u00e9dacteur\")\n    public void je_clique_sur_le_bouton() {\n        circuitdevalidationpage.RedacteurSubmit();\n    }",
            "RealPage": "public void RedacteurSubmit() {\n\n        WebUI.clickElementWithJs(buttonRedacteur);\n\n\n    }"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie le document dans la section des documents en cours",
            "StepDef": "@Then(\"je v\u00e9rifie le document dans la section des documents en cours\")\n    public void je_v\u00e9rifie_le_document_dans_la_section_des_documents_en_cours() {\n        circuitdevalidationpage.verificationOfDoc(excelHelpers);\n\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie qu'apr\u00e8s avoir rempli tous les champs et valider, les panels D\u00e9tails,  Approbation, Diffusion et Liste des documents de renvoi sont affich\u00e9s",
            "StepDef": "@Then(\"je v\u00e9rifie qu'apr\u00e8s avoir rempli tous les champs et valider, les panels D\u00e9tails,  Approbation, Diffusion et Liste des documents de renvoi sont affich\u00e9s\")\n    public void je_v\u00e9rifie_qu_apr\u00e8s_avoir_rempli_tous_les_champs_et_valider_les_panels_d\u00e9tails_approbation_diffusion_et_liste_des_documents_de_renvoi_sont_affich\u00e9s() {\n        createAndModificationDetailsPage.checkPanelApprovalIsDisplayed();\n    }",
            "RealPage": "public void checkPanelApprovalIsDisplayed() {\n        WebUI.clickElement(panelApproval);\n        WebUI.verifyElementVisible(gridViewApprobateurs);\n        WebUI.verifyElementVisible(gridViewRedacteurs);\n        WebUI.verifyElementVisible(gridViewVerificateurs);\n\n    }"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifier qu'au niveau du panel D\u00e9tails, l'\u00e9tat du document est affich\u00e9 correctement",
            "StepDef": "@Then(\"je v\u00e9rifier qu'au niveau du panel D\u00e9tails, l'\u00e9tat du document est affich\u00e9 correctement\")\n    public void je_v\u00e9rifier_qu_au_niveau_du_panel_d\u00e9tails_l_\u00e9tat_du_document_est_affich\u00e9_correctement() {\n        createAndModificationDetailsPage.checkDetailsDoc();\n    }",
            "RealPage": "public void checkDetailsDoc() {\n        WebUI.clickElement(panelDetails);\n        String status = WebUI.getAttributeElement(inputStatusDoc, \"value\");\n        if (WebUI.getLang().equalsIgnoreCase(\"fr-FR\")) {\n            WebUI.verifyElementTextEquals(status, \"DOCUMENT EN COURS DE CREATION\");\n        }"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie qu'au niveau du panel D\u00e9tails, le champ Date document affiche la date de cr\u00e9ation du document",
            "StepDef": "@Then(\"je v\u00e9rifie qu'au niveau du panel D\u00e9tails, le champ Date document affiche la date de cr\u00e9ation du document\")\n    public void je_v\u00e9rifie_qu_au_niveau_du_panel_d\u00e9tails_le_champ_date_document_affiche_la_date_de_cr\u00e9ation_du_document() {\n        createAndModificationDetailsPage.checkDateDoc();\n    }",
            "RealPage": "public void checkDateDoc() {\n        WebUI.clickElement(panelDetails);\n        String date = WebUI.getAttributeElement(inputDateCreateDoc, \"value\");\n        if (WebUI.getLang().equalsIgnoreCase(\"fr-FR\")) {\n            LocalDate today = LocalDate.now();\n            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"dd/MM/YYYY\");\n            String dateToday = today.format(formatter);\n            WebUI.verifyContains(date, dateToday);\n        }"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie qu'au niveau du panel Approbation, la liste des responsables de validation est coh\u00e9rente avec la liste param\u00e9tr\u00e9e au niveau du type de document utilis\u00e9 lors de la cr\u00e9ation",
            "StepDef": "@Then(\"je v\u00e9rifie qu'au niveau du panel Approbation, la liste des responsables de validation est coh\u00e9rente avec la liste param\u00e9tr\u00e9e au niveau du type de document utilis\u00e9 lors de la cr\u00e9ation\")\n    public void je_v\u00e9rifie_qu_au_niveau_du_panel_approbation_la_liste_des_responsables_de_validation_est_coh\u00e9rente_avec_la_liste_param\u00e9tr\u00e9e_au_niveau_du_type_de_document_utilis\u00e9_lors_de_la_cr\u00e9ation() {\n        createAndModificationDetailsPage.checkListApprobation(excelHelpers);\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie que l'ajout d'un r\u00e9dacteur n'est pas obligatoire au  niveau de liste des responsables de validation",
            "StepDef": "@Then(\"je v\u00e9rifie que l'ajout d'un r\u00e9dacteur n'est pas obligatoire au  niveau de liste des responsables de validation\")\n    public void je_v\u00e9rifie_que_l_ajout_d_un_r\u00e9dacteur_n_est_pas_obligatoire_au_niveau_de_liste_des_responsables_de_validation() {\n        createAndModificationDetailsPage.checkRedacteurIsNotRequired();\n    }",
            "RealPage": "public void checkRedacteurIsNotRequired() {\n        WebUI.clickElement(panelApprobateur);\n        WebUI.clickElement(checkBoxRedcateurGrid);\n        WebUI.clickElement(buttonDeleteRedact);\n        WebUI.acceptAlert();\n        WebUI.verifyElementNotVisible(gridViewRedacteursPanelApprobation, FrameworkConstants.WAIT_Element_Check_Visible_Or_Not);\n\n    }"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie qu'au niveau du panel Diffusion, la liste de diffusion externe s'affiche",
            "StepDef": "@Then(\"je v\u00e9rifie qu'au niveau du panel Diffusion, la liste de diffusion externe s'affiche\")\n    public void je_v\u00e9rifie_qu_au_niveau_du_panel_diffusion_la_liste_de_diffusion_externe_s_affiche() {\n        createAndModificationDetailsPage.checkElem();\n    }",
            "RealPage": "public void checkElem() {\n        WebUI.clickJs(\"ctl00_ContentPlaceHolder1_Label62\");\n        WebUI.clickElement(buttonAddExt);\n        WebUI.setText(inputEmpExt, DataGenerateUtils.randomFullName());\n        WebUI.setText(inputEmailExt, DataGenerateUtils.randomEmail());\n        WebUI.clickElement(buttonValidEmpExt);\n        WebUI.verifyElementVisible(idGridExt, FrameworkConstants.WAIT_Element_Check_Visible_Or_Not);\n    }"
        },
        {
            "Sc\u00e9nario": "je clique sur le bouton Doc.externe au niveau du panel Liste des documents de renvoi",
            "StepDef": "@When(\"je clique sur le bouton Doc.externe au niveau du panel Liste des documents de renvoi\")\n    public void je_clique_sur_le_bouton_doc_externe_au_niveau_du_panel_liste_des_documents_de_renvoi() {\n        createAndModificationDetailsPage.clickToExternalDocument();\n    }",
            "RealPage": "public void clickToExternalDocument() {\n        WebUI.clickJs(\"ctl00_ContentPlaceHolder1_Label132\");\n        WebUI.clickElement(buttonDocExternal);\n    }"
        },
        {
            "Sc\u00e9nario": "je coche un document externe au niveau du panel Liste des documents de renvoi",
            "StepDef": "@When(\"je coche un document externe au niveau du panel Liste des documents de renvoi\")\n    public void je_coche_un_document_externe_au_niveau_du_panel_liste_des_documents_de_renvoi() {\n        createAndModificationDetailsPage.checkExternalDocument();\n    }",
            "RealPage": "public void checkExternalDocument() {\n        WebUI.clickElement(checkBoxDocExternalInGrid);\n        codeDoc = WebUI.getTextElement(codeDocExternalInGrid);\n\n    }"
        },
        {
            "Sc\u00e9nario": "je clique sur valider au niveau du panel Liste des documents de renvoi",
            "StepDef": "@When(\"je clique sur valider au niveau du panel Liste des documents de renvoi\")\n    public void je_clique_sur_valider_au_niveau_du_panel_liste_des_documents_de_renvoi() {\n        createAndModificationDetailsPage.clickToValidDocExternal();\n    }",
            "RealPage": "public void clickToValidDocExternal() {\n        WebUI.clickElement(buttonValidDocExternal);\n    }"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie que le rattachement est possible document externe",
            "StepDef": "@Then(\"je v\u00e9rifie que le rattachement est possible document externe\")\n    public void je_v\u00e9rifie_que_le_rattachement_est_possible_document_externe() {\n        createAndModificationDetailsPage.chekDocIsInsertDocExternal();\n\n    }",
            "RealPage": "public void chekDocIsInsertDocExternal() {\n        WebUI.setText(inputSearchDoc, codeDoc);\n        WebUI.verifyElementText(codeDocGrid, codeDoc);\n    }"
        },
        {
            "Sc\u00e9nario": "je clique sur le bouton Doc.En cours au niveau du panel Liste des documents de renvoi",
            "StepDef": "@When(\"je clique sur le bouton Doc.En cours au niveau du panel Liste des documents de renvoi\")\n    public void je_clique_sur_le_bouton_doc_en_cours_au_niveau_du_panel_liste_des_documents_de_renvoi() {\n        createAndModificationDetailsPage.clickToOnGoingDocument();\n    }",
            "RealPage": "public void clickToOnGoingDocument() {\n        WebUI.clickElement(buttonDocOnGoing);\n    }"
        },
        {
            "Sc\u00e9nario": "je coche un document en cours et le valide",
            "StepDef": "@When(\"je coche un document en cours et le valide\")\n    public void je_coche_un_document_en_cours_et_le_valide() {\n        createAndModificationDetailsPage.checkOnGoingDocument();\n\n    }",
            "RealPage": "public void checkOnGoingDocument() {\n        WebUI.clickElement(checkBoxDocOnGoingInGrid);\n        codeDoc = WebUI.getTextElement(codeDocOnGoingInGrid);\n    }"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie que le rattachement est possible document en cours",
            "StepDef": "@Then(\"je v\u00e9rifie que le rattachement est possible document en cours\")\n    public void je_v\u00e9rifie_que_le_rattachement_est_possible_document_en_cours() {\n        createAndModificationDetailsPage.chekDocIsInsertDocOnGoing();\n\n\n    }",
            "RealPage": "public void chekDocIsInsertDocOnGoing() {\n        WebUI.clickElement(buttonValidDocOngoing);\n        WebUI.setText(inputSearchDoc, codeDoc);\n        WebUI.verifyElementText(codeDocGrid, codeDoc);\n    }"
        },
        {
            "Sc\u00e9nario": "je clique sur le bouton Doc.En vigueur au niveau du panel Liste des documents de renvoi",
            "StepDef": "@When(\"je clique sur le bouton Doc.En vigueur au niveau du panel Liste des documents de renvoi\")\n    public void je_clique_sur_le_bouton_doc_en_vigueur_au_niveau_du_panel_liste_des_documents_de_renvoi() {\n        createAndModificationDetailsPage.clickToInternal();\n    }",
            "RealPage": "public void clickToInternal() {\n        WebUI.clickElement(buttonAddInternal);\n    }"
        },
        {
            "Sc\u00e9nario": "je cocher un document en vigueur et le valide",
            "StepDef": "@When(\"je cocher un document en vigueur et le valide\")\n    public void je_cocher_un_document_en_vigueur_et_le_valide() {\n        createAndModificationDetailsPage.checkInternalDoc();\n    }",
            "RealPage": "public void checkInternalDoc() {\n        WebUI.clickElement(checkBoxDocInternalInGrid);\n        codeDoc = WebUI.getTextElement(codeDocIntarnalGrid);\n    }"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie que le rattachement est possible document en vigueur",
            "StepDef": "@Then(\"je v\u00e9rifie que le rattachement est possible document en vigueur\")\n    public void je_v\u00e9rifie_que_le_rattachement_est_possible_document_en_vigueur() {\n        createAndModificationDetailsPage.chekDocIsInsertDocInternal();\n\n    }",
            "RealPage": "public void chekDocIsInsertDocInternal() {\n        WebUI.clickElement(buttonValidInternal);\n        WebUI.setText(inputSearchDoc, codeDoc);\n        WebUI.verifyElementText(codeDocGrid, codeDoc);\n    }"
        },
        {
            "Sc\u00e9nario": "je clique sur Rechercher et r\u00e9cup\u00e8re le nombre total de documents en cours",
            "StepDef": "@Then(\"je clique sur Rechercher et r\u00e9cup\u00e8re le nombre total de documents en cours\")\n    public void je_clique_sur_Rechercher_et_r\u00e9cup\u00e8re_le_nombre_total_de_documents_en_cours() {\n        createAndModificationDetailsPage.serachAndGet();\n\n    }",
            "RealPage": "public void serachAndGet() {\n        WebUI.clickElement(buttonSearchDoc);\n        numberOfDocOngoing = Utils.getTotaleNumberOfGrid(\"ctl00_ContentPlaceHolder1_GridView1\");\n    }"
        },
        {
            "Sc\u00e9nario": "je verifie qu'au niveau du panel Liste des documents de renvoi lorsque l'utilisateur veut rattacher un docuement en cours la liste des documents affich\u00e9e correspond seulement aux documents en cours du superviseur",
            "StepDef": "@Then(\"je verifie qu'au niveau du panel Liste des documents de renvoi lorsque l'utilisateur veut rattacher un docuement en cours la liste des documents affich\u00e9e correspond seulement aux documents en cours du superviseur\")\n    public void je_verifie_qu_au_niveau_du_panel_liste_des_documents_de_renvoi_lorsque_l_utilisateur_veut_rattacher_un_docuement_en_cours_la_liste_des_documents_affich\u00e9e_correspond_seulement_aux_documents_en_cours_du_superviseur() {\n        createAndModificationDetailsPage.checkdocOngoing();\n    }",
            "RealPage": "public void checkdocOngoing() {\n        WebUI.clickJs(\"ctl00_ContentPlaceHolder1_Label132\");\n        clickToOnGoingDocument();\n        String numberOfDoc = Utils.getTotaleNumberOfGrid(\"ctl00_ContentPlaceHolder1_GridView6\");\n        WebUI.verifyElementTextEquals(numberOfDoc, numberOfDocOngoing);\n\n    }"
        },
        {
            "Sc\u00e9nario": "je clique sur ajouter type document",
            "StepDef": "@When(\"je clique sur ajouter type document\")\n    public void cliquer_sur_ajouter_type_document() {\n        typeDocumentPage.addTypeDoc();\n    }",
            "RealPage": "public void addTypeDoc() {\n        WebUI.clickElement(buttonAddTypeDocument);\n    }"
        },
        {
            "Sc\u00e9nario": "je saisis type document",
            "StepDef": "@Then(\"je saisis type document\")\n    public void je_saisis_type_document() {\n        typeDocumentPage.entreTypeOfDocument(excelHelpers);\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "je clique sur valider document",
            "StepDef": "@Then(\"je clique sur valider document\")\n    public void je_clique_sur_valider_document() {\n        typeDocumentPage.clickToValideDoc();\n\n    }",
            "RealPage": "public void clickToValideDoc() {\n        WebUI.clickElement(buttonValideTypeDoc);\n        WebUI.clickElementWithJs(panelListRespoValidation);\n    }"
        },
        {
            "Sc\u00e9nario": "Je v\u00e9rifie que le type de document a \u00e9t\u00e9 ajout\u00e9 avec succ\u00e8s",
            "StepDef": "@Then(\"Je v\u00e9rifie que le type de document a \u00e9t\u00e9 ajout\u00e9 avec succ\u00e8s\")\n    public void je_v\u00e9rifie_que_le_type_de_document_a_\u00e9t\u00e9_ajout\u00e9_avec_succ\u00e8s() {\n        typeDocumentPage.CheckCreationTypeDoc(excelHelpers);\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "je recherche l'action \u00e0 suivre",
            "StepDef": "@When(\"je recherche l'action \u00e0 suivre\")\n    public void je_recherche_l_action_\u00e0_suivre() {\n        excelHelpers.setExcelFile(FrameworkConstants.EXCEL_DATA_FILE_PATH, \"Action\");\n        numberOfAction = excelHelpers.getCellData(FrameworkConstants.row, 7);\n        agendaActionFollowUp.searcheActionToFollowUp(numberOfAction);\n\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "je recherche l'action \u00e0 suivire",
            "StepDef": "@When(\"je recherche l'action \u00e0 suivire\")\n    public void je_recherche_l_action_\u00e0_suivire() {\n        excelHelpers.setExcelFile(FrameworkConstants.EXCEL_DATA_FILE_PATH, \"Action\");\n        numberOfAction = excelHelpers.getCellData(FrameworkConstants.row, 7);\n        agendaActionFollowUp.searcheActionToFollowUp(numberOfAction);\n\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifier que la rubrique de modification du taux s'affiche sous le tableau et le taux et la date de r\u00e9alisation sont pr\u00e9saisis avec le taux et la date renseign\u00e9s par le responsable de r\u00e9alisation.",
            "StepDef": "@Then(\"je v\u00e9rifier que la rubrique de modification du taux s'affiche sous le tableau et le taux et la date de r\u00e9alisation sont pr\u00e9saisis avec le taux et la date renseign\u00e9s par le responsable de r\u00e9alisation.\")\n    public void je_v\u00e9rifier_que_la_rubrique_de_modification_du_taux_s_affiche_sous_le_tableau_et_le_taux_et_la_date_de_r\u00e9alisation_sont_pr\u00e9saisis_avec_le_taux_et_la_date_renseign\u00e9s_par_le_responsable_de_r\u00e9alisation() {\n        agendaActionFollowUp.checkPopupListActionPlanOneResspoChnageRate();\n    }",
            "RealPage": "public void checkPopupListActionPlanOneResspoChnageRate() {\n        WebUI.verifyElementVisible(modaleOneRespo, WAIT_Element_Check_Visible_Or_Not);\n\n    }"
        },
        {
            "Sc\u00e9nario": "je clique sur valider sans remplir le commentaire",
            "StepDef": "@Then(\"je clique sur valider sans remplir le commentaire\")\n    public void je_clique_sur_valider_sans_remplir_le_commentaire() {\n        agendaActionFollowUp.clickChangeRateReal();\n\n\n    }",
            "RealPage": "public void clickChangeRateReal() {\n        WebUI.clickElement(buttonValideChangeRate);\n    }"
        },
        {
            "Sc\u00e9nario": "Je verifi\u00e9 qu'un message de contr\u00f4le s'affiche le commentaire de responsable de suivi est obligatoire",
            "StepDef": "@Then(\"Je verifi\u00e9 qu'un message de contr\u00f4le s'affiche le commentaire de responsable de suivi est obligatoire\")\n    public void je_verifi\u00e9_qu_un_message_de_contr\u00f4le_s_affiche_le_commentaire_de_responsable_de_suivi_est_obligatoire() {\n        agendaActionFollowUp.checkMessageCommentRealIsDisplayed();\n    }",
            "RealPage": "public void checkMessageCommentRealIsDisplayed() {\n        Utils.chekMessageControle(\"ctl00_ContentPlaceHolder1_ajaxToolKit_1_popupTable\");\n    }"
        },
        {
            "Sc\u00e9nario": "j'acc\u00e8de \u00e0 l'action \u00e0 suivire",
            "StepDef": "@Then(\"j'acc\u00e8de \u00e0 l'action \u00e0 suivire\")\n    public void j_acc\u00e8de_\u00e0_l_action_\u00e0_suivire() {\n        agendaActionFollowUp.openActionFollowUp();\n    }",
            "RealPage": "public void openActionFollowUp() {\n        WebUI.clickElement(buttonOpenActionFlowup);\n\n    }"
        },
        {
            "Sc\u00e9nario": "je modifie le taux de r\u00e9alisation d'action \u00e0 suivre",
            "StepDef": "@When(\"je modifie le taux de r\u00e9alisation d'action \u00e0 suivre\")\n    public void je_modifie_le_taux_de_r\u00e9alisation_d_action_\u00e0_suivre() {\n        agendaActionFollowUp.changeRateAndCommentReal();\n    }",
            "RealPage": "public void changeRateAndCommentReal() {\n        rateReal = String.valueOf(DataGenerateUtils.randomNumberIntFromTo(30, 90));\n        WebUI.setText(textFieldChangeRate, rateReal);\n        WebUI.setText(textFieldCommentChangeRate, DataGenerateUtils.randomParaghe());\n        WebUI.clickElement(buttonValideChangeRate);\n    }"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifier que le responsable de suivi peut modifier le taux de r\u00e9alisation",
            "StepDef": "@Then(\"je v\u00e9rifier que le responsable de suivi peut modifier le taux de r\u00e9alisation\")\n    public void je_v\u00e9rifier_que_le_responsable_de_suivi_peut_modifier_le_taux_de_r\u00e9alisation() {\n        agendaActionFollowUp.checkRateIsChange();\n    }",
            "RealPage": "public void checkRateIsChange() {\n        String rateChange = WebUI.getAttributeElement(textFieldRateChange, \"value\");\n        WebUI.verifyElementTextEquals(rateChange, rateReal);\n    }"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifier que le pop up Modifier taux de r\u00e9alisation s'affiche",
            "StepDef": "@Then(\"je v\u00e9rifier que le pop up Modifier taux de r\u00e9alisation s'affiche\")\n    public void je_v\u00e9rifier_que_le_pop_up_s_affiche() {// Write code here that turns the phrase above into concrete actions\n        agendaActionFollowUp.checkPopupListActionPlanMultiResspoChnageRate();\n    }",
            "RealPage": "public void checkPopupListActionPlanMultiResspoChnageRate() {\n        WebUI.verifyElementVisible(modaleMultiRespo, WAIT_Element_Check_Visible_Or_Not);\n\n    }"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifier que Les informations saisies sont enregistr\u00e9es",
            "StepDef": "@Then(\"je v\u00e9rifier que Les informations saisies sont enregistr\u00e9es\")\n    public void je_v\u00e9rifier_que_les_informations_saisies_sont_enregistr\u00e9es() {\n        agendaActionFollowUp.checkDataIsChanged();\n    }",
            "RealPage": "public void checkDataIsChanged() {\n        String rateChange = WebUI.getTextElement(rateRealGridActionFollowUp);\n        WebUI.verifyElementTextEquals(rateChange, rateReal);\n\n//        String commentChange = WebUI.getAttributeElement(textareaCommentReal,\"value\");\n        // WebUI.verifyElementTextEquals(commentChange, comment);\n    }"
        },
        {
            "Sc\u00e9nario": "Je v\u00e9rifie que la modification du panel plan d'action n'est pas possible: les boutons rattacher, ajouter, dupliquer et supprimer sont d\u00e9sactiv\u00e9s",
            "StepDef": "@Then(\"Je v\u00e9rifie que la modification du panel plan d'action n'est pas possible: les boutons rattacher, ajouter, dupliquer et supprimer sont d\u00e9sactiv\u00e9s\")\n    public void je_v\u00e9rifie_que_la_modification_du_panel_plan_d_action_n_est_pas_possible_les_boutons_rattacher_ajouter_dupliquer_et_supprimer_sont_d\u00e9sactiv\u00e9s() {\n        // Write code here that turns the phrase above into concrete actions\n        agendaActionFollowUp.checkButtonsNotModifiable();\n    }",
            "RealPage": "public void checkButtonsNotModifiable() {\n        Utils.checkButtonIsDisabled(buttonDupActionPlan);\n        Utils.checkButtonIsDisabled(buttonDeleteActionPlan);\n        Utils.checkButtonIsDisabled(buttonRatSousAct);\n        Utils.checkButtonIsDisabled(buttonAddActionPLan);\n\n\n    }"
        },
        {
            "Sc\u00e9nario": "Je v\u00e9rifie que le panel objet de la fiche action est fig\u00e9e",
            "StepDef": "@Then(\"Je v\u00e9rifie que le panel objet de la fiche action est fig\u00e9e\")\n    public void je_v\u00e9rifie_que_le_panel_objet_de_la_fiche_action_est_fig\u00e9e() {\n        agendaActionFollowUp.checkAllContientInObjectIsDisabled();\n    }",
            "RealPage": "public void checkAllContientInObjectIsDisabled() {\n        WebUI.clickElement(By.id(\"ctl00_ContentPlaceHolder1_Liste_sous_actions\"));\n        WebUI.clickElement(By.id(\"ctl00_ContentPlaceHolder1_Label6\"));\n        Utils.checkElemIsDisabled(\"ctl00_ContentPlaceHolder1_panelEnreg\", \"input\");\n        Utils.checkElemIsDisabled(\"ctl00_ContentPlaceHolder1_panelEnreg\", \"textarea\");\n        Utils.checkElemIsDisabled(\"ctl00_ContentPlaceHolder1_panelEnreg\", \"select\");\n        Utils.checkElemIsDisabled(\"ctl00_ContentPlaceHolder1_panelEnreg\", \"a\");\n\n    }"
        },
        {
            "Sc\u00e9nario": "Je v\u00e9rifie que la fiche action s'affiche",
            "StepDef": "@Then(\"Je v\u00e9rifie que la fiche action s'affiche\")\n    public void je_v\u00e9rifie_que_la_fiche_action_s_affiche() {\n        excelHelpers.setExcelFile(FrameworkConstants.EXCEL_DATA_FILE_PATH, \"Action\");\n        numberOfAction = excelHelpers.getCellData(FrameworkConstants.row, 7);\n        agendaActionFollowUp.checkActionIsDisplayed(numberOfAction);\n\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "je saisir l'objet de la pi\u00e8ce jointe",
            "StepDef": "@When(\"je saisir l'objet de la pi\u00e8ce jointe\")\n    public void je_saisir_l_objet_de_la_pi\u00e8ce_jointe() {\n        agendaActionFollowUp.addTextAttachement();\n\n    }",
            "RealPage": "public void addTextAttachement() {\n        WebUI.setText(textFiledAttachment, DataGenerateUtils.randomParaghe());\n    }"
        },
        {
            "Sc\u00e9nario": "je clique sur valider",
            "StepDef": "@When(\"je clique sur valider\")\n    public void je_clique_sur_valider() {\n        agendaActionFollowUp.valideAttachement();\n\n    }",
            "RealPage": "public void valideAttachement() {\n        WebUI.clickElement(buttonValidefileAttachment);\n    }"
        },
        {
            "Sc\u00e9nario": "Je v\u00e9rifie que la pi\u00e8ce jointe s\u00e9lectionn\u00e9e est ajout\u00e9e \u00e0 la liste des pi\u00e8ces jointes",
            "StepDef": "@Then(\"Je v\u00e9rifie que la pi\u00e8ce jointe s\u00e9lectionn\u00e9e est ajout\u00e9e \u00e0 la liste des pi\u00e8ces jointes\")\n    public void je_v\u00e9rifie_que_la_pi\u00e8ce_jointe_s\u00e9lectionn\u00e9e_est_ajout\u00e9e_\u00e0_la_liste_des_pi\u00e8ces_jointes() {\n        agendaActionFollowUp.chekAttachement();\n    }",
            "RealPage": "public void chekAttachement() {\n        Assert.assertTrue(WebUI.getWebElement(gridFileAttachment).findElements(By.tagName(\"tr\")).size() > 0, \"attchement is not exsiste\");\n    }"
        },
        {
            "Sc\u00e9nario": "Je v\u00e9rifie que le pop up Pi\u00e8ce\\\\(s) jointe\\\\(s) s'affiche",
            "StepDef": "@Then(\"Je v\u00e9rifie que le pop up Pi\u00e8ce\\\\(s) jointe\\\\(s) s'affiche\")\n    public void je_v\u00e9rifie_que_le_pop_up_pi\u00e8ce_s_jointe_s_s_affiche() {\n        agendaActionFollowUp.chekPopUpAttachementIsDisplyed();\n    }",
            "RealPage": "public void chekPopUpAttachementIsDisplyed() {\n        WebUI.verifyElementVisible(By.id(\"myModalPJJ_1\"), WAIT_Element_Check_Visible_Or_Not);\n    }"
        },
        {
            "Sc\u00e9nario": "Je v\u00e9rifie que les champs Taux eff. Et Rapport effi. sont gris\u00e9s",
            "StepDef": "@Then(\"Je v\u00e9rifie que les champs Taux eff. Et Rapport effi. sont gris\u00e9s\")\n    public void Je_v\u00e9rifie_que_les_champs_Taux_eff_Et_Rapport_effi_sont_gris\u00e9s() {\n        agendaActionFollowUp.chekRateAndReportIsNotModifaible();\n    }",
            "RealPage": "public void chekRateAndReportIsNotModifaible() {\n        WebUI.verifyElementHasAttribute(textFieldRateFollowUp, \"disabled\", WAIT_Element_Check_Visible_Or_Not);\n        WebUI.verifyElementHasAttribute(textFieldReportEff, \"disabled\", WAIT_Element_Check_Visible_Or_Not);\n    }"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie que les champs d\u00e9signation de la sous action, Date Saisie R\u00e9al., Date saisie suivi, Commentaire resp. r\u00e9alisation, Taux r\u00e9al., sont fig\u00e9s",
            "StepDef": "@Then(\"je v\u00e9rifie que les champs d\u00e9signation de la sous action, Date Saisie R\u00e9al., Date saisie suivi, Commentaire resp. r\u00e9alisation, Taux r\u00e9al., sont fig\u00e9s\")\n    public void je_v\u00e9rifie_que_les_champs_d\u00e9signation_de_la_sous_action_date_saisie_r\u00e9al_date_saisie_suivi_commentaire_resp_r\u00e9alisation_taux_r\u00e9al_sont_fig\u00e9s() {\n        agendaActionFollowUp.chekFieldFollowUpIsNotModifaible();\n    }",
            "RealPage": "public void chekFieldFollowUpIsNotModifaible() {\n\n        List<WebElement> elements = WebUI.getWebElement(By.id(\"collapseSuiv1\")).findElements(By.tagName(\"input\"));\n        for (WebElement element : elements) {\n            System.out.println(element.getAttribute(\"name\"));\n            if (!(element.getAttribute(\"name\").equals(\"ctl00$ContentPlaceHolder1$datre2\"))) {\n                if (element.isDisplayed()) {\n                    Assert.assertFalse(element.isEnabled(), \"element is not disabled\");\n                }"
        },
        {
            "Sc\u00e9nario": "je verifie qu'un pop up s'affiche",
            "StepDef": "@Then(\"je verifie qu'un pop up s'affiche\")\n    public void je_verifie_qu_un_pop_up_s_affiche() {\n        agendaActionFollowUp.checkPopupIsActionFollowUpIsDisplayed();\n    }",
            "RealPage": "public void checkPopupIsActionFollowUpIsDisplayed() {\n        WebUI.verifyElementVisible(By.id(\"myModalSuivi\"), WAIT_Element_Check_Visible_Or_Not);\n\n    }"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifier que Si la valeur est invalide alors la valeur saisie n'est pas enregistr\u00e9e",
            "StepDef": "@Then(\"je v\u00e9rifier que Si la valeur est invalide alors la valeur saisie n'est pas enregistr\u00e9e\")\n    public void je_v\u00e9rifier_que_si_la_valeur_est_invalide_alors_la_valeur_saisie_n_est_pas_enregistr\u00e9e() {\n        agendaActionFollowUp.checkRateEffIsBettwenZeroAndOneHundred(rateEff);\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "je saisie le taux d'efficacit\u00e9 sans saisir la date de suivi et valider",
            "StepDef": "@When(\"je saisie le taux d'efficacit\u00e9 sans saisir la date de suivi et valider\")\n    public void je_saisie_le_taux_d_efficacit\u00e9_sans_saisir_la_date_de_suivi_et_valider() {\n        agendaActionFollowUp.rateWithoutEff();\n    }",
            "RealPage": "public void rateWithoutEff() {\n        WebUI.setText(textFieldFollowUpDate, \"\");\n    }"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifier qu'un message de contr\u00f4le s'affiche: La date de suivi est un champ obligatoire.",
            "StepDef": "@Then(\"je v\u00e9rifier qu'un message de contr\u00f4le s'affiche: La date de suivi est un champ obligatoire.\")\n    public void je_v\u00e9rifier_qu_un_message_de_contr\u00f4le_s_affiche_la_date_de_suivi_est_un_champ_obligatoire() {\n        agendaActionFollowUp.checkMessageControlIsVisible();\n    }",
            "RealPage": "public void checkMessageControlIsVisible() {\n        String message = WebUI.getTextElement(By.id(\"ctl00_ContentPlaceHolder1_LabelDateSuivOblig\"));\n        if (WebUI.getLang().equals(\"fr-FR\")) {\n            WebUI.verifyElementTextEquals(message, \"La date de suivi est un champ obligatoire.\");\n        }"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifier que l'enregistrement de la valeur n'est pas effectu\u00e9 et Un message de contr\u00f4le s'affiche: Vous ne pouvez pas renseigner le taux de suivi tant que le taux de r\u00e9alisation est \u00e9gal \u00e0 0%",
            "StepDef": "@Then(\"je v\u00e9rifier que l'enregistrement de la valeur n'est pas effectu\u00e9 et Un message de contr\u00f4le s'affiche: Vous ne pouvez pas renseigner le taux de suivi tant que le taux de r\u00e9alisation est \u00e9gal \u00e0 0%\")\n    public void je_v\u00e9rifier_que_si_la_valeur_est_taux_r\u00e9alisation_alors_la_valeur_saisie_n_est_pas_enregistr\u00e9e() {\n        agendaActionFollowUp.checkRateEffIsBettwenZeroAndOneHundred(rateEff);\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie que Le champ Rapport d'efficacit\u00e9 suit le param\u00e9trage effectu\u00e9.  Si champ obligatoire alors un message de contr\u00f4le s'affiche: Le champ rapport efficacit\u00e9 est obligatoire",
            "StepDef": "@Then(\"je v\u00e9rifie que Le champ Rapport d'efficacit\u00e9 suit le param\u00e9trage effectu\u00e9.  Si champ obligatoire alors un message de contr\u00f4le s'affiche: Le champ rapport efficacit\u00e9 est obligatoire\")\n    public void je_v\u00e9rifie_que_le_champ_rapport_d_efficacit\u00e9_suit_le_param\u00e9trage_effectu\u00e9_si_champ_obligatoire_alors_un_message_de_contr\u00f4le_s_affiche_le_champ_rapport_efficacit\u00e9_est_obligatoire() {\n        agendaActionFollowUp.checkMessageControlRapportCommentIsRequired();\n\n    }",
            "RealPage": "public void checkMessageControlRapportCommentIsRequired() {\n        String message = WebUI.getTextElement(By.id(\"ctl00_ContentPlaceHolder1_LabelRappEffOblig\"));\n        if (WebUI.getLang().equals(\"fr-FR\")) {\n            WebUI.verifyElementTextEquals(message, \"Le champ rapport efficacit\u00e9 est obligatoire\\n\");\n        }"
        },
        {
            "Sc\u00e9nario": "je clique sur case \u00e0 cocher actions \u00e0 suivire",
            "StepDef": "@When(\"je clique sur case \u00e0 cocher actions \u00e0 suivire\")\n    public void je_clique_sur_case_\u00e0_cocher_actions_\u00e0_suivire() {\n        agendaActionFollowUp.clickToActionFollowUp();\n    }",
            "RealPage": "public void clickToActionFollowUp() {\n        WebUI.clickElement(checkBoxActionFollowUp);\n    }"
        },
        {
            "Sc\u00e9nario": "je V\u00e9rifie la coh\u00e9rence des informations au niveau du Gridview et les sous action",
            "StepDef": "@Then(\"je V\u00e9rifie la coh\u00e9rence des informations au niveau du Gridview et les sous action\")\n    public void je_v\u00e9rifie_la_coh\u00e9rence_des_informations_au_niveau_du_gridview_et_les_sous_action() {\n        agendaActionFollowUp.checkGridInActionPlan();\n\n    }",
            "RealPage": "public void checkGridInActionPlan(){\n        ////////////////////////////////////////////////////////////////////////////////////////////\n        String designations = WebUI.getTextElement(designation);\n        String numAction = WebUI.getTextElement(numeroAction);\n        String priorite = WebUI.getTextElement(prioriteAction);\n        String gravity = WebUI.getTextElement(gravityAction);\n        String dateReals = WebUI.getTextElement(dateReal);\n        String commRespreals = WebUI.getAttributeElement(commRespreal,\"value\");\n        String respReals = WebUI.getTextElement(respReal);\n\n\n        WebUI.clickElement(numeroAction);\n        WebUI.clickElement(accederAction);\n\n\n        WebUI.verifyElementTextEquals(numAction2,numAction);\n        String designations2 = WebUI.getTextElement(designation2);\n        String priorite2 = WebUI.getTextElement(prioriteAction2);\n        String gravity2 = WebUI.getTextElement(gravityAction2);\n        String dateReals2 = WebUI.getTextElement(dateReal2);\n        String commRespreals2 = WebUI.getAttributeElement(commRespreal2,\"value\");\n        String delaiactions2 = WebUI.getTextElement(delaiAction2);\n        String respreals2 = WebUI.getTextElement(respReal2);\n        String delais = WebUI.getTextElement(delai);\n\n        WebUI.verifyElementTextEquals(designations,designations2);\n        WebUI.verifyElementTextEquals(priorite,priorite2);\n        WebUI.verifyElementTextEquals(gravity,gravity2);\n        WebUI.verifyElementTextEquals(delais,delaiactions2);\n        WebUI.verifyElementTextEquals(respReals,respreals2);\n        WebUI.verifyElementTextEquals(dateReals,dateReals2);\n        WebUI.verifyElementTextEquals(commRespreals,commRespreals2);\n        WebUI.verifyElementTextEquals(dateReals,dateReals2);\n\n\n\n\n    }"
        },
        {
            "Sc\u00e9nario": "Je s\u00e9lectionne la source d'action d\u00e9tails",
            "StepDef": "@When(\"Je s\u00e9lectionne la source d'action d\u00e9tails\")\n    public void j_ajoute_une_source_d\u00e9tails() {\n        ficheActionSimplifierPage.selectSourceAction(excelHelpers);\n\n\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "je clique sur ajouter des produit",
            "StepDef": "@Then(\"je clique sur ajouter des produit\")\n    public void je_clique_sur_ajouter_des_produit() {\n        ficheActionDetailsPage.openPoupupProduct();\n\n    }",
            "RealPage": "public void openPoupupProduct() {\n        WebUI.clickElement(bottonAddProduct);\n\n    }"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie le pop up Liste des produits s'affiche",
            "StepDef": "@Then(\"je v\u00e9rifie le pop up Liste des produits s'affiche\")\n    public void je_v\u00e9rifie_le_pop_up_liste_des_produits_s_affiche() {\n        ficheActionDetailsPage.checkPoupupProduct();\n\n    }",
            "RealPage": "public void checkPoupupProduct() {\n        // WebUI.clickElement(bottonAddProduct);\n        WebUI.verifyElementVisible(poupupListProduct);\n\n    }"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie le produit coch\u00e9 est ajout\u00e9s",
            "StepDef": "@Then(\"je v\u00e9rifie le produit coch\u00e9 est ajout\u00e9s\")\n    public void je_v\u00e9rifie_le_produit_coch\u00e9_est_ajout\u00e9s() {\n        ficheActionDetailsPage.checkProductAttached(excelHelpers);\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "je clique sur ajouter les Types de causes",
            "StepDef": "@When(\"je clique sur ajouter les Types de causes\")\n    public void je_clique_sur_ajouter_les_types_de_causes() {\n        ficheActionDetailsPage.clckToAddTypeCause(excelHelpers);\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie un pop up Liste des types de causes s'affiche",
            "StepDef": "@Then(\"je v\u00e9rifie un pop up Liste des types de causes s'affiche\")\n    public void je_v\u00e9rifie_un_pop_up_liste_des_types_de_causes_s_affiche() {\n        ficheActionDetailsPage.checkPoupupTypeCause();\n    }",
            "RealPage": "public void checkPoupupTypeCause() {\n        WebUI.verifyElementVisible(poupuptypeCause);\n\n    }"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie que la liste affiche les types de causes rattach\u00e9s \u00e0 la source d'action s\u00e9lectionn\u00e9e",
            "StepDef": "@Then(\"je v\u00e9rifie que la liste affiche les types de causes rattach\u00e9s \u00e0 la source d'action s\u00e9lectionn\u00e9e\")\n    public void je_v\u00e9rifie_que_la_liste_affiche_les_types_de_causes_rattach\u00e9s_\u00e0_la_source_d_action_s\u00e9lectionn\u00e9e() {\n        ficheActionSimplifierPage.selectSourceAction(excelHelpers);\n        ficheActionDetailsPage.checktypeCauseAttachedInSourceSelected(excelHelpers);\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "je choisis les Types de causes",
            "StepDef": "@When(\"je choisis les Types de causes\")\n    public void je_choisis_les_types_de_causes() {\n        ficheActionDetailsPage.attchedTypeCause(excelHelpers);\n\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "Je v\u00e9rifie que le type de causes coch\u00e9 est ajout\u00e9",
            "StepDef": "@Then(\"Je v\u00e9rifie que le type de causes coch\u00e9 est ajout\u00e9\")\n    public void je_v\u00e9rifie_que_le_type_de_causes_coch\u00e9_est_ajout\u00e9() {\n        ficheActionDetailsPage.checkTypeCauseAttached();\n\n    }",
            "RealPage": "public void checkTypeCauseAttached() {\n        Assert.assertTrue(WebUI.getOptionTotal(dropDownListTypeCauseAttached) > 0, \"type cause is not attached\");\n        List<WebElement> options = WebUI.getOptions(dropDownListTypeCauseAttached);\n        Boolean resulttypeCauseAttched = false;\n        for (WebElement option : options) {\n            if (option.getText().contains(typeCause)) {\n                resulttypeCauseAttched = true; // String found\n            }"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie que la liste affiche les cat\u00e9gories de causes rattach\u00e9s au type de cause s\u00e9lectionn\u00e9",
            "StepDef": "@Then(\"je v\u00e9rifie que la liste affiche les cat\u00e9gories de causes rattach\u00e9s au type de cause s\u00e9lectionn\u00e9\")\n    public void je_v\u00e9rifie_la_liste_affiche_les_cat\u00e9gories_de_causes_rattach\u00e9s_au_type_de_cause_s\u00e9lectionn\u00e9() {\n        ficheActionDetailsPage.checkCategorieCategorieCausseAttached(excelHelpers);\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie que les cat\u00e9gories de causes coch\u00e9 sont ajout\u00e9",
            "StepDef": "@Then(\"je v\u00e9rifie que les cat\u00e9gories de causes coch\u00e9 sont ajout\u00e9\")\n    public void je_v\u00e9rifie_le_cat\u00e9gorie_de_causes_coch\u00e9_sont_ajout\u00e9() {\n        ficheActionDetailsPage.checkaddCategorieCategorieCausseAttached();\n    }",
            "RealPage": "public void checkaddCategorieCategorieCausseAttached() {\n        Assert.assertTrue(WebUI.getOptionTotal(dropDownCategorieCause) > 0, \"categorie cause is not attached\");\n        List<WebElement> options = WebUI.getOptions(dropDownCategorieCause);\n        Boolean resultCategorieCauseAttched = false;\n        for (WebElement option : options) {\n            if (option.getText().contains(categorieCause)) {\n                resultCategorieCauseAttched = true; // String found\n            }"
        },
        {
            "Sc\u00e9nario": "je choisis un responsable de cl\u00f4ture",
            "StepDef": "@When(\"je choisis un responsable de cl\u00f4ture\")\n    public void je_choisis_un_responsable_de_cl\u00f4ture() {\n        ficheActionSimplifierPage.selectResponsbaleCoture(excelHelpers);\n\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "je clique sur Valider Action",
            "StepDef": "@When(\"je clique sur Valider Action\")\n    public void je_clique_sur_valider_action() {\n        ficheActionSimplifierPage.valideSheetAction();\n        ficheActionSimplifierPage.getNumeroFiche(excelHelpers);\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie que les champs A l'origine de l'action Cat\u00e9gorie de cause Date saisie Impact action Objectif Produit R\u00e9f audit R\u00e9f Interne et Types de causes peuvent \u00eatre masqu\u00e9s \u00e0 partir de param\u00e9trage des champs \u00e0 masquer",
            "StepDef": "@Then(\"je v\u00e9rifie que les champs A l'origine de l'action Cat\u00e9gorie de cause Date saisie Impact action Objectif Produit R\u00e9f audit R\u00e9f Interne et Types de causes peuvent \u00eatre masqu\u00e9s \u00e0 partir de param\u00e9trage des champs \u00e0 masquer\")\n    public void je_v\u00e9rifie_que_les_champs_a_l_origine_de_l_action_cat\u00e9gorie_de_cause_date_saisie_impact_action_objectif_produit_r\u00e9f_audit_r\u00e9f_interne_et_types_de_causes_peuvent_\u00eatre_masqu\u00e9s_\u00e0_partir_de_param\u00e9trage_des_champs_\u00e0_masquer() {\n        ficheActionDetailsPage.checkOrigineCat\u00e9gorieDateSaisieImpactActionObjectifProduitRefAuditRefInterneTypesCausesNotVisible();\n\n    }",
            "RealPage": "public void checkOrigineCat\u00e9gorieDateSaisieImpactActionObjectifProduitRefAuditRefInterneTypesCausesNotVisible() {\n        WebUI.verifyElementNotVisible(bottonSelectOrigine, WAIT_Element_Check_Visible_Or_Not);\n        WebUI.verifyElementNotVisible(dropDownCategorieCause, WAIT_Element_Check_Visible_Or_Not);\n        FicheActionSimplifierPage ficheActionSimplifierPage = new FicheActionSimplifierPage(driver);\n        WebUI.verifyElementNotVisible(ficheActionSimplifierPage.getTextFieldDateSaisie(), WAIT_Element_Check_Visible_Or_Not);\n        WebUI.verifyElementNotVisible(textFieldImpactAction, WAIT_Element_Check_Visible_Or_Not);\n        WebUI.verifyElementNotVisible(textFieldObjectif, WAIT_Element_Check_Visible_Or_Not);\n        WebUI.verifyElementNotVisible(dropDownAttchedProduct, WAIT_Element_Check_Visible_Or_Not);\n        WebUI.verifyElementNotVisible(dropDownRefAudit, WAIT_Element_Check_Visible_Or_Not);\n        WebUI.verifyElementNotVisible(textFieldRefInterne, WAIT_Element_Check_Visible_Or_Not);\n        WebUI.verifyElementNotVisible(dropDownListTypeCauseAttached, WAIT_Element_Check_Visible_Or_Not);\n\n    }"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie que les champs A l'origine de l'action Cat\u00e9gorie de cause Date saisie Impact action Objectif Produit R\u00e9f audit R\u00e9f Interne et Types de causes peuvent \u00eatre visible \u00e0 partir de param\u00e9trage des champs \u00e0 masquer",
            "StepDef": "@Then(\"je v\u00e9rifie que les champs A l'origine de l'action Cat\u00e9gorie de cause Date saisie Impact action Objectif Produit R\u00e9f audit R\u00e9f Interne et Types de causes peuvent \u00eatre visible \u00e0 partir de param\u00e9trage des champs \u00e0 masquer\")\n    public void je_v\u00e9rifie_que_les_champs_a_l_origine_de_l_action_cat\u00e9gorie_de_cause_date_saisie_impact_action_objectif_produit_r\u00e9f_audit_r\u00e9f_interne_et_types_de_causes_peuvent_\u00eatre_d\u00e9masque_\u00e0_partir_de_param\u00e9trage_des_champs_\u00e0_masquer() {\n\n        ficheActionDetailsPage.checkOrigineCat\u00e9gorieDateSaisieImpactActionObjectifProduitRefAuditRefInterneTypesCausesVisible();\n    }",
            "RealPage": "public void checkOrigineCat\u00e9gorieDateSaisieImpactActionObjectifProduitRefAuditRefInterneTypesCausesVisible() {\n        WebUI.verifyElementVisible(bottonSelectOrigine, WAIT_Element_Check_Visible_Or_Not);\n        WebUI.verifyElementVisible(dropDownCategorieCause, WAIT_Element_Check_Visible_Or_Not);\n        FicheActionSimplifierPage ficheActionSimplifierPage = new FicheActionSimplifierPage(driver);\n        WebUI.verifyElementVisible(ficheActionSimplifierPage.getTextFieldDateSaisie(), WAIT_Element_Check_Visible_Or_Not);\n        WebUI.verifyElementVisible(textFieldImpactAction, WAIT_Element_Check_Visible_Or_Not);\n        WebUI.verifyElementVisible(textFieldObjectif, WAIT_Element_Check_Visible_Or_Not);\n        WebUI.verifyElementVisible(dropDownAttchedProduct, WAIT_Element_Check_Visible_Or_Not);\n        WebUI.verifyElementVisible(dropDownRefAudit, WAIT_Element_Check_Visible_Or_Not);\n        WebUI.verifyElementVisible(textFieldRefInterne, WAIT_Element_Check_Visible_Or_Not);\n        WebUI.verifyElementVisible(dropDownListTypeCauseAttached, WAIT_Element_Check_Visible_Or_Not);\n\n    }"
        },
        {
            "Sc\u00e9nario": "je recherche le num\u00e9ro d'action d\u00e9taill\u00e9e",
            "StepDef": "@When(\"je recherche le num\u00e9ro d'action d\u00e9taill\u00e9e\")\n    public void je_saisis_le_num\u00e9ro_d_action_d\u00e9taill\u00e9e() {\n        ficheActionSimplifierPage.searchActionDetails(excelHelpers);\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "je consulte la fiche action d\u00e9taill\u00e9e",
            "StepDef": "@When(\"je consulte la fiche action d\u00e9taill\u00e9e\")\n    public void je_consulter_la_fiche_d_action_d\u00e9taill\u00e9e() {\n        ficheActionSimplifierPage.consultSheetAction();\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie que le num\u00e9ro de la fiche action d\u00e9taill\u00e9es est affich\u00e9 en bleu",
            "StepDef": "@Then(\"je v\u00e9rifie que le num\u00e9ro de la fiche action d\u00e9taill\u00e9es est affich\u00e9 en bleu\")\n    public void je_v\u00e9rifie_que_le_num\u00e9ro_de_la_fiche_action_d\u00e9taill\u00e9es_est_affich\u00e9_en_bleu() {\n        ficheActionSimplifierPage.checkNumActionBleu();\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "je clique sur button aper\u00e7u d'action",
            "StepDef": "@When(\"je clique sur button aper\u00e7u d'action\")\n    public void je_clique_sur_button_aper\u00e7u_action() {\n        ficheActionDetailsPage.clickTobuttonView();\n    }",
            "RealPage": "public void clickTobuttonView() {\n        WebUI.clickElement(buttonView);\n    }"
        },
        {
            "Sc\u00e9nario": "Je v\u00e9rifie que un pop up s'affiche",
            "StepDef": "@Then(\"Je v\u00e9rifie que un pop up s'affiche\")\n    public void Je_v\u00e9rifie_que_un_pop_up_affiche() {\n        ficheActionDetailsPage.checkPupupViweisVisible();\n    }",
            "RealPage": "public void checkPupupViweisVisible() {\n        WebUI.verifyElementVisible(modalView, WAIT_Element_Check_Visible_Or_Not);\n\n    }"
        },
        {
            "Sc\u00e9nario": "je recherche le num\u00e9ro d'action d\u00e9taill\u00e9",
            "StepDef": "@When(\"je recherche le num\u00e9ro d'action d\u00e9taill\u00e9\")\n    public void je_recherche_le_num\u00e9ro_d_action_d\u00e9taill\u00e9() {\n        // Write code here that turns the phrase above into concrete actions\n        throw new io.cucumber.java.PendingException();\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "Je s\u00e9lectionne la source d'action simplifi\u00e9e",
            "StepDef": "@When(\"Je s\u00e9lectionne la source d'action simplifi\u00e9e\")\n    public void j_ajoute_une_source() {\n        ficheActionSimplifierPage.selectSourceAction(excelHelpers);\n\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "je choisis un Site",
            "StepDef": "@When(\"je choisis un Site\")\n    public void je_choisis_un_site() {\n        ficheActionSimplifierPage.selectSite(excelHelpers);\n\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "je choisis un Processus",
            "StepDef": "@When(\"je choisis un Processus\")\n    public void je_choisis_un_processus() {\n        ficheActionSimplifierPage.selectProcessus(excelHelpers);\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "je choisis une Activit\u00e9",
            "StepDef": "@When(\"je choisis une Activit\u00e9\")\n    public void je_choisis_une_activit\u00e9() {\n        ficheActionSimplifierPage.selectActivite(excelHelpers);\n\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "je choisis une Direction",
            "StepDef": "@When(\"je choisis une Direction\")\n    public void je_choisis_une_direction() {\n        ficheActionSimplifierPage.selectDirection(excelHelpers);\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "je choisis un Service",
            "StepDef": "@When(\"je choisis un Service\")\n    public void je_choisis_un_service() {\n        ficheActionSimplifierPage.selectService(excelHelpers);\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "je choisis un responsable de cl\u00f4ture simplifie",
            "StepDef": "@When(\"je choisis un responsable de cl\u00f4ture simplifie\")\n    public void choisir_un_responsable_de_cl\u00f4ture_simplifie() {\n        ficheActionSimplifierPage.selectResponsbaleCoture(excelHelpers);\n\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "je clique sur valider Action simplifi\u00e9e",
            "StepDef": "@Then(\"je clique sur valider Action simplifi\u00e9e\")\n    public void cliquer_sur_valider_action_simplifi\u00e9e() {\n        ficheActionSimplifierPage.valideSheetAction();\n    }",
            "RealPage": "public void valideSheetAction() {\n        //But to create a random action for clicking a button to validate the sheet,\n        // it should randomly choose between clicking the top button or the bottom button on\n        // the first clic\n        Random random = new Random();\n        int randomNumber = random.nextInt(2);\n        if (randomNumber == 0) {\n            WebUI.scrollToElementAtTop(bottonValiderAction);\n            WebUI.clickElementWithJs(bottonValiderAction);\n        }"
        },
        {
            "Sc\u00e9nario": "Je v\u00e9rifie que la Fiche Action est ajout\u00e9e",
            "StepDef": "@Then(\"Je v\u00e9rifie que la Fiche Action est ajout\u00e9e\")\n    public void la_fiche_action_est_ajout\u00e9e() {\n        ficheActionSimplifierPage.getNumeroFiche(excelHelpers);\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "Je clique sur le bouton Rechercher",
            "StepDef": "@When(\"Je clique sur le bouton Rechercher\")\n    public void je_clique_sur_le_bouton_rechercher() {\n        ficheActionSimplifierPage.searchActionSimplifier(excelHelpers);\n\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "j'acc\u00e8de \u00e0 une fiche action",
            "StepDef": "@When(\"j'acc\u00e8de \u00e0 une fiche action\")\n    public void j_acc\u00e8de_\u00e0_une_fiche_action() {\n        ficheActionSimplifierPage.consultSheetAction();\n\n    }",
            "RealPage": "public void consultSheetAction() {\n        WebUI.getWebElement(gridListAction).findElement(By.xpath(\"//*[@id=\\\"ctl00_ContentPlaceHolder1_GridView1P\\\"]/tbody/tr[2]/td[2]\")).findElement(By.tagName(\"a\")).click();\n        dateCreateAction = WebUI.getAttributeElement(dateCreationAction, \"value\");\n\n    }"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie que les modifications sont enregistr\u00e9e",
            "StepDef": "@Then(\"je v\u00e9rifie que les modifications sont enregistr\u00e9e\")\n    public void je_v\u00e9rifie_que_les_modifications_sont_enregistr\u00e9e() {\n        ficheActionSimplifierPage.checkmodifySheetAction(excelHelpers);\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "je filtre par des actions cl\u00f4tur\u00e9es",
            "StepDef": "@When(\"je filtre par des actions cl\u00f4tur\u00e9es\")\n    public void je_filtre_par_des_actions_cl\u00f4tur\u00e9es() {\n        ficheActionSimplifierPage.serachActionClosed();\n\n    }",
            "RealPage": "public void serachActionClosed() {\n        WebUI.clickElementWithJs(radioBottonActionClosed);\n        WebUI.clickElement(bottonSearchAction);\n\n    }"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie que la modification d'une fiche action cl\u00f4tur\u00e9e n'est pas possible",
            "StepDef": "@Then(\"je v\u00e9rifie que la modification d'une fiche action cl\u00f4tur\u00e9e n'est pas possible\")\n    public void je_v\u00e9rifie_que_la_modification_d_une_fiche_action_cl\u00f4tur\u00e9e_n_est_pas_possible() {\n        ficheActionSimplifierPage.sheetActionIsnotModifiable();\n\n    }",
            "RealPage": "public void sheetActionIsnotModifiable() {\n        WebUI.checkWebElmentDisabledWithJS(bottonValiderAction);\n        WebUI.scrollToElementAtTop(bottonBottomValiderAction);\n        String disabled = WebUI.getWebElement(bottonBottomValiderAction).getAttribute(\"disabled\");\n        WebUI.verifyContains(disabled, \"true\");\n\n    }"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie que le num\u00e9ro de la fiche action simplifi\u00e9e est affich\u00e9 en rouge",
            "StepDef": "@Then(\"je v\u00e9rifie que le num\u00e9ro de la fiche action simplifi\u00e9e est affich\u00e9 en rouge\")\n    public void je_v\u00e9rifie_que_le_num\u00e9ro_de_la_fiche_action_simplifi\u00e9e_est_affich\u00e9_en_rouge() {\n        ficheActionSimplifierPage.checkNumActionRed();\n\n    }",
            "RealPage": "public void checkNumActionRed() {\n\n        String actualColor = WebUI.getWebElement(gridListAction).findElement(By.xpath(\"//*[@id=\\\"ctl00_ContentPlaceHolder1_GridView1P\\\"]/tbody/tr[2]/td[2]\")).findElement(By.tagName(\"a\")).getCssValue(\"color\"); // R\u00e9cup\u00e8re la valeur RGBA\n        String expectedColor = \"rgba(255, 0, 0, 1)\";\n// Supprime les espaces des deux cha\u00eenes pour la comparaison\n        String actualColorNormalized = actualColor.replaceAll(\"\\\\s\", \"\");\n        String expectedColorNormalized = expectedColor.replaceAll(\"\\\\s\", \"\");\n// Comparaison des couleurs sans espaces\n        Assert.assertTrue(actualColorNormalized.contains(expectedColorNormalized),\n                \"Expected color: \" + expectedColor + \" but found: \" + actualColor);\n\n\n    }"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie que l'ajout du responsable de suivi",
            "StepDef": "@Then(\"je v\u00e9rifie que l'ajout du responsable de suivi\")\n    public void je_v\u00e9rifie_que_l_ajout_du_responsable_de_suivi() {\n        planActionPage.checkSelectRespoSuivi();\n\n    }",
            "RealPage": "public void checkSelectRespoSuivi() {\n        WebUI.verifyElementValueEquals(textFieldNameRespo, respoSuivi);\n\n\n    }"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie que l'ajout du responsable de suivi de la sous action",
            "StepDef": "@Then(\"je v\u00e9rifie que l'ajout du responsable de suivi de la sous action\")\n    public void je_v\u00e9rifie_que_l_ajout_du_responsable_de_suivi_de_la_sous_action() {\n        planActionPage.checkSelectMultiRespoSuivi();\n\n    }",
            "RealPage": "public void checkSelectMultiRespoSuivi() {\n        WebUI.verifyElementValueEquals(textFieldNameMultiRespoSuivi, respoSuivi);\n\n\n    }"
        },
        {
            "Sc\u00e9nario": "je clique sur boutton s\u00e9lectionner responsable de r\u00e9alisation",
            "StepDef": "@When(\"je clique sur boutton s\u00e9lectionner responsable de r\u00e9alisation\")\n    public void je_clique_sur_botton_s\u00e9lectionner_resposnable_de_r\u00e9alisation() {\n        planActionPage.openPopUpEmployeReal();\n    }",
            "RealPage": "public void openPopUpEmployeReal() {\n        WebUI.clickElement(bottonSelectRespoReal, WAIT_Element_Check_Visible_Or_Not);\n    }"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie que le pop up Liste des employ\u00e9s s'affiche",
            "StepDef": "@Then(\"je v\u00e9rifie que le pop up Liste des employ\u00e9s s'affiche\")\n    public void je_v\u00e9rifie_que_un_pop_up_liste_des_employ\u00e9s_s_affiche() {\n        planActionPage.checkEmployeRealIsDisplayed();\n\n    }",
            "RealPage": "public void checkEmployeRealIsDisplayed() {\n        WebUI.verifyElementVisible(gridEmployeReal, WAIT_Element_Check_Visible_Or_Not);\n    }"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie que l'ajout du responsable de r\u00e9alisation",
            "StepDef": "@Then(\"je v\u00e9rifie que l'ajout du responsable de r\u00e9alisation\")\n    public void je_v\u00e9rifie_que_l_ajout_du_responsable_de_r\u00e9alisation() {\n\n        planActionPage.checkRespoRealSelect();\n    }",
            "RealPage": "public void checkRespoRealSelect() {\n        WebUI.verifyElementValueEquals(textFieldSelectedRespoReal, respoReal);\n\n    }"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie que la Cat\u00e9gorie de cause est masque",
            "StepDef": "@Then(\"je v\u00e9rifie que la Cat\u00e9gorie de cause est masque\")\n    public void je_v\u00e9rifie_la_cat\u00e9gorie_de_cause_est_masque() {\n        ficheActionDetailsPage.checkCategorieCauseIsNotVisible();\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie que la Cat\u00e9gorie de cause est affich\u00e9e",
            "StepDef": "@Then(\"je v\u00e9rifie que la Cat\u00e9gorie de cause est affich\u00e9e\")\n    public void je_v\u00e9rifie_la_cat\u00e9gorie_de_cause_est_affich\u00e9e() {\n        ficheActionDetailsPage.checkCategorieCauseIsVisible();\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie que le champ Responsable de suivi affiche par d\u00e9faut le responsable hi\u00e9rarchique param\u00e9tr\u00e9 au niveau de la fiche de l'employ\u00e9",
            "StepDef": "@Then(\"je v\u00e9rifie que le champ Responsable de suivi affiche par d\u00e9faut le responsable hi\u00e9rarchique param\u00e9tr\u00e9 au niveau de la fiche de l'employ\u00e9\")\n    public void je_v\u00e9rifie_que_le_champ_responsable_de_suivi_affiche_par_d\u00e9faut_le_responsable_hi\u00e9rarchique_param\u00e9tr\u00e9_au_niveau_de_la_fiche_de_l_employ\u00e9() {\n        planActionPage.checkRespoRespoHerach(excelHelpers);\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "Je clique sur valider de sous action",
            "StepDef": "@Then(\"Je clique sur valider de sous action\")\n    public void je_clique_sur_valider_de_sous_action() {\n        planActionPage.clickToValidetActionPLan();\n    }",
            "RealPage": "public void clickToValidetActionPLan() {\n        WebUI.clickElement(bottonValidePlanAction);\n\n    }"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie que la sous-action est ajout\u00e9e avec succ\u00e8s",
            "StepDef": "@Then(\"je v\u00e9rifie que la sous-action est ajout\u00e9e avec succ\u00e8s\")\n    public void je_v\u00e9rifie_que_la_sous_action_est_ajout\u00e9e_avec_succ\u00e8s() {\n        planActionPage.checkPlanAction();\n    }",
            "RealPage": "public void checkPlanAction() {\n        String numSousAct = \"0\";\n        if (WebUI.isElementVisible(gridActionPlanWithOneRespo, WAIT_Element_Check_Visible_Or_Not)) {\n            numSousAct = WebUI.getWebElement(gridActionPlanWithOneRespo).findElement(By.xpath(\"//*[@id=\\\"ctl00_ContentPlaceHolder1_GridView5\\\"]/tbody/tr/td[3]\")).findElement(By.tagName(\"a\")).getText();\n        }"
        },
        {
            "Sc\u00e9nario": "je clique sur rattacher Sous-Action",
            "StepDef": "@Then(\"je clique sur rattacher Sous-Action\")\n    public void je_clique_sur_rattacher_sous_action() {\n        planActionPage.clickToAttachedActionPlan();\n    }",
            "RealPage": "public void clickToAttachedActionPlan() {\n        if (ONE_ESPO) {\n            WebUI.clickElementWithJs(bottonAttachedActionPlanWithOneRespo);\n        }"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie que la liste affiche seulements les sous actions m\u00e8res",
            "StepDef": "@Then(\"je v\u00e9rifie que la liste affiche seulements les sous actions m\u00e8res\")\n    public void je_v\u00e9rifie_que_la_liste_affiche_seulements_les_sous_actions_m\u00e8res() {\n        planActionPage.checkAttachedActionPlan(excelHelpers);\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie que les sous actions r\u00e9alis\u00e9es et suivies sont affich\u00e9es gris\u00e9es",
            "StepDef": "@Then(\"je v\u00e9rifie que les sous actions r\u00e9alis\u00e9es et suivies sont affich\u00e9es gris\u00e9es\")\n    public void je_v\u00e9rifie_que_les_sous_actions_r\u00e9alis\u00e9es_et_suivies_sont_affich\u00e9es_gris\u00e9es() {\n        planActionPage.checkDateRealAndDateFollowUpIsDisabled(excelHelpers);\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie que les d\u00e9lais de r\u00e9alisation et de suivi sont modifiables",
            "StepDef": "@Then(\"je v\u00e9rifie que les d\u00e9lais de r\u00e9alisation et de suivi sont modifiables\")\n    public void je_v\u00e9rifie_que_les_d\u00e9lais_de_r\u00e9alisation_et_de_suivi_sont_modifiables() {\n        planActionPage.checkDateRealAndDateFollowUpIsNotDisabled(excelHelpers);\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie le rattachement de la sous action",
            "StepDef": "@Then(\"je v\u00e9rifie le rattachement de la sous action\")\n    public void je_v\u00e9rifie_le_rattachement_de_la_sous_action() {\n        planActionPage.checkPanelAttachedIsAdd(excelHelpers);\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie que la de r\u00e9alisation doit \u00eatre inf\u00e9rieur \u00e0 la date de suivi",
            "StepDef": "@Then(\"je v\u00e9rifie que la de r\u00e9alisation doit \u00eatre inf\u00e9rieur \u00e0 la date de suivi\")\n    public void je_v\u00e9rifie_que_la_de_r\u00e9alisation_doit_\u00eatre_inf\u00e9rieur_\u00e0_la_date_de_suivi() {\n        planActionPage.checkDateRealSubActionAttached();\n    }",
            "RealPage": "public void checkDateRealSubActionAttached() {\n        WebUI.clickElement(checkActionPaln);\n        WebUI.clickElement(bottonValidAttachedActionPlan);\n        WebUI.verifyElementTextEquals(WebUI.getTextElement(labelMessageCheckDateRealAttached), \"Le d\u00e9lai de suivi doit \u00eatre sup\u00e9rieur au d\u00e9lai de r\u00e9alisation.\");\n    }"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie que la modification des responsables de r\u00e9alisation et de suivi n'est pas possible Un message s'affiche: Cette sous action est rattach\u00e9e de la sous action n\u00b0 x de l'action N\u00b0x",
            "StepDef": "@Then(\"je v\u00e9rifie que la modification des responsables de r\u00e9alisation et de suivi n'est pas possible Un message s'affiche: Cette sous action est rattach\u00e9e de la sous action n\u00b0 x de l'action N\u00b0x\")\n    public void je_v\u00e9rifie_que_la_modification_des_responsables_de_r\u00e9alisation_et_de_suivi_n_est_pas_possible_un_message_s_affiche_cette_sous_action_est_rattach\u00e9e_de_la_sous_action_n_x_de_l_action_n_x() {\n        planActionPage.checkDateRealAndDateFollowUpIsChangedAndMessageIsDisplyed(excelHelpers);\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie que la modification des responsables de r\u00e9alisation et de suivi n'est pas possible",
            "StepDef": "@Then(\"je v\u00e9rifie que la modification des responsables de r\u00e9alisation et de suivi n'est pas possible\")\n    public void je_v\u00e9rifie_que_la_modification_des_responsables_de_r\u00e9alisation_et_de_suivi_n_est_pas_possible() {\n        planActionPage.checkRespoRealAndRespoFollowUpIsNotChange();\n    }",
            "RealPage": "public void checkRespoRealAndRespoFollowUpIsNotChange() {\n        WebUI.verifyElementNotVisible(bottonSelectRespoReal, WAIT_Element_Check_Visible_Or_Not);\n        WebUI.verifyElementNotVisible(bottonSelectMultiRespo, WAIT_Element_Check_Visible_Or_Not);\n\n    }"
        },
        {
            "Sc\u00e9nario": "je clique sur Dupliquer du sous action",
            "StepDef": "@Then(\"je clique sur Dupliquer du sous action\")\n    public void je_clique_sur_dupliquer_du_sous_action() {\n        planActionPage.duplicationActionPlan();\n\n    }",
            "RealPage": "public void duplicationActionPlan() {\n        if (ONE_ESPO) {\n            WebUI.scrollToElementAtTop(gridActionPlanWithOneRespo);\n\n            WebUI.getWebElement(gridActionPlanWithOneRespo).findElement(By.xpath(\"//*[@id=\\\"ctl00_ContentPlaceHolder1_GridView5\\\"]/tbody/tr[1]/td[1]\")).findElement(By.tagName(\"input\")).click();\n            WebUI.scrollToElementAtTop(bottonDuplicationActionAttachedOneRespo);\n            WebUI.clickElementWithJs(bottonDuplicationActionAttachedOneRespo);\n\n        }"
        },
        {
            "Sc\u00e9nario": "je modifie la d\u00e9signation du sous action",
            "StepDef": "@Then(\"je modifie la d\u00e9signation du sous action\")\n    public void je_modifie_la_d\u00e9signation_du_sous_action() {\n        planActionPage.modifiyDesagntionActionPlan(excelHelpers);\n\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie que cr\u00e9ation de la sous action dupliqu\u00e9e",
            "StepDef": "@Then(\"je v\u00e9rifie que cr\u00e9ation de la sous action dupliqu\u00e9e\")\n    public void je_v\u00e9rifie_que_cr\u00e9ation_de_la_sous_action_dupliqu\u00e9e() {\n        planActionPage.checkAddActionDuplique();\n    }",
            "RealPage": "public void checkAddActionDuplique() {\n        WebUI.clickElement(bottonValidePlanAction);\n        String numActionPlan = \"\";\n        if (ONE_ESPO) {\n            numActionPlan = WebUI.getWebElement(gridActionPlanWithOneRespo).findElement(By.xpath(\"//*[@id=\\\"ctl00_ContentPlaceHolder1_GridView5\\\"]/tbody/tr[2]/td[3]\")).findElement(By.tagName(\"a\")).getText();\n\n\n        }"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie que le pop up Liste des actions s'affiche",
            "StepDef": "@Then(\"je v\u00e9rifie que le pop up Liste des actions s'affiche\")\n    public void je_v\u00e9rifie_que_le_pop_up_Liste_des_actions_s_affiche() {\n        planActionPage.checkPopupActionPlanIsDisplayed();\n    }",
            "RealPage": "public void checkPopupActionPlanIsDisplayed() {\n        WebUI.verifyElementVisible(gridAttachedActionPlan, WAIT_Element_Check_Visible_Or_Not);\n\n    }"
        },
        {
            "Sc\u00e9nario": "je clique sur Sous-Action",
            "StepDef": "@Then(\"je clique sur Sous-Action\")\n    public void je_clique_sur_Sous_Action() {\n        planActionPage.opensheetActionPlan();\n    }",
            "RealPage": "public void opensheetActionPlan() {\n        if (WebUI.isElementVisible(gridActionPlanWithOneRespo, WAIT_Element_Check_Visible_Or_Not)) {\n            WebUI.getWebElement(gridActionPlanWithOneRespo).findElement(By.xpath(\"//*[@id=\\\"ctl00_ContentPlaceHolder1_GridView5\\\"]/tbody/tr/td[3]\")).findElement(By.tagName(\"a\")).click();\n        }"
        },
        {
            "Sc\u00e9nario": "je modifie la d\u00e9signation de sous action",
            "StepDef": "@Then(\"je modifie la d\u00e9signation de sous action\")\n    public void je_modifie_la_d\u00e9signation_de_sous_action() {\n        planActionPage.enterDesaigntionActionPlan(excelHelpers);\n\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie que un champ motif de modification s'affiche dans sous action",
            "StepDef": "@Then(\"je v\u00e9rifie que un champ motif de modification s'affiche dans sous action\")\n    public void je_v\u00e9rifie_que_un_champ_motif_de_modification_s_affiche_dans_sous_action() {\n        planActionPage.checkMotifOfmodifySheetActionPlanIsDisplayed();\n    }",
            "RealPage": "public void checkMotifOfmodifySheetActionPlanIsDisplayed() {\n        WebUI.clickElement(bottonValidePlanAction);\n        WebUI.verifyElementVisible(textFieldModifyActionPlan, WAIT_Element_Check_Visible_Or_Not);\n    }"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie que le champ motif de modification est obligatoire",
            "StepDef": "@Then(\"je v\u00e9rifie que le champ motif de modification est obligatoire\")\n    public void je_v\u00e9rifie_que_le_champ_motif_de_modification_est_obligatoire() {\n        planActionPage.checkMotifOfmodifySheetActionPlanIsRequired();\n    }",
            "RealPage": "public void checkMotifOfmodifySheetActionPlanIsRequired() {\n        WebUI.clickElement(bottonValidePlanAction);\n        WebUI.verifyContains(WebUI.getTextElement(labelModifySheetActionPlan), \"*\");\n        WebUI.clickElement(bottonValidePlanAction);\n        String message = \"Champ obligatoire\";\n        WebUI.verifyElementTextEquals(WebUI.getWebElement(messageRequiredGravite).findElement(By.xpath(\"//*[@id=\\\"ctl00_ContentPlaceHolder1_ValidatorCalloutExtender53_popupTable\\\"]/tbody/tr[2]/td[3]\")).getText(), message);\n    }"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie que le champ motif de modification est non obligatoire",
            "StepDef": "@Then(\"je v\u00e9rifie que le champ motif de modification est non obligatoire\")\n    public void je_v\u00e9rifie_que_le_champ_motif_de_modification_est_non_obligatoire() {\n        planActionPage.checkMotifOfmodifySheetActionPlanIsNotRequired();\n    }",
            "RealPage": "public void checkMotifOfmodifySheetActionPlanIsNotRequired() {\n        WebUI.clickElement(bottonValidePlanAction);\n        WebUI.verifyContains(WebUI.getTextElement(labelModifySheetActionPlan), \"*\");\n        WebUI.clickElement(bottonValidePlanAction);\n        String message = \"Champ obligatoire\";\n        WebUI.verifyElementTextEquals(WebUI.getWebElement(messageRequiredGravite).findElement(By.xpath(\"//*[@id=\\\"ctl00_ContentPlaceHolder1_ValidatorCalloutExtender53_popupTable\\\"]/tbody/tr[2]/td[3]\")).getText(), message);\n    }"
        },
        {
            "Sc\u00e9nario": "je coche Sous-Action au niveau du panel'plan d'action'",
            "StepDef": "@When(\"je coche Sous-Action au niveau du panel'plan d'action'\")\n    public void je_coche_sous_action_au_niveau_du_panel_plan_d_action() {\n        planActionPage.checkedActionPlan();\n    }",
            "RealPage": "public void checkedActionPlan() {\n        if (WebUI.isElementVisible(gridActionPlanWithOneRespo, WAIT_Element_Check_Visible_Or_Not)) {\n            WebUI.getWebElement(gridActionPlanWithOneRespo).findElement(By.xpath(\"//*[@id=\\\"ctl00_ContentPlaceHolder1_GridView5\\\"]/tbody/tr/td[1]\")).findElement(By.tagName(\"input\")).click();\n        }"
        },
        {
            "Sc\u00e9nario": "je clique sur le bouton supprimer",
            "StepDef": "@When(\"je clique sur le bouton supprimer\")\n    public void je_clique_sur_le_bouton_supprimer() {\n        planActionPage.deleteActionPlan();\n    }",
            "RealPage": "public void deleteActionPlan() {\n        WebUI.clickElement(buttonDeleteActionPlan);\n        WebUI.acceptAlert();\n    }"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie que la sous action coch\u00e9e est supprim\u00e9e",
            "StepDef": "@Then(\"je v\u00e9rifie que la sous action coch\u00e9e est supprim\u00e9e\")\n    public void je_v\u00e9rifie_que_la_sous_action_coch\u00e9e_est_supprim\u00e9e() {\n        planActionPage.checkActionPlanIsDeleted();\n    }",
            "RealPage": "public void checkActionPlanIsDeleted() {\n        WebUI.verifyElementNotVisible(gridActionPlanWithOneRespo, WAIT_Element_Check_Visible_Or_Not);\n\n        WebUI.verifyElementNotVisible(gridActionPlanWithManyRespo, WAIT_Element_Check_Visible_Or_Not);\n\n    }"
        },
        {
            "Sc\u00e9nario": "J'ajoute une source d'action",
            "StepDef": "@Given(\"J'ajoute une source d'action\")\n    public void ajouter_source_d_action() {\n        sourcePage.addSource();\n    }",
            "RealPage": "public void addSource() {\n        WebUI.clickElement(bottonAddSource);\n    }"
        },
        {
            "Sc\u00e9nario": "je clique sur la source d'action",
            "StepDef": "@Given(\"je clique sur la source d'action\")\n    public void clique_source_d_action() {\n        sourcePage.validSource();\n\n    }",
            "RealPage": "public void validSource() {\n        WebUI.clickElement(bottonValiderSource);\n    }"
        },
        {
            "Sc\u00e9nario": "je clique sur ajouter type document",
            "StepDef": "@When(\"je clique sur ajouter type document\")\n    public void cliquer_sur_ajouter_type_document() {\n        typeDocumentPage.addTypeDoc();\n    }",
            "RealPage": "public void addTypeDoc() {\n        WebUI.clickElement(buttonAddTypeDocument);\n    }"
        },
        {
            "Sc\u00e9nario": "je saisis type document",
            "StepDef": "@Then(\"je saisis type document\")\n    public void je_saisis_type_document() {\n        typeDocumentPage.entreTypeOfDocument(excelHelpers);\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "je clique sur valider document",
            "StepDef": "@Then(\"je clique sur valider document\")\n    public void je_clique_sur_valider_document() {\n        typeDocumentPage.clickToValideDoc();\n\n    }",
            "RealPage": "public void clickToValideDoc() {\n        WebUI.clickElement(buttonValideTypeDoc);\n        WebUI.clickElementWithJs(panelListRespoValidation);\n    }"
        },
        {
            "Sc\u00e9nario": "Je v\u00e9rifie que le type de document a \u00e9t\u00e9 ajout\u00e9 avec succ\u00e8s",
            "StepDef": "@Then(\"Je v\u00e9rifie que le type de document a \u00e9t\u00e9 ajout\u00e9 avec succ\u00e8s\")\n    public void je_v\u00e9rifie_que_le_type_de_document_a_\u00e9t\u00e9_ajout\u00e9_avec_succ\u00e8s() {\n        typeDocumentPage.CheckCreationTypeDoc(excelHelpers);\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "J'ajoute des types d'action",
            "StepDef": "@Given(\"J'ajoute des types d'action\")\n    public void ajouter_types_d_action() {\n        typeActionPage.clicAddTypeAction();\n    }",
            "RealPage": "public void clicAddTypeAction() {\n        WebUI.clickElement(bottonAddTypeAction);\n    }"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie le type d'action simplifi\u00e9e",
            "StepDef": "@Then(\"je v\u00e9rifie le type d'action simplifi\u00e9e\")\n    public void je_v\u00e9rifie_le_type_d_action_simplifi\u00e9e() {\n        typeActionPage.checkAddTypeActionSimplifie(excelHelpers);\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "je clique sur ajouter type document",
            "StepDef": "@When(\"je clique sur ajouter type document\")\n    public void cliquer_sur_ajouter_type_document() {\n        typeDocumentPage.addTypeDoc();\n    }",
            "RealPage": "public void addTypeDoc() {\n        WebUI.clickElement(buttonAddTypeDocument);\n    }"
        },
        {
            "Sc\u00e9nario": "je saisis type document",
            "StepDef": "@Then(\"je saisis type document\")\n    public void je_saisis_type_document() {\n        typeDocumentPage.entreTypeOfDocument(excelHelpers);\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "je clique sur valider document",
            "StepDef": "@Then(\"je clique sur valider document\")\n    public void je_clique_sur_valider_document() {\n        typeDocumentPage.clickToValideDoc();\n\n    }",
            "RealPage": "public void clickToValideDoc() {\n        WebUI.clickElement(buttonValideTypeDoc);\n        WebUI.clickElementWithJs(panelListRespoValidation);\n    }"
        },
        {
            "Sc\u00e9nario": "Je v\u00e9rifie que le type de document a \u00e9t\u00e9 ajout\u00e9 avec succ\u00e8s",
            "StepDef": "@Then(\"Je v\u00e9rifie que le type de document a \u00e9t\u00e9 ajout\u00e9 avec succ\u00e8s\")\n    public void je_v\u00e9rifie_que_le_type_de_document_a_\u00e9t\u00e9_ajout\u00e9_avec_succ\u00e8s() {\n        typeDocumentPage.CheckCreationTypeDoc(excelHelpers);\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "je clique sur le bouton Envoyer au r\u00e9dacteur",
            "StepDef": "@When(\"je clique sur le bouton Envoyer au r\u00e9dacteur\")\n    public void je_clique_sur_le_bouton() {\n        circuitdevalidationpage.RedacteurSubmit();\n    }",
            "RealPage": "public void RedacteurSubmit() {\n\n        WebUI.clickElementWithJs(buttonRedacteur);\n\n\n    }"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie le document dans la section des documents en cours",
            "StepDef": "@Then(\"je v\u00e9rifie le document dans la section des documents en cours\")\n    public void je_v\u00e9rifie_le_document_dans_la_section_des_documents_en_cours() {\n        circuitdevalidationpage.verificationOfDoc(excelHelpers);\n\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie qu'apr\u00e8s avoir rempli tous les champs et valider, les panels D\u00e9tails,  Approbation, Diffusion et Liste des documents de renvoi sont affich\u00e9s",
            "StepDef": "@Then(\"je v\u00e9rifie qu'apr\u00e8s avoir rempli tous les champs et valider, les panels D\u00e9tails,  Approbation, Diffusion et Liste des documents de renvoi sont affich\u00e9s\")\n    public void je_v\u00e9rifie_qu_apr\u00e8s_avoir_rempli_tous_les_champs_et_valider_les_panels_d\u00e9tails_approbation_diffusion_et_liste_des_documents_de_renvoi_sont_affich\u00e9s() {\n        createAndModificationDetailsPage.checkPanelApprovalIsDisplayed();\n    }",
            "RealPage": "public void checkPanelApprovalIsDisplayed() {\n        WebUI.clickElement(panelApproval);\n        WebUI.verifyElementVisible(gridViewApprobateurs);\n        WebUI.verifyElementVisible(gridViewRedacteurs);\n        WebUI.verifyElementVisible(gridViewVerificateurs);\n\n    }"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifier qu'au niveau du panel D\u00e9tails, l'\u00e9tat du document est affich\u00e9 correctement",
            "StepDef": "@Then(\"je v\u00e9rifier qu'au niveau du panel D\u00e9tails, l'\u00e9tat du document est affich\u00e9 correctement\")\n    public void je_v\u00e9rifier_qu_au_niveau_du_panel_d\u00e9tails_l_\u00e9tat_du_document_est_affich\u00e9_correctement() {\n        createAndModificationDetailsPage.checkDetailsDoc();\n    }",
            "RealPage": "public void checkDetailsDoc() {\n        WebUI.clickElement(panelDetails);\n        String status = WebUI.getAttributeElement(inputStatusDoc, \"value\");\n        if (WebUI.getLang().equalsIgnoreCase(\"fr-FR\")) {\n            WebUI.verifyElementTextEquals(status, \"DOCUMENT EN COURS DE CREATION\");\n        }"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie qu'au niveau du panel D\u00e9tails, le champ Date document affiche la date de cr\u00e9ation du document",
            "StepDef": "@Then(\"je v\u00e9rifie qu'au niveau du panel D\u00e9tails, le champ Date document affiche la date de cr\u00e9ation du document\")\n    public void je_v\u00e9rifie_qu_au_niveau_du_panel_d\u00e9tails_le_champ_date_document_affiche_la_date_de_cr\u00e9ation_du_document() {\n        createAndModificationDetailsPage.checkDateDoc();\n    }",
            "RealPage": "public void checkDateDoc() {\n        WebUI.clickElement(panelDetails);\n        String date = WebUI.getAttributeElement(inputDateCreateDoc, \"value\");\n        if (WebUI.getLang().equalsIgnoreCase(\"fr-FR\")) {\n            LocalDate today = LocalDate.now();\n            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"dd/MM/YYYY\");\n            String dateToday = today.format(formatter);\n            WebUI.verifyContains(date, dateToday);\n        }"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie qu'au niveau du panel Approbation, la liste des responsables de validation est coh\u00e9rente avec la liste param\u00e9tr\u00e9e au niveau du type de document utilis\u00e9 lors de la cr\u00e9ation",
            "StepDef": "@Then(\"je v\u00e9rifie qu'au niveau du panel Approbation, la liste des responsables de validation est coh\u00e9rente avec la liste param\u00e9tr\u00e9e au niveau du type de document utilis\u00e9 lors de la cr\u00e9ation\")\n    public void je_v\u00e9rifie_qu_au_niveau_du_panel_approbation_la_liste_des_responsables_de_validation_est_coh\u00e9rente_avec_la_liste_param\u00e9tr\u00e9e_au_niveau_du_type_de_document_utilis\u00e9_lors_de_la_cr\u00e9ation() {\n        createAndModificationDetailsPage.checkListApprobation(excelHelpers);\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie que l'ajout d'un r\u00e9dacteur n'est pas obligatoire au  niveau de liste des responsables de validation",
            "StepDef": "@Then(\"je v\u00e9rifie que l'ajout d'un r\u00e9dacteur n'est pas obligatoire au  niveau de liste des responsables de validation\")\n    public void je_v\u00e9rifie_que_l_ajout_d_un_r\u00e9dacteur_n_est_pas_obligatoire_au_niveau_de_liste_des_responsables_de_validation() {\n        createAndModificationDetailsPage.checkRedacteurIsNotRequired();\n    }",
            "RealPage": "public void checkRedacteurIsNotRequired() {\n        WebUI.clickElement(panelApprobateur);\n        WebUI.clickElement(checkBoxRedcateurGrid);\n        WebUI.clickElement(buttonDeleteRedact);\n        WebUI.acceptAlert();\n        WebUI.verifyElementNotVisible(gridViewRedacteursPanelApprobation, FrameworkConstants.WAIT_Element_Check_Visible_Or_Not);\n\n    }"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie qu'au niveau du panel Diffusion, la liste de diffusion externe s'affiche",
            "StepDef": "@Then(\"je v\u00e9rifie qu'au niveau du panel Diffusion, la liste de diffusion externe s'affiche\")\n    public void je_v\u00e9rifie_qu_au_niveau_du_panel_diffusion_la_liste_de_diffusion_externe_s_affiche() {\n        createAndModificationDetailsPage.checkElem();\n    }",
            "RealPage": "public void checkElem() {\n        WebUI.clickJs(\"ctl00_ContentPlaceHolder1_Label62\");\n        WebUI.clickElement(buttonAddExt);\n        WebUI.setText(inputEmpExt, DataGenerateUtils.randomFullName());\n        WebUI.setText(inputEmailExt, DataGenerateUtils.randomEmail());\n        WebUI.clickElement(buttonValidEmpExt);\n        WebUI.verifyElementVisible(idGridExt, FrameworkConstants.WAIT_Element_Check_Visible_Or_Not);\n    }"
        },
        {
            "Sc\u00e9nario": "je clique sur le bouton Doc.externe au niveau du panel Liste des documents de renvoi",
            "StepDef": "@When(\"je clique sur le bouton Doc.externe au niveau du panel Liste des documents de renvoi\")\n    public void je_clique_sur_le_bouton_doc_externe_au_niveau_du_panel_liste_des_documents_de_renvoi() {\n        createAndModificationDetailsPage.clickToExternalDocument();\n    }",
            "RealPage": "public void clickToExternalDocument() {\n        WebUI.clickJs(\"ctl00_ContentPlaceHolder1_Label132\");\n        WebUI.clickElement(buttonDocExternal);\n    }"
        },
        {
            "Sc\u00e9nario": "je coche un document externe au niveau du panel Liste des documents de renvoi",
            "StepDef": "@When(\"je coche un document externe au niveau du panel Liste des documents de renvoi\")\n    public void je_coche_un_document_externe_au_niveau_du_panel_liste_des_documents_de_renvoi() {\n        createAndModificationDetailsPage.checkExternalDocument();\n    }",
            "RealPage": "public void checkExternalDocument() {\n        WebUI.clickElement(checkBoxDocExternalInGrid);\n        codeDoc = WebUI.getTextElement(codeDocExternalInGrid);\n\n    }"
        },
        {
            "Sc\u00e9nario": "je clique sur valider au niveau du panel Liste des documents de renvoi",
            "StepDef": "@When(\"je clique sur valider au niveau du panel Liste des documents de renvoi\")\n    public void je_clique_sur_valider_au_niveau_du_panel_liste_des_documents_de_renvoi() {\n        createAndModificationDetailsPage.clickToValidDocExternal();\n    }",
            "RealPage": "public void clickToValidDocExternal() {\n        WebUI.clickElement(buttonValidDocExternal);\n    }"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie que le rattachement est possible document externe",
            "StepDef": "@Then(\"je v\u00e9rifie que le rattachement est possible document externe\")\n    public void je_v\u00e9rifie_que_le_rattachement_est_possible_document_externe() {\n        createAndModificationDetailsPage.chekDocIsInsertDocExternal();\n\n    }",
            "RealPage": "public void chekDocIsInsertDocExternal() {\n        WebUI.setText(inputSearchDoc, codeDoc);\n        WebUI.verifyElementText(codeDocGrid, codeDoc);\n    }"
        },
        {
            "Sc\u00e9nario": "je clique sur le bouton Doc.En cours au niveau du panel Liste des documents de renvoi",
            "StepDef": "@When(\"je clique sur le bouton Doc.En cours au niveau du panel Liste des documents de renvoi\")\n    public void je_clique_sur_le_bouton_doc_en_cours_au_niveau_du_panel_liste_des_documents_de_renvoi() {\n        createAndModificationDetailsPage.clickToOnGoingDocument();\n    }",
            "RealPage": "public void clickToOnGoingDocument() {\n        WebUI.clickElement(buttonDocOnGoing);\n    }"
        },
        {
            "Sc\u00e9nario": "je coche un document en cours et le valide",
            "StepDef": "@When(\"je coche un document en cours et le valide\")\n    public void je_coche_un_document_en_cours_et_le_valide() {\n        createAndModificationDetailsPage.checkOnGoingDocument();\n\n    }",
            "RealPage": "public void checkOnGoingDocument() {\n        WebUI.clickElement(checkBoxDocOnGoingInGrid);\n        codeDoc = WebUI.getTextElement(codeDocOnGoingInGrid);\n    }"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie que le rattachement est possible document en cours",
            "StepDef": "@Then(\"je v\u00e9rifie que le rattachement est possible document en cours\")\n    public void je_v\u00e9rifie_que_le_rattachement_est_possible_document_en_cours() {\n        createAndModificationDetailsPage.chekDocIsInsertDocOnGoing();\n\n\n    }",
            "RealPage": "public void chekDocIsInsertDocOnGoing() {\n        WebUI.clickElement(buttonValidDocOngoing);\n        WebUI.setText(inputSearchDoc, codeDoc);\n        WebUI.verifyElementText(codeDocGrid, codeDoc);\n    }"
        },
        {
            "Sc\u00e9nario": "je clique sur le bouton Doc.En vigueur au niveau du panel Liste des documents de renvoi",
            "StepDef": "@When(\"je clique sur le bouton Doc.En vigueur au niveau du panel Liste des documents de renvoi\")\n    public void je_clique_sur_le_bouton_doc_en_vigueur_au_niveau_du_panel_liste_des_documents_de_renvoi() {\n        createAndModificationDetailsPage.clickToInternal();\n    }",
            "RealPage": "public void clickToInternal() {\n        WebUI.clickElement(buttonAddInternal);\n    }"
        },
        {
            "Sc\u00e9nario": "je cocher un document en vigueur et le valide",
            "StepDef": "@When(\"je cocher un document en vigueur et le valide\")\n    public void je_cocher_un_document_en_vigueur_et_le_valide() {\n        createAndModificationDetailsPage.checkInternalDoc();\n    }",
            "RealPage": "public void checkInternalDoc() {\n        WebUI.clickElement(checkBoxDocInternalInGrid);\n        codeDoc = WebUI.getTextElement(codeDocIntarnalGrid);\n    }"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie que le rattachement est possible document en vigueur",
            "StepDef": "@Then(\"je v\u00e9rifie que le rattachement est possible document en vigueur\")\n    public void je_v\u00e9rifie_que_le_rattachement_est_possible_document_en_vigueur() {\n        createAndModificationDetailsPage.chekDocIsInsertDocInternal();\n\n    }",
            "RealPage": "public void chekDocIsInsertDocInternal() {\n        WebUI.clickElement(buttonValidInternal);\n        WebUI.setText(inputSearchDoc, codeDoc);\n        WebUI.verifyElementText(codeDocGrid, codeDoc);\n    }"
        },
        {
            "Sc\u00e9nario": "je clique sur Rechercher et r\u00e9cup\u00e8re le nombre total de documents en cours",
            "StepDef": "@Then(\"je clique sur Rechercher et r\u00e9cup\u00e8re le nombre total de documents en cours\")\n    public void je_clique_sur_Rechercher_et_r\u00e9cup\u00e8re_le_nombre_total_de_documents_en_cours() {\n        createAndModificationDetailsPage.serachAndGet();\n\n    }",
            "RealPage": "public void serachAndGet() {\n        WebUI.clickElement(buttonSearchDoc);\n        numberOfDocOngoing = Utils.getTotaleNumberOfGrid(\"ctl00_ContentPlaceHolder1_GridView1\");\n    }"
        },
        {
            "Sc\u00e9nario": "je verifie qu'au niveau du panel Liste des documents de renvoi lorsque l'utilisateur veut rattacher un docuement en cours la liste des documents affich\u00e9e correspond seulement aux documents en cours du superviseur",
            "StepDef": "@Then(\"je verifie qu'au niveau du panel Liste des documents de renvoi lorsque l'utilisateur veut rattacher un docuement en cours la liste des documents affich\u00e9e correspond seulement aux documents en cours du superviseur\")\n    public void je_verifie_qu_au_niveau_du_panel_liste_des_documents_de_renvoi_lorsque_l_utilisateur_veut_rattacher_un_docuement_en_cours_la_liste_des_documents_affich\u00e9e_correspond_seulement_aux_documents_en_cours_du_superviseur() {\n        createAndModificationDetailsPage.checkdocOngoing();\n    }",
            "RealPage": "public void checkdocOngoing() {\n        WebUI.clickJs(\"ctl00_ContentPlaceHolder1_Label132\");\n        clickToOnGoingDocument();\n        String numberOfDoc = Utils.getTotaleNumberOfGrid(\"ctl00_ContentPlaceHolder1_GridView6\");\n        WebUI.verifyElementTextEquals(numberOfDoc, numberOfDocOngoing);\n\n    }"
        },
        {
            "Sc\u00e9nario": "je clique sur le bouton ajouter document",
            "StepDef": "@When(\"je clique sur le bouton ajouter document\")\n    public void je_clique_sur_le_bouton_ajouter_document() {\n        createAndModificationPage.clickAddDocument();\n\n    }",
            "RealPage": "public void clickAddDocument() {\n        WebUI.clickElement(buttonAddDoc);\n    }"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie l'acc\u00e8s sur la liste d\u00e9roulante Type de document selon param\u00e9trage la liste affiche les types de document au niveau desquels cet employ\u00e9 est superviseur",
            "StepDef": "@Then(\"je v\u00e9rifie l'acc\u00e8s sur la liste d\u00e9roulante Type de document selon param\u00e9trage la liste affiche les types de document au niveau desquels cet employ\u00e9 est superviseur\")\n    public void je_v\u00e9rifie_l_acc\u00e8s_sur_la_liste_d\u00e9roulante_type_de_document_selon_param\u00e9trage_la_liste_affiche_les_types_de_document_au_niveau_desquels_cet_employ\u00e9_est_superviseur() {\n        createAndModificationPage.chekTypeDocSyperviseur(excelHelpers);\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie l'acc\u00e8s sur la liste d\u00e9roulante Type de document selon param\u00e9trage la liste affiche les types de document au niveau desquels cet employ\u00e9 n'est pas superviseur",
            "StepDef": "@Then(\"je v\u00e9rifie l'acc\u00e8s sur la liste d\u00e9roulante Type de document selon param\u00e9trage la liste affiche les types de document au niveau desquels cet employ\u00e9 n'est pas superviseur\")\n    public void je_v\u00e9rifie_l_acc\u00e8s_sur_la_liste_d\u00e9roulante_type_de_document_selon_param\u00e9trage_la_liste_affiche_les_types_de_document_au_niveau_desquels_cet_employ\u00e9_n_est_pas_superviseur() {\n        createAndModificationPage.chekTypeDocNotSyperviseur(excelHelpers);\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "je s\u00e9lectionne type de document",
            "StepDef": "@When(\"je s\u00e9lectionne type de document\")\n    public void je_s\u00e9lectionne_type_de_document() {\n        createAndModificationPage.selectTypeDoc(excelHelpers);\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "je saisis code de document",
            "StepDef": "@When(\"je saisis code de document\")\n    public void je_saisis_code_de_document() {\n        createAndModificationPage.codeTypeDoc(excelHelpers);\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "Je s\u00e9lectionne Importance",
            "StepDef": "@When(\"Je s\u00e9lectionne Importance\")\n    public void je_s\u00e9lectionne_importance() {\n\n        createAndModificationPage.selectImportance();\n    }",
            "RealPage": "public void selectImportance(){\n\n        if (WebUI.isElementVisible(importance,FrameworkConstants.WAIT_Element_Check_Visible_Or_Not)){\n          int sizeImp = WebUI.getOptionsText(importance).size();\n            if (sizeImp>0) {\n            WebUI.selectOptionByIndex(importance,DataGenerateUtils.randomNumberIntFromTo(1,sizeImp-1));\n\n    }"
        },
        {
            "Sc\u00e9nario": "Je saisis le code du document existant",
            "StepDef": "@When(\"Je saisis le code du document existant\")\n    public void Je_saisis_le_code_du_document_existant() {\n        createAndModificationPage.enterCodeDocExsist();\n    }",
            "RealPage": "public void enterCodeDocExsist() {\n        WebUI.setText(inputCodeDocument, codeOfDocument);\n        langCookies = WebUI.getLang();\n    }"
        },
        {
            "Sc\u00e9nario": "je saisis Dur\u00e9e de validit\u00e9 du document",
            "StepDef": "@When(\"je saisis Dur\u00e9e de validit\u00e9 du document\")\n    public void je_saisis_dur\u00e9e_de_validit\u00e9_du_document() {\n        createAndModificationPage.enterDuration();\n    }",
            "RealPage": "public void enterDuration() {\n        WebUI.setText(inputDureeValiditeDoc, String.valueOf(DataGenerateUtils.randomNumberIntFromTo(1, 12)));\n    }"
        },
        {
            "Sc\u00e9nario": "je saisis Libell\u00e9 de document",
            "StepDef": "@When(\"je saisis Libell\u00e9 de document\")\n    public void je_saisis_libell\u00e9_de_document() {\n        createAndModificationPage.enterLibel(excelHelpers);\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "je  saisis Motif de MAJ de document",
            "StepDef": "@When(\"je  saisis Motif de MAJ de document\")\n    public void je_saisis_motif_de_maj_de_document() {\n        createAndModificationPage.enterModtif();\n    }",
            "RealPage": "public void enterModtif() {\n        String motif = DataGenerateUtils.randomParaghe();\n        WebUI.setText(textareaMotifMAJ, motif);\n    }"
        },
        {
            "Sc\u00e9nario": "je coche Document important",
            "StepDef": "@When(\"je coche Document important\")\n    public void je_coche_document_important() {\n        createAndModificationPage.clickToCheckboxDocumentImportant();\n    }",
            "RealPage": "public void clickToCheckboxDocumentImportant() {\n        WebUI.clickElement(checkboxDocumentImportant);\n    }"
        },
        {
            "Sc\u00e9nario": "je choisi le Site de document",
            "StepDef": "@When(\"je choisi le Site de document\")\n    public void je_choisi_le_site_de_document() {\n        createAndModificationPage.selectSite();\n\n    }",
            "RealPage": "public void selectSite() {\n        Utils.domaineAffectation(selectSite, \"Documentation\", FrameworkConstants.row, 9);\n    }"
        },
        {
            "Sc\u00e9nario": "je choisi le Processus de document",
            "StepDef": "@When(\"je choisi le Processus de document\")\n    public void je_choisi_le_processus_de_document() {\n        createAndModificationPage.selectProcessus();\n\n    }",
            "RealPage": "public void selectProcessus() {\n        Utils.domaineAffectation(selectProcessus, \"Documentation\", FrameworkConstants.row, 10);\n    }"
        },
        {
            "Sc\u00e9nario": "je choisi le Activit\u00e9 de document",
            "StepDef": "@When(\"je choisi le Activit\u00e9 de document\")\n    public void je_choisi_le_activit\u00e9_de_document() {\n        createAndModificationPage.selectActivite();\n\n    }",
            "RealPage": "public void selectActivite() {\n        Utils.domaineAffectation(selectDomaine, \"Documentation\", FrameworkConstants.row, 11);\n    }"
        },
        {
            "Sc\u00e9nario": "je choisi le Direction de document",
            "StepDef": "@When(\"je choisi le Direction de document\")\n    public void je_choisi_le_direction_de_document() {\n        createAndModificationPage.selectDirection();\n    }",
            "RealPage": "public void selectDirection() {\n        Utils.domaineAffectation(selectDirection, \"Documentation\", FrameworkConstants.row, 12);\n    }"
        },
        {
            "Sc\u00e9nario": "je saisis Mot cl\u00e9 sp\u00e9cifique",
            "StepDef": "@When(\"je saisis Mot cl\u00e9 sp\u00e9cifique\")\n    public void je_saisis_mot_cl\u00e9_sp\u00e9cifique() {\n        createAndModificationPage.wordSpecifique();\n    }",
            "RealPage": "public void wordSpecifique() {\n        WebUI.setText(inputWordSpecifique, DataGenerateUtils.randomString(10));\n    }"
        },
        {
            "Sc\u00e9nario": "je clique sur valider de creation de docuemnt",
            "StepDef": "@When(\"je clique sur valider de creation de docuemnt\")\n    public void je_clique_sur_valider_de_creation_de_docuemnt() {\n        createAndModificationPage.clickToValideDocument();\n        createAndModificationPage.getCodeDoc(excelHelpers);\n    }",
            "RealPage": "public void clickToValideDocument() {\n        WebUI.scrollToElementAtTop(buttonValideDoc);\n        WebUI.clickElementWithJs(buttonValideDoc);\n\n    }"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie la cr\u00e9ation de document",
            "StepDef": "@When(\"je v\u00e9rifie la cr\u00e9ation de document\")\n    public void je_v\u00e9rifie_la_cr\u00e9ation_de_document() {\n        createAndModificationPage.checkDocIsCreated(excelHelpers);\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "Je v\u00e9rfie que, lors de la cr\u00e9ation d'un document, la s\u00e9lection d'un type de document avec une visibilit\u00e9 restreinte \\\\(non visible par tout le monde) La dur\u00e9e de validit\u00e9 du document peut \u00eatre chang\u00e9e \\\\(en mois) et la visibilit\u00e9 du document peut \u00eatre modifi\u00e9e",
            "StepDef": "@Then(\"Je v\u00e9rfie que, lors de la cr\u00e9ation d'un document, la s\u00e9lection d'un type de document avec une visibilit\u00e9 restreinte \\\\(non visible par tout le monde) La dur\u00e9e de validit\u00e9 du document peut \u00eatre chang\u00e9e \\\\(en mois) et la visibilit\u00e9 du document peut \u00eatre modifi\u00e9e\")\n    public void je_v\u00e9rfie_que_lors_de_la_cr\u00e9ation_d_un_document_la_s\u00e9lection_d_un_type_de_document_avec_une_visibilit\u00e9_restreinte_non_visible_par_tout_le_monde_la_dur\u00e9e_de_validit\u00e9_du_document_peut_\u00eatre_chang\u00e9e_en_mois_et_la_visibilit\u00e9_du_document_peut_\u00eatre_modifi\u00e9e() {\n        createAndModificationPage.checkDurationAndVisibleIsModifaible();\n    }",
            "RealPage": "public void checkDurationAndVisibleIsModifaible() {\n        WebUI.checkWebElmentIsNotDisabled(inputDureeValiditeDoc);\n        WebUI.checkWebElmentIsNotDisabled(radioButtonVisibleAll);\n\n    }"
        },
        {
            "Sc\u00e9nario": "Je v\u00e9rfie que lorsqu'on s\u00e9lectionne un type de document \u00e0 utiliser lors de la cr\u00e9ation d'un document avec l'option visible par tout le monde, le changement de la visibilit\u00e9 n'est pas possible",
            "StepDef": "@Then(\"Je v\u00e9rfie que lorsqu'on s\u00e9lectionne un type de document \u00e0 utiliser lors de la cr\u00e9ation d'un document avec l'option visible par tout le monde, le changement de la visibilit\u00e9 n'est pas possible\")\n    public void Je_v\u00e9rfie_que_lorsqu_on_s\u00e9lectionne_un_type_de_document_utiliser_lors_de_la_cr\u00e9ation_un_document_avec_option_visible_par_tout_le_monde_le_changement_de_la_visibilit\u00e9_n_est_pas_possible() {\n        createAndModificationPage.checkDurationAndVisibleIsNOtModifaible();\n    }",
            "RealPage": "public void checkDurationAndVisibleIsNOtModifaible() {\n        Assert.assertTrue(WebUI.getAttributeElement(radioButtonVisibleAll, \"disabled\").equalsIgnoreCase(\"disabled\") || WebUI.getAttributeElement(radioButtonVisibleAll, \"disabled\").equalsIgnoreCase(\"true\"), \"radio button of Document visible to everyone is not disabled  \");\n        Assert.assertTrue(WebUI.getAttributeElement(inputDureeValiditeDoc, \"disabled\").equalsIgnoreCase(\"disabled\") || WebUI.getAttributeElement(inputDureeValiditeDoc, \"disabled\").equalsIgnoreCase(\"true\"), \"Validity period of the document is not disabled  \");\n    }"
        },
        {
            "Sc\u00e9nario": "Je v\u00e9rfie que lorsqu'on change la visibilit\u00e9 du document, le fichier lien doit \u00eatre rattach\u00e9 de nouveau",
            "StepDef": "@Then(\"Je v\u00e9rfie que lorsqu'on change la visibilit\u00e9 du document, le fichier lien doit \u00eatre rattach\u00e9 de nouveau\")\n    public void je_v\u00e9rfie_que_lorsqu_on_change_la_visibilit\u00e9_du_document_le_fichier_lien_doit_\u00eatre_rattach\u00e9_de_nouveau() {\n        createAndModificationPage.checkFileIsEmpty();\n    }",
            "RealPage": "public void checkFileIsEmpty() {\n        String file = WebUI.getAttributeElement(inputTypeFile, \"value\");\n        Assert.assertSame(\"\", file, \"input type file is not empty\");\n    }"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie que lorsqu'on utilise un type de document avec codification manuelle le code document est unique",
            "StepDef": "@Then(\"je v\u00e9rifie que lorsqu'on utilise un type de document avec codification manuelle le code document est unique\")\n    public void je_v\u00e9rifie_que_lorsqu_on_utilise_un_type_de_document_avec_codification_manuelle_le_code_document_est_unique() {\n        createAndModificationPage.checkMessageExsist();\n    }",
            "RealPage": "public void checkMessageExsist() {\n        String message = WebUI.getTextAlert();\n        if (langCookies.equalsIgnoreCase(\"fr-FR\")) {\n            WebUI.verifyElementTextEquals(message, \"Le Code du document existe d\u00e9j\u00e0.\");\n        }"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie qu'une fois le document est cr\u00e9e et lorsque le type document utilis\u00e9 avec codification manuelle le changement du type de document est possible",
            "StepDef": "@Then(\"je v\u00e9rifie qu'une fois le document est cr\u00e9e et lorsque le type document utilis\u00e9 avec codification manuelle le changement du type de document est possible\")\n    public void je_v\u00e9rifie_qu_une_fois_le_document_est_cr\u00e9e_et_lorsque_le_type_document_utilis\u00e9_avec_codification_manuelle_le_changement_du_type_de_document_est_possible() {\n        typeDocumentPage.verifCodeDocManuel();\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "je consulte le param\u00e9trage des champs \u00e0 masquer",
            "StepDef": "@When(\"je consulte le param\u00e9trage des champs \u00e0 masquer\")\n    public void je_consulte_le_param\u00e9trage_des_champs_\u00e0_masquer() {\n        parametragePage.openSettingFieldsHide();\n\n    }",
            "RealPage": "public void openSettingFieldsHide() {\n        WebUI.scrollToElementAtTop(bottonSettingFieldsHide);\n        WebUI.clickElementWithJs(bottonSettingFieldsHide);\n        // WebUI.clickElement(bottonSettingFieldsHide);\n    }"
        },
        {
            "Sc\u00e9nario": "je consulte le Param\u00e9trage des champs obligatoires",
            "StepDef": "@When(\"je consulte le Param\u00e9trage des champs obligatoires\")\n    public void je_consulte_le_param\u00e9trage_des_champs_obligatoires() {\n        parametragePage.goToSettingRequired();\n\n    }",
            "RealPage": "public void goToSettingRequired() {\n\n        WebUI.clickElement(bottonObligatoire);\n    }"
        },
        {
            "Sc\u00e9nario": "je clique sur valider la param\u00e9trage de champ obligatoire",
            "StepDef": "@When(\"je clique sur valider la param\u00e9trage de champ obligatoire\")\n    public void je_clque_sur_valider_la_param\u00e9trage_de_champ_obligatoire() {\n        parametragePage.validetRequired();\n    }",
            "RealPage": "public void validetRequired() {\n        WebUI.clickElement(bottonValiderRequired);\n    }"
        },
        {
            "Sc\u00e9nario": "Je clique sur Param\u00e9trage action",
            "StepDef": "@Given(\"Je clique sur Param\u00e9trage action\")\n    public void je_clique_sur_param\u00e9trage_action() {\n        parametragePage.openSettingAction();\n    }",
            "RealPage": "public void openSettingAction() {\n        WebUI.clickElementWithJs(bottonParamAction);\n    }"
        },
        {
            "Sc\u00e9nario": "je clique sur  valider le Param\u00e9trage de module action",
            "StepDef": "@Then(\"je clique sur  valider le Param\u00e9trage de module action\")\n    public void je_clique_sur_valider_le_param\u00e9trage_de_module_action() {\n        parametragePage.valideSttingAction();\n    }",
            "RealPage": "public void valideSttingAction() {\n        WebUI.clickElement(bottonValideSettingAction);\n    }"
        },
        {
            "Sc\u00e9nario": "Je s\u00e9lectionne les d\u00e9cideurs des demandes de modifications",
            "StepDef": "@Then(\"Je s\u00e9lectionne les d\u00e9cideurs des demandes de modifications\")\n    public void Je_s\u00e9lectionne_les_d\u00e9cideurs_des_demandes_de_modifications() {\n        parametragePage.selectAllDecideur();\n    }",
            "RealPage": "public void selectAllDecideur() {\n        if (!WebUI.getWebElement(radiobottonHiearchique).isSelected()) {\n            WebUI.clickElement(radiobottonHiearchique);\n        }"
        },
        {
            "Sc\u00e9nario": "je consulte la documentation du param\u00e9trage",
            "StepDef": "@When(\"je consulte la documentation du param\u00e9trage\")\n    public void je_consulte_la_documentation_du_param\u00e9trage() {\n        parametragePage.consultparamDoc();\n\n    }",
            "RealPage": "public void consultparamDoc(){\n        WebUI.clickElement(buttonParametrageDocumentation);\n    }"
        },
        {
            "Sc\u00e9nario": "J'ouvre le site QualiProWeb",
            "StepDef": "@Given(\"J'ouvre le site QualiProWeb\")\n    public void j_ouvre_le_site_quali_pro_web() {\n        excelHelpers.setExcelFile(EXCEL_DATA_FILE_PATH, \"Input\");\n        String url = excelHelpers.getCellData(1, 0);\n        WebUI.openWebsite(url);\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "je v\u00e9rifie la connexion",
            "StepDef": "@Then(\"je v\u00e9rifie la connexion\")\n    public void je_v\u00e9rifie_la_connexion() {\n        homePage.verifyDashboardPageDisplays();\n    }",
            "RealPage": "Fonction non trouv\u00e9e"
        },
        {
            "Sc\u00e9nario": "je d\u00e9connecte la session",
            "StepDef": "@When(\"je d\u00e9connecte la session\")\n    public void je_d\u00e9connecte_la_session() {\n        loginPage.logOut();\n    }",
            "RealPage": "public void logOut() {\n        WebUI.clickElementWithJs(imageUser);\n        WebUI.clickElementWithJs(bottonLogOut);\n\n    }"
        },
        {
            "Sc\u00e9nario": "j'acc\u00e8de \u00e0 l'administration",
            "StepDef": "@When(\"j'acc\u00e8de \u00e0 l'administration\")\n    public void j_acc\u00e8de_\u00e0_l_administration() {\n        droitAcessPage.goToadministration();\n\n    }",
            "RealPage": "public void goToadministration() {\n        WebUI.moveToElement(dropDownPrametrage);\n        WebUI.clickElement(buttonAdministrateur);\n    }"
        },
        {
            "Sc\u00e9nario": "je clique sur Gestion des droits d'acc\u00e8s",
            "StepDef": "@When(\"je clique sur Gestion des droits d'acc\u00e8s\")\n    public void je_clique_sur_gestion_des_droits_d_acc\u00e8s() {\n        droitAcessPage.cliqueDroits();\n\n    }",
            "RealPage": "public void cliqueDroits() {\n        WebUI.clickElement(buttonGestionDroitAcces);\n    }"
        }
    ],
    "WebUI": [
        {
            "Method Name": "getSoftAssert",
            "Method Source": "public static SoftAssert getSoftAssert() {\n        return softAssert;\n    }"
        },
        {
            "Method Name": "stopSoftAssertAll",
            "Method Source": "public static void stopSoftAssertAll() {\n        softAssert.assertAll();\n    }"
        },
        {
            "Method Name": "getPathDownloadDirectory",
            "Method Source": "public static String getPathDownloadDirectory() {\n        String path = \"\";\n        String machine_name = System.getProperty(\"user.home\");\n        path = machine_name + File.separator + \"Downloads\";\n        return path;\n    }"
        },
        {
            "Method Name": "verifyFileDownloadedWithJS_Equals",
            "Method Source": "public static boolean verifyFileDownloadedWithJS_Equals(String fileName) {\n        openWebsite(\"chrome://downloads\");\n        sleep(3);\n        JavascriptExecutor js = (JavascriptExecutor) DriverManager.getDriver();\n        String element = (String) js.executeScript(\"return document.querySelector('downloads-manager').shadowRoot.querySelector('#downloadsList downloads-item').shadowRoot.querySelector('#show').getAttribute('title')\");\n        File file = new File(element);\n        LogUtils.info(element);\n        LogUtils.info(file.getName());\n        return file.exists() && file.getName().trim().equals(fileName);\n    }"
        },
        {
            "Method Name": "verifyFileDownloadedWithJS_Contains",
            "Method Source": "public static boolean verifyFileDownloadedWithJS_Contains(String fileName) {\n        openWebsite(\"chrome://downloads\");\n        sleep(3);\n        JavascriptExecutor js = (JavascriptExecutor) DriverManager.getDriver();\n        String element = (String) js.executeScript(\"return document.querySelector('downloads-manager').shadowRoot.querySelector('#downloadsList downloads-item').shadowRoot.querySelector('#show').getAttribute('title')\");\n        File file = new File(element);\n        LogUtils.info(element);\n        LogUtils.info(file.getName());\n        return file.exists() && file.getName().trim().contains(fileName);\n    }"
        },
        {
            "Method Name": "getToUrlAuthentication",
            "Method Source": "public static void getToUrlAuthentication(String url, String username, String password) {\n        // Get the devtools from the running drivers and create a session\n        DevTools devTools = ((HasDevTools) DriverManager.getDriver()).getDevTools();\n        devTools.createSession();\n\n        // Enable the Network domain of devtools\n        devTools.send(Network.enable(Optional.of(100000), Optional.of(100000), Optional.of(100000)));\n        String auth = username + \":\" + password;\n\n        // Encoding the username and password using Base64 (java.util)\n        String encodeToString = Base64.getEncoder().encodeToString(auth.getBytes());\n\n        // Pass the network header -> Authorization : Basic <encoded String>\n        Map<String, Object> headers = new HashMap<>();\n        headers.put(\"Authorization\", \"Basic \" + encodeToString);\n        devTools.send(Network.setExtraHTTPHeaders(new Headers(headers)));\n\n        LogUtils.info(\"getToUrlAuthentication with URL: \" + url);\n        LogUtils.info(\"getToUrlAuthentication with Username: \" + username);\n        LogUtils.info(\"getToUrlAuthentication with Password: \" + password);\n        // Load the application url\n        openWebsite(url);\n        sleep(3);\n    }"
        },
        {
            "Method Name": "verifyHTML5RequiredField",
            "Method Source": "public static boolean verifyHTML5RequiredField(By by) {\n        JavascriptExecutor js = (JavascriptExecutor) DriverManager.getDriver();\n        boolean verifyRequired = (Boolean) js.executeScript(\"return arguments[0].required;\", getWebElement(by));\n        return verifyRequired;\n    }"
        },
        {
            "Method Name": "verifyHTML5ValidValueField",
            "Method Source": "public static boolean verifyHTML5ValidValueField(By by) {\n        JavascriptExecutor js = (JavascriptExecutor) DriverManager.getDriver();\n        boolean verifyValid = (Boolean) js.executeScript(\"return arguments[0].validity.valid;\", getWebElement(by));\n        return verifyValid;\n    }"
        },
        {
            "Method Name": "getHTML5MessageField",
            "Method Source": "public static String getHTML5MessageField(By by) {\n        JavascriptExecutor js = (JavascriptExecutor) DriverManager.getDriver();\n        String message = (String) js.executeScript(\"return arguments[0].validationMessage;\", getWebElement(by));\n        return message;\n    }"
        },
        {
            "Method Name": "setWindowSize",
            "Method Source": "public static void setWindowSize(int widthPixel, int heightPixel) {\n        DriverManager.getDriver().manage().window().setSize(new Dimension(widthPixel, heightPixel));\n    }"
        },
        {
            "Method Name": "setWindowPosition",
            "Method Source": "public static void setWindowPosition(int X, int Y) {\n        DriverManager.getDriver().manage().window().setPosition(new Point(X, Y));\n    }"
        },
        {
            "Method Name": "maximizeWindow",
            "Method Source": "public static void maximizeWindow() {\n        DriverManager.getDriver().manage().window().maximize();\n    }"
        },
        {
            "Method Name": "minimizeWindow",
            "Method Source": "public static void minimizeWindow() {\n        DriverManager.getDriver().manage().window().minimize();\n    }"
        },
        {
            "Method Name": "printPage",
            "Method Source": "public static String printPage(int endPage) {\n        PrintOptions printOptions = new PrintOptions();\n        //From page 1 to end page\n        printOptions.setPageRanges(\"1-\" + endPage);\n\n        Pdf pdf = ((PrintsPage) DriverManager.getDriver()).print(printOptions);\n        return pdf.getContent();\n    }"
        },
        {
            "Method Name": "getJsExecutor",
            "Method Source": "public static JavascriptExecutor getJsExecutor() {\n        JavascriptExecutor js = (JavascriptExecutor) DriverManager.getDriver();\n        return js;\n    }"
        },
        {
            "Method Name": "getTextWithJsExecutor",
            "Method Source": "public static String getTextWithJsExecutor(By by) {\n        // Cr\u00e9er un objet JavascriptExecutor\n        JavascriptExecutor js = (JavascriptExecutor) DriverManager.getDriver();\n        // Utiliser JavascriptExecutor pour r\u00e9cup\u00e9rer le texte de l'\u00e9l\u00e9ment\n        String text = (String) js.executeScript(\"return arguments[0].textContent;\", getWebElement(by));\n        return text;\n    }"
        },
        {
            "Method Name": "getWebElement",
            "Method Source": "public static WebElement getWebElement(By by) {\n        waitForElementVisible(by);\n        return waitForElementVisible(by);\n\n    }"
        },
        {
            "Method Name": "waitForElements",
            "Method Source": "public static List<WebElement> waitForElements(List<WebElement> locator) {\n        Wait<WebDriver> wait = new FluentWait<>(DriverManager.getDriver())\n                .withTimeout(Duration.ofSeconds(FrameworkConstants.WAIT_EXPLICIT))\n                .pollingEvery(Duration.ofMillis(POLLINGEVERY))  // check every 500 ms\n                .ignoring(NoSuchElementException.class)\n                .withMessage(\"\u274c Timeout waiting for the element\");\n        return wait.until(ExpectedConditions.visibilityOfAllElements(locator));\n    }"
        },
        {
            "Method Name": "checkWebElmentDisabledWithJS",
            "Method Source": "public static void checkWebElmentDisabledWithJS(By by) {\n        waitForElementVisible(by);\n        JavascriptExecutor js = (JavascriptExecutor) DriverManager.getDriver();\n        Boolean isDisabled = (Boolean) js.executeScript(\n                \"return arguments[0].classList.contains('aspNetDisabled');\", DriverManager.getDriver().findElement(by));\n        Assert.assertTrue(isDisabled, \"\u274c \" + \" IS NOT Disabled \");\n\n    }"
        },
        {
            "Method Name": "checkWebElmentIsDisabled",
            "Method Source": "public static void checkWebElmentIsDisabled(By by) {\n        waitForElementVisible(by);\n        Assert.assertFalse(DriverManager.getDriver().findElement(by).isEnabled(), \"\u274c \" + \" IS NOT Disabled \");\n    }"
        },
        {
            "Method Name": "checkWebElmentIsNotDisabled",
            "Method Source": "public static void checkWebElmentIsNotDisabled(By by) {\n        waitForElementVisible(by);\n        Assert.assertTrue(DriverManager.getDriver().findElement(by).isEnabled(), \"\u274c \" + \" IS NOT Disabled \");\n    }"
        },
        {
            "Method Name": "getWebElements",
            "Method Source": "public static List<WebElement> getWebElements(By by) {\n\n        return DriverManager.getDriver().findElements(by);\n    }"
        },
        {
            "Method Name": "logConsole",
            "Method Source": "public static void logConsole(@Nullable Object object) {\n        System.out.println(object);\n    }"
        },
        {
            "Method Name": "notificationsAllow",
            "Method Source": "public static ChromeOptions notificationsAllow() {\n        // Create a Map to store options\n        Map<String, Object> prefs = new HashMap<String, Object>();\n\n        // Add keys and values to Map as follows to disable browser notifications\n        // Pass argument 1 to ALLOW and 2 to BLOCK\n        prefs.put(\"profile.default_content_setting_values.notifications\", 1);\n\n        // Create a ChromeOptions session\n        ChromeOptions options = new ChromeOptions();\n        options.addArguments(\"--headless\");\n        options.addArguments(\"--no-sandbox\");\n        options.addArguments(\"--disable-dev-shm-usage\");\n        options.addArguments(\"--disable-gpu\");\n        // Use the setExperimentalOption function to execute the value through the above prefs object\n        options.setExperimentalOption(\"prefs\", prefs);\n\n        //Returns the set value of the ChromeOptions object\n        return options;\n    }"
        },
        {
            "Method Name": "notificationsBlock",
            "Method Source": "public static ChromeOptions notificationsBlock() {\n        // Create a Map to store options\n        Map<String, Object> prefs = new HashMap<String, Object>();\n\n        // Add keys and values to Map as follows to disable browser notifications\n        // Pass argument 1 to ALLOW and 2 to BLOCK\n        prefs.put(\"profile.default_content_setting_values.notifications\", 2);\n\n        // Create a ChromeOptions session\n        ChromeOptions options = new ChromeOptions();\n        options.addArguments(\"--headless\");\n        options.addArguments(\"--no-sandbox\");\n        options.addArguments(\"--disable-dev-shm-usage\");\n        options.addArguments(\"--disable-gpu\");\n        // Use the setExperimentalOption function to execute the value through the above prefs object\n        options.setExperimentalOption(\"prefs\", prefs);\n\n        //Returns the set value of the ChromeOptions object\n        return options;\n    }"
        },
        {
            "Method Name": "uploadFileWithSendKeys",
            "Method Source": "public static void uploadFileWithSendKeys(By by, String filePath) {\n        smartWait();\n\n        waitForElementVisible(by).sendKeys(filePath);\n\n\n    }"
        },
        {
            "Method Name": "getCurrentUrl",
            "Method Source": "public static String getCurrentUrl() {\n        smartWait();\n        LogUtils.info(\"Get Current URL: \" + DriverManager.getDriver().getCurrentUrl());\n        return DriverManager.getDriver().getCurrentUrl();\n    }"
        },
        {
            "Method Name": "getPageTitle",
            "Method Source": "public static String getPageTitle() {\n        smartWait();\n        String title = DriverManager.getDriver().getTitle();\n        LogUtils.info(\"Get Page Title: \" + DriverManager.getDriver().getTitle());\n        return title;\n    }"
        },
        {
            "Method Name": "VerifyPageTitle",
            "Method Source": "public static boolean VerifyPageTitle(String pageTitle) {\n        smartWait();\n        return getPageTitle().equals(pageTitle);\n    }"
        },
        {
            "Method Name": "verifyPageContainsText",
            "Method Source": "public static boolean verifyPageContainsText(String text) {\n        smartWait();\n        return DriverManager.getDriver().getPageSource().contains(text);\n    }"
        },
        {
            "Method Name": "selectOptionByText",
            "Method Source": "public static void selectOptionByText(By by, String text) {\n        smartWait();\n        Select select = new Select(getWebElement(by));\n        select.selectByVisibleText(text);\n        LogUtils.info(\"Select Option \" + by + \"by text \" + text);\n    }"
        },
        {
            "Method Name": "getselectedOption",
            "Method Source": "public static String getselectedOption(By by) {\n        smartWait();\n        Select select = new Select(getWebElement(by));\n        return select.getFirstSelectedOption().getText();\n    }"
        },
        {
            "Method Name": "selectOptionByValue",
            "Method Source": "public static void selectOptionByValue(By by, String value) {\n        smartWait();\n\n        Select select = new Select(getWebElement(by));\n        select.selectByValue(value);\n        LogUtils.info(\"Select Option \" + by + \"by value \" + value);\n    }"
        },
        {
            "Method Name": "selectOptionByIndex",
            "Method Source": "public static void selectOptionByIndex(By by, int index) {\n        smartWait();\n\n        Select select = new Select(getWebElement(by));\n        select.selectByIndex(index);\n        LogUtils.info(\"Select Option \" + by + \"by index \" + index);\n    }"
        },
        {
            "Method Name": "verifyOptionTotal",
            "Method Source": "public static void verifyOptionTotal(By by, int total) {\n        smartWait();\n\n        Select select = new Select(getWebElement(by));\n        LogUtils.info(\"Verify Option Total equals: \" + total);\n        Assert.assertEquals(total, select.getOptions().size());\n    }"
        },
        {
            "Method Name": "getOptionTotal",
            "Method Source": "public static int getOptionTotal(By by) {\n        smartWait();\n        Select select = new Select(getWebElement(by));\n        LogUtils.info(\"Verify Option Total equals: \" + select.getOptions().size());\n        return select.getOptions().size();\n    }"
        },
        {
            "Method Name": "getOptions",
            "Method Source": "public static List<WebElement> getOptions(By by) {\n        smartWait();\n        Select select = new Select(getWebElement(by));\n        LogUtils.info(\"Verify Option Total equals: \" + select.getOptions().size());\n        return select.getOptions();\n    }"
        },
        {
            "Method Name": "getSelectedText",
            "Method Source": "public static String getSelectedText(By by) {\n        smartWait();\n        Select select = new Select(getWebElement(by));\n        LogUtils.info(\"Verify Option Selected by text: \" + select.getFirstSelectedOption().getText());\n        return select.getFirstSelectedOption().getText();\n    }"
        },
        {
            "Method Name": "switchToFrameByIndex",
            "Method Source": "public static void switchToFrameByIndex(int index) {\n        smartWait();\n\n        Wait<WebDriver> wait = new FluentWait<>(DriverManager.getDriver())\n                .withTimeout(Duration.ofSeconds(FrameworkConstants.WAIT_EXPLICIT))\n                .pollingEvery(Duration.ofMillis(POLLINGEVERY))  // check every 500 ms\n                .ignoring(NoSuchElementException.class)\n                .withMessage(\"\u274c Timeout waiting for the element\");\n        wait.until(ExpectedConditions.frameToBeAvailableAndSwitchToIt(index));\n        //DriverManager.getDriver().switchTo().frame(Index);\n        LogUtils.info(\"Switch to Frame by Index. \" + index);\n    }"
        },
        {
            "Method Name": "switchToFrameByIdOrName",
            "Method Source": "public static void switchToFrameByIdOrName(String IdOrName) {\n        Wait<WebDriver> wait = new FluentWait<>(DriverManager.getDriver())\n                .withTimeout(Duration.ofSeconds(FrameworkConstants.WAIT_EXPLICIT))\n                .pollingEvery(Duration.ofMillis(POLLINGEVERY))  // check every 500 ms\n                .ignoring(NoSuchElementException.class)\n                .withMessage(\"\u274c Timeout waiting for the element\");\n        wait.until(ExpectedConditions.frameToBeAvailableAndSwitchToIt(By.id(IdOrName)));\n        DriverManager.getDriver().switchTo().frame(IdOrName);\n\n        LogUtils.info(\"Switch to Frame by ID or Name. \" + IdOrName);\n    }"
        },
        {
            "Method Name": "switchToFrameByIDjs",
            "Method Source": "public static void switchToFrameByIDjs(String IdOrName) {\n        WebElement iframe = DriverManager.getDriver().findElement(By.id(IdOrName));\n        ((JavascriptExecutor) DriverManager.getDriver()).executeScript(\"arguments[0].scrollIntoView(true);\", iframe);\n        DriverManager.getDriver().switchTo().frame(iframe);\n\n        LogUtils.info(\"Switch to Frame by ID or Name. \" + IdOrName);\n    }"
        },
        {
            "Method Name": "switchToFrameOrigine",
            "Method Source": "public static void switchToFrameOrigine() {\n        DriverManager.getDriver().switchTo().defaultContent();\n        LogUtils.info(\"Switch to Frame default\");\n    }"
        },
        {
            "Method Name": "switchToFrameByElement",
            "Method Source": "public static void switchToFrameByElement(By by) {\n        smartWait();\n\n        Wait<WebDriver> wait = new FluentWait<>(DriverManager.getDriver())\n                .withTimeout(Duration.ofSeconds(FrameworkConstants.WAIT_EXPLICIT))\n                .pollingEvery(Duration.ofMillis(POLLINGEVERY))  // check every 500 ms\n                .ignoring(NoSuchElementException.class)\n                .withMessage(\"\u274c Timeout waiting for the element\");\n        wait.until(ExpectedConditions.frameToBeAvailableAndSwitchToIt(by));\n        LogUtils.info(\"Switch to Frame by Element. \" + by);\n    }"
        },
        {
            "Method Name": "switchToDefaultContent",
            "Method Source": "public static void switchToDefaultContent() {\n        smartWait();\n\n        DriverManager.getDriver().switchTo().defaultContent();\n        LogUtils.info(\"Switch to Default Content\");\n    }"
        },
        {
            "Method Name": "switchToWindowOrTabByPosition",
            "Method Source": "public static void switchToWindowOrTabByPosition(int position) {\n        smartWait();\n\n        DriverManager.getDriver().switchTo().window(DriverManager.getDriver().getWindowHandles().toArray()[position].toString());\n        LogUtils.info(\"Switch to Window or Tab by Position: \" + position);\n    }"
        },
        {
            "Method Name": "closeCurrentWindow",
            "Method Source": "public static void closeCurrentWindow() {\n        LogUtils.info(\"Close current Window.\" + getCurrentUrl());\n        DriverManager.getDriver().close();\n        LogUtils.info(\"Close current Window\");\n    }"
        },
        {
            "Method Name": "verifyTotalOfWindowsOrTab",
            "Method Source": "public static boolean verifyTotalOfWindowsOrTab(int number) {\n        return new FluentWait<>(DriverManager.getDriver())\n                .withTimeout(Duration.ofSeconds(FrameworkConstants.WAIT_EXPLICIT))\n                .pollingEvery(Duration.ofMillis(POLLINGEVERY))  // check every 500 ms\n                .ignoring(NoSuchElementException.class)\n                .withMessage(\"\u274c Timeout waiting for the element\").until(ExpectedConditions.numberOfWindowsToBe(number));\n    }"
        },
        {
            "Method Name": "openNewTab",
            "Method Source": "public static void openNewTab() {\n        smartWait();\n        // Opens a new tab and switches to new tab\n        DriverManager.getDriver().switchTo().newWindow(WindowType.TAB);\n        LogUtils.info(\"Open new Tab\");\n    }"
        },
        {
            "Method Name": "openNewWindow",
            "Method Source": "public static void openNewWindow() {\n        smartWait();\n        // Opens a new window and switches to new window\n        DriverManager.getDriver().switchTo().newWindow(WindowType.WINDOW);\n        LogUtils.info(\"Open new Window\");\n    }"
        },
        {
            "Method Name": "switchToMainWindow",
            "Method Source": "public static void switchToMainWindow() {\n        smartWait();\n        DriverManager.getDriver().switchTo().window(DriverManager.getDriver().getWindowHandles().toArray()[0].toString());\n        LogUtils.info(\"Switch to Main Window.\" + DriverManager.getDriver());\n    }"
        },
        {
            "Method Name": "switchToMainWindow",
            "Method Source": "public static void switchToMainWindow(String originalWindow) {\n        smartWait();\n        DriverManager.getDriver().switchTo().window(originalWindow);\n        LogUtils.info(\"Switch to Main Window.\" + originalWindow);\n    }"
        },
        {
            "Method Name": "switchToLastWindow",
            "Method Source": "public static void switchToLastWindow() {\n        smartWait();\n        Set<String> windowHandles = DriverManager.getDriver().getWindowHandles();\n        WebDriver newDriver = DriverManager.getDriver().switchTo().window(DriverManager.getDriver().getWindowHandles().toArray()[windowHandles.size() - 1].toString());\n        LogUtils.info(\"Switch to Last Window.\" + newDriver.getCurrentUrl());\n    }"
        },
        {
            "Method Name": "acceptAlert",
            "Method Source": "public static void acceptAlert() {\n        sleep(FrameworkConstants.WAIT_SLEEP_STEP);\n        DriverManager.getDriver().switchTo().alert().accept();\n        LogUtils.info(\"Click Accept on Alert.\");\n    }"
        },
        {
            "Method Name": "dismissAlert",
            "Method Source": "public static void dismissAlert() {\n        sleep(FrameworkConstants.WAIT_SLEEP_STEP);\n        DriverManager.getDriver().switchTo().alert().dismiss();\n        LogUtils.info(\"Click Dismiss on Alert.\");\n    }"
        },
        {
            "Method Name": "getTextAlert",
            "Method Source": "public static String getTextAlert() {\n        sleep(FrameworkConstants.WAIT_SLEEP_STEP);\n        LogUtils.info(\"Get text ion alert: \" + DriverManager.getDriver().switchTo().alert().getText());\n        return DriverManager.getDriver().switchTo().alert().getText();\n    }"
        },
        {
            "Method Name": "setTextAlert",
            "Method Source": "public static void setTextAlert(String text) {\n        sleep(FrameworkConstants.WAIT_SLEEP_STEP);\n        DriverManager.getDriver().switchTo().alert().sendKeys(text);\n        LogUtils.info(\"Set \" + text + \" on Alert.\");\n    }"
        },
        {
            "Method Name": "verifyEquals",
            "Method Source": "public static boolean verifyEquals(Object value1, Object value2) {\n        boolean result = value1.equals(value2);\n        Assert.assertEquals(value1, value2, \"\u274c \" + value1 + \" != \" + value2);\n        return result;\n    }"
        },
        {
            "Method Name": "verifyEquals",
            "Method Source": "public static boolean verifyEquals(List value1, List value2) {\n        boolean result = value1.equals(value2);\n        Assert.assertEquals(value1, value2, \"\u274c \" + value1 + \" != \" + value2);\n        return result;\n    }"
        },
        {
            "Method Name": "verifyEquals",
            "Method Source": "public static boolean verifyEquals(Object value1, Object value2, String message) {\n        boolean result = value1.equals(value2);\n        Assert.assertEquals(value1, value2, \"\u274c \" + message);\n        return result;\n    }"
        },
        {
            "Method Name": "verifyContains",
            "Method Source": "public static boolean verifyContains(String value1, String value2) {\n        boolean result = value1.contains(value2);\n\n\n        Assert.assertTrue(result, \"\u274c \" + value1 + \" NOT CONTAINS \" + value2);\n\n        return result;\n    }"
        },
        {
            "Method Name": "verifyContains",
            "Method Source": "public static boolean verifyContains(String value1, String value2, String message) {\n        boolean result = value1.contains(value2);\n        LogUtils.info(\"Verify Contains: \" + value1 + \" CONTAINS \" + value2);\n        return result;\n    }"
        },
        {
            "Method Name": "verifyTrue",
            "Method Source": "public static boolean verifyTrue(boolean condition) {\n\n        Assert.assertTrue(condition, \"The condition is FALSE.\");\n        return condition;\n    }"
        },
        {
            "Method Name": "verifyTrue",
            "Method Source": "public static boolean verifyTrue(boolean condition, String message) {\n\n        Assert.assertTrue(condition, message);\n\n        return condition;\n    }"
        },
        {
            "Method Name": "verifyElementText",
            "Method Source": "public static boolean verifyElementText(By by, String text) {\n        smartWait();\n        waitForElementVisible(by);\n\n        return getTextElement(by).trim().equals(text.trim());\n    }"
        },
        {
            "Method Name": "scrollToElementAtTop",
            "Method Source": "public static void scrollToElementAtTop(By by) {\n        smartWait();\n        JavascriptExecutor js = (JavascriptExecutor) DriverManager.getDriver();\n        js.executeScript(\"arguments[0].scrollIntoView(true);\", getWebElement(by));\n        LogUtils.info(\"Scroll to element \" + by);\n    }"
        },
        {
            "Method Name": "scrollToElementAtBottom",
            "Method Source": "public static void scrollToElementAtBottom(By by) {\n        JavascriptExecutor js = (JavascriptExecutor) DriverManager.getDriver();\n        js.executeScript(\"arguments[0].scrollIntoView(false);\", DriverManager.getDriver().findElement(by));\n        LogUtils.info(\"Scroll to element \" + by);\n    }"
        },
        {
            "Method Name": "scrollToElementAtTop",
            "Method Source": "public static void scrollToElementAtTop(WebElement webElement) {\n        smartWait();\n\n        JavascriptExecutor js = (JavascriptExecutor) DriverManager.getDriver();\n        js.executeScript(\"arguments[0].scrollIntoView(true);\", webElement);\n        LogUtils.info(\"Scroll to element \" + webElement);\n    }"
        },
        {
            "Method Name": "scrollToElementAndClick",
            "Method Source": "public static void scrollToElementAndClick(WebElement webElement) {\n        smartWait();\n\n        JavascriptExecutor js = (JavascriptExecutor) DriverManager.getDriver();\n        js.executeScript(\"arguments[0].scrollIntoView(true);\", webElement);\n        LogUtils.info(\"Scroll to element \" + webElement);\n        js.executeScript(\"arguments[0].click();\", webElement);\n        LogUtils.info(\"Scroll to element \" + webElement);\n    }"
        },
        {
            "Method Name": "scrollToElementToView",
            "Method Source": "public static WebElement scrollToElementToView(WebElement webElement) {\n        smartWait();\n\n        JavascriptExecutor js = (JavascriptExecutor) DriverManager.getDriver();\n        js.executeScript(\"arguments[0].scrollIntoView(true);\", webElement);\n        LogUtils.info(\"Scroll to element \" + webElement);\n        LogUtils.info(\"Scroll to element \" + webElement);\n        return webElement;\n\n    }"
        },
        {
            "Method Name": "scrollToElementAtBottom",
            "Method Source": "public static void scrollToElementAtBottom(WebElement webElement) {\n        smartWait();\n\n        JavascriptExecutor js = (JavascriptExecutor) DriverManager.getDriver();\n        js.executeScript(\"arguments[0].scrollIntoView(false);\", webElement);\n        LogUtils.info(\"Scroll to element \" + webElement);\n    }"
        },
        {
            "Method Name": "scrollToPosition",
            "Method Source": "public static void scrollToPosition(int X, int Y) {\n        smartWait();\n\n        JavascriptExecutor js = (JavascriptExecutor) DriverManager.getDriver();\n        js.executeScript(\"window.scrollTo(\" + X + \",\" + Y + \");\");\n        LogUtils.info(\"Scroll to position X = \" + X + \" ; Y = \" + Y);\n    }"
        },
        {
            "Method Name": "reloadPage",
            "Method Source": "public static void reloadPage() {\n        smartWait();\n\n        DriverManager.getDriver().navigate().refresh();\n        waitForPageLoaded();\n        LogUtils.info(\"Reloaded page \" + DriverManager.getDriver().getCurrentUrl());\n    }"
        },
        {
            "Method Name": "openWebsite",
            "Method Source": "public static void openWebsite(String URL) {\n        sleep(FrameworkConstants.WAIT_SLEEP_STEP);\n\n        DriverManager.getDriver().get(URL);\n        waitForPageLoaded();\n\n        LogUtils.info(\"Open website with URL: \" + URL);\n\n\n    }"
        },
        {
            "Method Name": "navigateToUrl",
            "Method Source": "public static void navigateToUrl(String URL) {\n        sleep(FrameworkConstants.WAIT_SLEEP_STEP);\n        DriverManager.getDriver().navigate().to(URL);\n        waitForPageLoaded();\n\n        LogUtils.info(\"\\uD83C\\uDF10 Navigate to URL: \" + URL);\n\n\n    }"
        },
        {
            "Method Name": "setText",
            "Method Source": "public static void setText(By by, String value) {\n        smartWait();\n        waitForElementVisible(by).clear();\n        waitForElementVisible(by).sendKeys(value);\n        LogUtils.info(\"Set text \" + value + \" on \" + by);\n\n    }"
        },
        {
            "Method Name": "setTextWithJs",
            "Method Source": "public static void setTextWithJs(By by, String value) {\n        smartWait();\n        ((JavascriptExecutor) DriverManager.getDriver()).executeScript(\"arguments[0].value='';\", getWebElement(by));\n        ((JavascriptExecutor) DriverManager.getDriver()).executeScript(\"arguments[0].value=arguments[1];\", value, getWebElement(by));\n        LogUtils.info(\"Set text \" + value + \" on \" + by);\n\n    }"
        },
        {
            "Method Name": "setText",
            "Method Source": "public static void setText(By by, String value, Keys keys) {\n        smartWait();\n        waitForElementVisible(by).sendKeys(value, keys);\n        LogUtils.info(\"Set text \" + value + \" on \" + by + \" and press key \" + keys.name());\n\n\n    }"
        },
        {
            "Method Name": "sendKeys",
            "Method Source": "public static void sendKeys(By by, Keys keys) {\n        smartWait();\n        waitForElementVisible(by).sendKeys(keys);\n        LogUtils.info(\"Press key \" + keys.name() + \" on element \" + by);\n\n\n    }"
        },
        {
            "Method Name": "sendKeys",
            "Method Source": "public static void sendKeys(Keys keys) {\n        smartWait();\n        Actions actions = new Actions(DriverManager.getDriver());\n        actions.sendKeys(keys);\n        LogUtils.info(\"Press key \" + keys.name() + \" on keyboard\");\n\n    }"
        },
        {
            "Method Name": "clearText",
            "Method Source": "public static void clearText(By by) {\n        smartWait();\n        waitForElementVisible(by).clear();\n        LogUtils.info(\"Clear text in textbox \" + by);\n\n    }"
        },
        {
            "Method Name": "clearTextCtrlA",
            "Method Source": "public static void clearTextCtrlA(By by) {\n        smartWait();\n        waitForElementVisible(by);\n        Actions actions = new Actions(DriverManager.getDriver());\n        sleep(1);\n        actions.click(getWebElement(by)).build().perform();\n        //actions.moveToElement(getWebElement(by)).click().build();\n        actions.keyDown(Keys.CONTROL).sendKeys(\"a\").keyUp(Keys.CONTROL).build().perform();\n        sleep(1);\n        actions.sendKeys(Keys.DELETE).build().perform();\n\n        LogUtils.info(\"Clear text in textbox \" + by);\n\n\n    }"
        },
        {
            "Method Name": "clearAndFillText",
            "Method Source": "public static void clearAndFillText(By by, String value) {\n        smartWait();\n        waitForElementVisible(by);\n        getWebElement(by).clear();\n        getWebElement(by).sendKeys(value);\n        LogUtils.info(\"Clear and Fill \" + value + \" on \" + by);\n\n\n    }"
        },
        {
            "Method Name": "clickElement",
            "Method Source": "public static void clickElement(By by) {\n        smartWait();\n        waitForElementClickable(by).click();\n        LogUtils.info(\"Clicked on the element \" + by.toString());\n    }"
        },
        {
            "Method Name": "clickElement",
            "Method Source": "public static void clickElement(By by, int timeout) {\n        smartWait();\n        waitForElementClickable(by, timeout).click();\n        LogUtils.info(\"Clicked on the element \" + by.toString());\n\n    }"
        },
        {
            "Method Name": "clickElementWithJs",
            "Method Source": "public static void clickElementWithJs(WebElement by) {\n        smartWait();\n        //Scroll to element v\u1edbi Javascript Executor\n        JavascriptExecutor js = (JavascriptExecutor) DriverManager.getDriver();\n        js.executeScript(\"arguments[0].scrollIntoView(true);\", by);\n        //Click with JS\n        js.executeScript(\"arguments[0].click();\", by);\n        LogUtils.info(\"Click on element with JS: \" + by);\n    }"
        },
        {
            "Method Name": "clickJs",
            "Method Source": "public static void clickJs(String elementId) {\n        smartWait();\n        // Utiliser JavascriptExecutor pour cliquer sur l'\u00e9l\u00e9ment\n        JavascriptExecutor jsExecutor = (JavascriptExecutor) DriverManager.getDriver();\n        jsExecutor.executeScript(\"document.getElementById('\" + elementId + \"').click();\");\n    }"
        },
        {
            "Method Name": "clickLinkText",
            "Method Source": "public static void clickLinkText(String linkText) {\n        smartWait();\n\n        Wait<WebDriver> wait = new FluentWait<>(DriverManager.getDriver())\n                .withTimeout(Duration.ofSeconds(FrameworkConstants.WAIT_EXPLICIT))\n                .pollingEvery(Duration.ofMillis(POLLINGEVERY))  // check every 500 ms\n                .ignoring(NoSuchElementException.class)\n                .withMessage(\"\u274c Timeout waiting for the element\");\n        WebElement elementWaited = wait.until(ExpectedConditions.visibilityOfElementLocated(By.linkText(linkText)));\n        elementWaited.click();\n\n        LogUtils.info(\"Click on link text \" + linkText);\n\n\n    }"
        },
        {
            "Method Name": "rightClickElement",
            "Method Source": "public static void rightClickElement(By by) {\n        smartWait();\n        Actions action = new Actions(DriverManager.getDriver());\n        action.contextClick(waitForElementVisible(by)).build().perform();\n        LogUtils.info(\"Right click on element \" + by);\n\n\n    }"
        },
        {
            "Method Name": "getTextElement",
            "Method Source": "public static String getTextElement(By by) {\n        smartWait();\n        return waitForElementVisible(by).getText().trim();\n    }"
        },
        {
            "Method Name": "getCssValueElement",
            "Method Source": "public static String getCssValueElement(By by, String cssName) {\n        smartWait();\n        return waitForElementVisible(by).getCssValue(cssName);\n    }"
        },
        {
            "Method Name": "getSizeElement",
            "Method Source": "public static Dimension getSizeElement(By by) {\n        smartWait();\n        return waitForElementVisible(by).getSize();\n    }"
        },
        {
            "Method Name": "getLocationElement",
            "Method Source": "public static Point getLocationElement(By by) {\n        smartWait();\n        return waitForElementVisible(by).getLocation();\n    }"
        },
        {
            "Method Name": "getTagNameElement",
            "Method Source": "public static String getTagNameElement(By by) {\n        smartWait();\n        return waitForElementVisible(by).getTagName();\n    }"
        },
        {
            "Method Name": "getMatConnecte",
            "Method Source": "public static String getMatConnecte() {\n        Cookie matCookie = DriverManager.getDriver().manage().getCookieNamed(\"mat\");\n        System.err.println(\"cookies : \" + matCookie.getValue());\n        String mat = matCookie.getValue();\n        return mat;\n    }"
        },
        {
            "Method Name": "lessDate",
            "Method Source": "public static int lessDate(String dateCreate) {\n        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");\n        LocalDate date = LocalDate.parse(dateCreate, formatter);\n        LocalDate todays = LocalDate.now();\n        int dayvar = date.getDayOfMonth();\n        int today = todays.getDayOfMonth();\n        return -dayvar - today;\n\n    }"
        },
        {
            "Method Name": "moreDate",
            "Method Source": "public static int moreDate(String dateCreate) {\n        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");\n        LocalDate date = LocalDate.parse(dateCreate, formatter);\n        LocalDate todays = LocalDate.now();\n        int dayvar = date.getDayOfMonth();\n        int today = todays.getDayOfMonth();\n        return dayvar + today + 5;\n\n    }"
        },
        {
            "Method Name": "getLang",
            "Method Source": "public static String getLang() {\n        Cookie cookieLang = DriverManager.getDriver().manage().getCookieNamed(\"lan\");\n        return cookieLang.getValue();\n    }"
        }
    ]
}